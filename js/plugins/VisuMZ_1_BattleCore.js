//=============================================================================
// VisuStella MZ - Battle Core
// VisuMZ_1_BattleCore.js
//=============================================================================

var Imported = Imported || {};
Imported.VisuMZ_1_BattleCore = true;

var VisuMZ = VisuMZ || {};
VisuMZ.BattleCore = VisuMZ.BattleCore || {};
VisuMZ.BattleCore.version = 1.62;

//=============================================================================
 /*:
 * @target MZ
 * @plugindesc [RPG Maker MZ] [Tier 1] [Version 1.62] [BattleCore]
 * @author VisuStella
 * @url http://www.yanfly.moe/wiki/Battle_Core_VisuStella_MZ
 * @orderAfter VisuMZ_0_CoreEngine
 *
 * @help
 * ============================================================================
 * Introduction
 * ============================================================================
 *
 * The Battle Core plugin revamps the battle engine provided by RPG Maker MZ to
 * become more flexible, streamlined, and support a variety of features. The
 * updated battle engine allows for custom Action Sequences, battle layout
 * styles, and a lot of control over the battle mechanics, too.
 *
 * Features include all (but not limited to) the following:
 * 
 * * Action Sequence Plugin Commands to give you full control over what happens
 *   during the course of a skill or item.
 * * Animated Sideview Battler support for enemies!
 * * Auto Battle options for party-wide and actor-only instances.
 * * Base Troop Events to quickly streamline events for all Troop events.
 * * Battle Command control to let you change which commands appear for actors.
 * * Battle Layout styles to change the way the battle scene looks.
 * * Casting animation support for skills.
 * * Critical Hit control over the success rate formula and damage multipliers.
 * * Custom target scopes added for skills and items.
 * * Damage formula control, including Damage Styles.
 * * Damage caps, both hard caps and soft caps.
 * * Damage traits such Armor Penetration/Reduction to bypass defenses.
 * * Elements & Status Menu Core support for traits.
 * * Multitude of JavaScript notetags and global Plugin Parameters to let you
 *   make a variety of effects across various instances during battle.
 * * Party Command window can be skipped/disabled entirely.
 * * Weather effects now show in battle.
 * * Streamlined Battle Log to remove redundant information and improve the
 *   flow of battle.
 * * Visual HP Gauges can be displayed above the heads of actors and/or enemies
 *   with a possible requirement for enemies to be defeated at least once first
 *   in order for them to show.
 *
 * ============================================================================
 * Requirements
 * ============================================================================
 *
 * This plugin is made for RPG Maker MZ. This will not work in other iterations
 * of RPG Maker.
 *
 * ------ Tier 1 ------
 *
 * This plugin is a Tier 1 plugin. Place it under other plugins of lower tier
 * value on your Plugin Manager list (ie: 0, 1, 2, 3, 4, 5). This is to ensure
 * that your plugins will have the best compatibility with the rest of the
 * VisuStella MZ library.
 *
 * ============================================================================
 * Major Changes
 * ============================================================================
 *
 * This plugin will overwrite some core parts of the RPG Maker MZ base code in
 * order to ensure the Battle Core plugin will work at full capacity. The
 * following are explanations of what has been changed.
 *
 * ---
 *
 * Action Sequences
 *
 * - Action sequences are now done either entirely by the Battle Log Window or
 * through common events if the <Custom Action Sequence> notetag is used.
 * In RPG Maker MZ by default, Action Sequences would be a mixture of using the
 * Battle Log Window, the Battle Manager, and the Battle Scene, making it hard
 * to fully grab control of the situation.
 *
 * ---
 *
 * Action Speed
 *
 * - Action speeds determine the turn order in the default battle system. The
 * AGI of a battle unit is also taken into consideration. However, the random
 * variance applied to the action speed system makes the turn order extremely
 * chaotic and hard for the player to determine. Thus, the random variance
 * aspect of it has been turned off. This can be reenabled by default through
 * Plugin Parameters => Mechanics Settings => Allow Random Speed?
 *
 * ---
 *
 * Animated Sideview Battler Support For Enemies
 *
 * - Enemies can now use Sideview Actor sprites for themselves! They will
 * behave like actors and can even carry their own set of weapons for physical
 * attacks. These must be set up using notetags. More information can be found
 * in the notetag section.
 *
 * - As the sprites are normally used for actors, some changes have been made
 * to Sprite_Actor to be able to support both actors and enemies. These changes
 * should have minimal impact on other plugins.
 *
 * ---
 *
 * Battle Sprite Updates
 *
 * - A lot of functions in Sprite_Battler, Sprite_Actor, and Sprite_Enemy have
 * been overwritten to make the new Action Sequence system added by this plugin
 * possible. These changes make it possible for the sprites to move anywhere on
 * the screen, jump, float, change visibility, and more.
 *
 * ---
 *
 * Change Battle Back in Battle
 * 
 * - By default, the Change Battle Back event command does not work in battle.
 * Any settings made to it will only reflect in the following battle. Now, if
 * the battle back event command is used during battle, it will reflect upon
 * any new changes immediately.
 *
 * ---
 *
 * Critical Hit - LUK Influence
 *
 * - The LUK Buffs now affect the critical hit rate based off how the formula
 * is now calculated. Each stack of a LUK Buff will double the critical hit
 * rate and compound upon that. That means a x1 LUK Buff stack will raise it by
 * x2, a x2 LUK Buff stack will raise the critical hit rate by x4, a x3 LUK
 * Buff Stack will raise the critical hit rate stack by x8, and so on.
 *
 * - LUK also plays a role in how much damage is dealt with critical hits. The
 * default critical hit multiplier has been reduced from x3 to x2. However, a
 * percentage of LUK will added on (based off the user's CRI rate) onto the
 * finalized critical damage. If the user's CRI rate is 4%, then 4% of the user
 * LUK value will also be added onto the damage.
 *
 * - This change can be altered through Plugin Parameters => Damage Settings =>
 * Critical Hits => JS: Rate Formula and JS: Damage Formula.
 *
 * ---
 * 
 * Damage Popups
 * 
 * - Damage popups are now formatted with + and - to determine healing and
 * damage. MP Damage will also include "MP" at the back. This is to make it
 * clearer what each colored variant of the damage popup means as well as help
 * color blind players read the on-screen data properly.
 * 
 * - Damage popups have also been rewritten to show all changed aspects instead
 * of just one. Previously with RPG Maker MZ, if an action would deal both HP
 * and MP damage, only one of them would show. Now, everything is separated and
 * both HP and MP changes will at a time.
 * 
 * ---
 * 
 * Dual Wielding
 * 
 * - Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 * animations at once, with the combined ATK of each weapon. It's confusing to
 * look at and does not portray the nature of "Dual Wielding".
 * 
 * - Dual Wielding, or in the case of users adding in third and fourth weapons,
 * Multi Wielding is now changed. Each weapon is displayed individually, each
 * producing its own attack animation, showing each weapon type, and applying
 * only that weapon's ATK, Traits, and related effects. It is no longer a
 * combined effect to display everything at once like RPG Maker MZ default.
 * 
 * - If an actor has multiple weapon slots but some of them are unequipped,
 * then the action will treat the attack as a single attack. There will be no
 * barehanded attack to add on top of it. This is to match RPG Maker MZ's
 * decision to omit a second animation if the same scenario is applied.
 * 
 * ---
 *
 * Force Action
 *
 * - Previously, Forced Actions would interrupt the middle of an event to
 * perform an action. However, with the addition of more flexible Action
 * Sequences, the pre-existing Force Action system would not be able to exist
 * and would require being remade.
 *
 * - Forced Actions now are instead, added to a separate queue from the action
 * battler list. Whenever an action and/or common event is completed, then if
 * there's a Forced Action battler queued, then the Forced Action battler will
 * have its turn. This is the cleanest method available and avoids the most
 * conflicts possible.
 *
 * - This means if you planned to make cinematic sequences with Forced Actions,
 * you will need to account for the queued Force Actions. However, in the case
 * of battle cinematics, we would highly recommend that you use the newly added
 * Action Sequence Plugin Commands instead as those give you more control than
 * any Force Action ever could.
 *
 * ---
 *
 * Random Scope
 *
 * - The skill and item targeting scopes for Random Enemy, 2 Random Enemies,
 * 3 Random Enemies, 4 Random Enemies will now ignore TGR and utilize true
 * randomness.
 *
 * ---
 *
 * Spriteset_Battle Update
 *
 * - The spriteset now has extra containers to separate battlers (actors and
 * enemies), animations, and damage. This is to make actors and enemy battler
 * sprites more efficient to sort (if enabled), so that animations won't
 * interfere with and cover damage sprites, and to make sure damage sprites are
 * unaffected by screen tints in order to ensure the player will always have a
 * clear read on the information relaying sprites.
 *
 * ---
 * 
 * TPB/ATB Active Battle Actor Shifting
 * 
 * - Pressing cancel on the Actor Command Window no longer switches between
 * actors with a full TPB/ATB gauge before reaching the Party Command Window.
 * This is to accomplish a couple of things: 1) reduce the number of button
 * presses to reach the Party Command Window and 2) to prevent motion resets
 * and disrupting action sequences. If this feature is vital to your battle
 * system, we recommend that you do not use this plugin or any of the Battle
 * Core-required plugins.
 * 
 * ---
 *
 * Weather Displayed in Battle
 *
 * - Previously, weather has not been displayed in battle. This means that any
 * weather effects placed on the map do not transfer over to battle and causes
 * a huge disconnect for players. The Battle Core plugin will add weather
 * effects to match the map's weather conditions. Any changes made to weather
 * through event commands midway through battle will also be reflected.
 *
 * ---
 *
 * ============================================================================
 * Base Troops
 * ============================================================================
 *
 * Base Troops can be found, declared, and modified in the Plugin Parameters =>
 * Mechanics Settings => Base Troop ID's. All of the listed Troop ID's here
 * will have their page events replicated and placed under all other troops
 * found in the database.
 *
 * ---
 *
 * This means that if you have an event that runs on Turn 1 of a Base Troop,
 * then for every troop out there, that same event will also run on Turn 1,
 * as well. This is useful for those who wish to customize their battle system
 * further and to reduce the amount of work needed to copy/paste said event
 * pages into every database troop object manually.
 *
 * ---
 *
 * ============================================================================
 * Damage Styles
 * ============================================================================
 *
 * Damage Styles are a new feature added through the Battle Core plugin. When
 * using certain Battle Styles, you can completely ignore typing in the whole
 * damage formula inside the damage formula input box, and instead, insert
 * either a power amount or a multiplier depending on the Damage Style. The
 * plugin will then automatically calculate damage using that value factoring
 * in ATK, DEF, MAT, MDF values.
 *
 * ---
 *
 * Here is a list of the Damage Styles that come with this plugin by default.
 * You can add in your own and even edit them to your liking.
 * Or just remove them if you want.
 *
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Style          Use Formula As   PH/MA Disparity   Stat Scale   Damage Scale
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Standard       Formula          No                Varies       Varies
 * ArmorScaling   Formula          No                Varies       Varies
 * CT             Multiplier       Yes               Low          Normal
 * D4             Multiplier       No                High         Normal
 * DQ             Multiplier       No                Low          Low
 * FF7            Power            Yes               Low          High
 * FF8            Power            Yes               Medium       Normal
 * FF9            Power            Yes               Low          Normal
 * FF10           Power            Yes               Medium       High
 * MK             Multiplier       No                Medium       Low
 * MOBA           Multiplier       No                Medium       Normal
 * PKMN           Power            No                Low          Normal
 *
 * Use the above chart to figure out which Damage Style best fits your game,
 * if you plan on using them.
 *
 * The 'Standard' style is the same as the 'Manual' formula input, except that
 * it allows for the support of <Armor Penetration> and <Armor Reduction>
 * notetags.
 *
 * The 'Armor Scaling' style allows you to type in the base damage calculation
 * without the need to type in any defending modifiers.
 *
 * NOTE: While these are based off the damage formulas found in other games,
 * not all of them are exact replicas. Many of them are adapted for use in
 * RPG Maker MZ since not all RPG's use the same set of parameters and not all
 * external multipliers function the same way as RPG Maker MZ.
 * 
 * ---
 *
 * Style:
 * - This is what the Damage Style is.
 *
 * Use Formula As:
 * - This is what you insert into the formula box.
 * - Formula: Type in the formula for the action just as you would normally.
 * - Multiplier: Type in the multiplier for the action.
 *     Use float values. This means 250% is typed out as 2.50
 * - Power: Type in the power constant for the action.
 *     Use whole numbers. Type in something like 16 for a power constant.
 * 
 * PH/MA Disparity:
 * - Is there a disparity between how Physical Attacks and Magical Attacks
 *   are calculated?
 * - If yes, then physical attacks and magical attacks will have different
 *   formulas used.
 * - If no, then physical attacks and magical attacks will share similar
 *   formulas for how they're calculated.
 *
 * Stat Scale:
 * - How much should stats scale throughout the game?
 * - Low: Keep them under 100 for the best results.
 * - Medium: Numbers work from low to mid 400's for best results.
 * - High: The numbers really shine once they're higher.
 *
 * Damage Scale:
 * - How much does damage vary depending on small parameter changes?
 * - Low: Very little increase from parameter changes.
 * - Normal: Damage scales close to proportionally with parameter changes.
 * - High: Damage can boost itself drastically with parameter changes.
 *
 * ---
 *
 * To determine what kind of parameters are used for the Damage Styles, they
 * will depend on two things: the action's 'Hit Type' (ie Physical Attack,
 * Magical Attack, and Certain Hit) and the action's 'Damage Type' (ie. Damage,
 * Recovery, or Drain).
 *
 * Certain Hit tends to use whichever value is higher: ATK or MAT, and then
 * ignores the target's defense values. Use Certain Hits for 'True Damage'.
 *
 * Use the chart below to figure out everything else:
 * 
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Hit Type      Damage Type   Attacker Parameter   Defender Parameter
 * - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 * Physical      Damage        ATK                  DEF
 * Magical       Damage        MAT                  MDF
 * Certain Hit   Damage        Larger (ATK, MAT)    -Ignores-
 * Physical      Recover       DEF                  -Ignores-
 * Magical       Recover       MDF                  -Ignores-
 * Certain Hit   Recover       Larger (ATK, MAT)    -Ignores-
 * Physical      Drain         ATK                  DEF
 * Magical       Drain         MAT                  MDF
 * Certain Hit   Drain         Larger (ATK, MAT)    -Ignores-
 *
 * These can be modified within the Plugin Parameters in the individual
 * Damage Styles themselves.
 *
 * ---
 *
 * Skills and Items can use different Damage Styles from the setting you've
 * selected in the Plugin Parameters. They can be altered to have different
 * Damage Styles through the usage of a notetag:
 *
 * <Damage Style: name>
 *
 * This will use whichever style is found in the Plugin Parameters.
 *
 * If "Manual" is used, then no style will be used and all calculations will be
 * made strictly based off the formula found inside the formula box.
 *
 * ---
 *
 * ============================================================================
 * VisuStella MZ Compatibility
 * ============================================================================
 *
 * While this plugin is compatible with the majority of the VisuStella MZ
 * plugin library, it is not compatible with specific plugins or specific
 * features. This section will highlight the main plugins/features that will
 * not be compatible with this plugin or put focus on how the make certain
 * features compatible.
 *
 * ---
 * 
 * VisuMZ_1_BattleCore
 * 
 * When using Action Sequences, Boost effects for damage, turn extensions,
 * analyze, etc. will not occur for anything other than the Action Sequence:
 * "MECH: Action Effect" in order to maintain controlled effects. However, if
 * you do want to apply bonuses for Boosts, utilize "MECH: Boost Store Data" to
 * store inside a variable how many times Boosts were used. This can be used
 * however which way you want it to as long as it is manageable through events
 * and Common Events.
 * 
 * ---
 *
 * ============================================================================
 * Notetags
 * ============================================================================
 *
 * The following are notetags that have been added through this plugin. These
 * notetags will not work with your game if this plugin is OFF or not present.
 * 
 * === HP Gauge-Related Notetags ===
 * 
 * The following notetags allow you to set whether or not HP Gauges can be
 * displayed by enemies regardless of Plugin Parameter settings.
 * 
 * ---
 *
 * <Show HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always show the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * - This does not bypass disabling enemy HP Gauges as a whole.
 * 
 * ---
 *
 * <Hide HP Gauge>
 *
 * - Used for: Enemy Notetags
 * - Will always hide the HP Gauge for the enemy regardless of the defeat
 *   requirement setting.
 * - This does not bypass the player's Options preferences.
 * 
 * ---
 * 
 * <Battle UI Offset: +x, +y>
 * <Battle UI Offset: -x, -y>
 * 
 * <Battle UI Offset X: +x>
 * <Battle UI Offset X: -x>
 * 
 * <Battle UI Offset Y: +y>
 * <Battle UI Offset Y: -y>
 * 
 * - Used for: Actor and Enemy Notetags
 * - Adjusts the offset of HP Gauges and State Icons above the heads of actors
 *   and enemies.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 *
 * === Animation-Related Notetags ===
 *
 * The following notetags allow you to set animations to play at certain
 * instances and/or conditions.
 *
 * ---
 *
 * <Slip Animation: x>
 *
 * - Requires VisuMZ_0_CoreEngine!
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - During the phase at which the user regenerates HP, MP, or TP, this
 *   animation will play as long as the user is alive and visible.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Cast Animation: x>
 *
 * - Used for: Skill Notetags
 * - Plays a battle animation at the start of the skill.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * <Attack Animation: x>
 *
 * - Used for: Enemy Notetags
 * - Gives an enemy an attack animation to play for its basic attack.
 * - Replace 'x' with a number value representing the Animation ID to play.
 *
 * ---
 *
 * === Battleback-Related Notetags ===
 *
 * You can apply these notetags to have some control over the battlebacks that
 * appear in different regions of the map for random or touch encounters.
 *
 * ---
 *
 * <Region x Battleback1: filename>
 * <Region x Battleback2: filename>
 * 
 * - Used for: Map Notetags
 * - If the player starts a battle while standing on 'x' region, then the
 *   'filename' battleback will be used.
 * - Replace 'x' with a number representing the region ID you wish to use.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Castle1.png' will be only inserted
 *   as 'Castle1' without the '.png' at the end.
 * - *NOTE: This will override any specified battleback settings.
 *
 * ---
 *
 * === Battle Command-Related Notetags ===
 *
 * You can use notetags to change how the battle commands of playable
 * characters appear in battle as well as whether or not they can be used.
 *
 * ---
 *
 * <Seal Attack>
 * <Seal Guard>
 * <Seal Item>
 *
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Prevents specific battle commands from being able to be used.
 *
 * ---
 *
 * <Battle Commands>
 *  Attack
 *  Skills
 *  SType: x
 *  SType: name
 *  All Skills
 *  Skill: x
 *  Skill: name
 *  Guard
 *  Item
 *  Party
 *  Escape
 *  Auto Battle
 *  Combat Log
 *  Talk
 *  Weapon Swap
 * </Battle Commands>
 *
 * - Used for: Class Notetags
 * - Changes which commands appear in the Actor Command Window in battle.
 *   If this notetag is not used, then the default commands determined in
 *   Plugin Parameters => Actor Command Window => Command List will be used.
 * - Add/remove/modify entries as needed.
 *
 * - Attack 
 *   - Adds the basic attack command.
 * 
 * - Skills
 *   - Displays all the skill types available to the actor.
 * 
 * - SType: x
 * - Stype: name
 *   - Adds in a specific skill type.
 *   - Replace 'x' with the ID of the skill type.
 *   - Replace 'name' with the name of the skill type (without text codes).
 *
 * - All Skills
 *   - Adds all usable battle skills as individual actions.
 * 
 * - Skill: x
 * - Skill: name
 *   - Adds in a specific skill as a usable action.
 *   - Replace 'x' with the ID of the skill.
 *   - Replace 'name' with the name of the skill.
 * 
 * - Guard
 *   - Adds the basic guard command.
 * 
 * - Item
 *   - Adds the basic item command.
 *
 * - Party
 *   - Requires VisuMZ_2_PartySystem.
 *   - Allows this actor to switch out with a different party member.
 * 
 * - Escape
 *   - Adds the escape command.
 * 
 * - Auto Battle
 *   - Adds the auto battle command.
 * 
 * - Combat Log
 *   - Requires VisuMZ_4_CombatLog.
 *   - Opens up the combat log.
 * 
 * - Talk
 *   - Requires VisuMZ_3_BattleCmdTalk!
 *   - Shows talk command if applicable.
 * 
 * - Weapon Swap
 *   - Requires VisuMZ_2_WeaponSwapSystem.
 *   - Swaps the current weapon.
 *
 * Example:
 *
 * <Battle Commands>
 *  Attack
 *  Skill: Heal
 *  Skills
 *  Guard
 *  Item
 *  Escape
 * </Battle Commands>
 *
 * ---
 *
 * <Command Text: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill name text that appears to something else.
 * - Replace 'x' with the skill's name you want to shown in the Actor Battle
 *   Command window.
 * - Recommended Usage: Shorten skill names that are otherwise too big to fit
 *   inside of the Actor Battle Command window.
 *
 * ---
 *
 * <Command Icon: x>
 *
 * - Used for: Skill Notetags
 * - When a skill is used in a <Battle Commands> notetag set, you can change
 *   the skill icon that appears to something else.
 * - Replace 'x' with the ID of icon you want shown in the Actor Battle Command
 *   window to represent the skill.
 * 
 * ---
 * 
 * <Command Require Learn>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   learned the skill.
 * - Learning the skill is a requirement. Acquiring the skill through traits
 *   does not count as learning the skill.
 * 
 * ---
 * 
 * <Command Require Access>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not by whether the actor has
 *   access to the skill.
 * - Having access to the skill can come through either learning the skill or
 *   temporarily acquiring it through trait objects.
 * 
 * ---
 * 
 * <Command Show Switch: x>
 * 
 * <Command Show All Switches: x,x,x>
 * <Command Show Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be hidden until all
 *   switches are ON. Then, it would be shown.
 * - If 'Any' notetag variant is used, item will be shown if any of the
 *   switches are ON. Otherwise, it would be hidden.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Command Hide Switch: x>
 * 
 * <Command Hide All Switches: x,x,x>
 * <Command Hide Any Switches: x,x,x>
 * 
 * - Used for: Skill Notetags
 * - Determines if a battle command is visible or not through switches.
 * - Replace 'x' with the switch ID to determine the skill's visibility.
 * - If 'All' notetag variant is used, item will be shown until all
 *   switches are ON. Then, it would be hidden.
 * - If 'Any' notetag variant is used, item will be hidden if any of the
 *   switches are ON. Otherwise, it would be shown.
 * - This can be applied to Attack and Guard commands, too.
 * 
 * ---
 * 
 * <Battle Portrait: filename>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" Battle Layout.
 * - Sets the battle portrait image for the actor to 'filename'.
 * - Replace 'filename' with a picture found within your game project's
 *   img/pictures/ folder. Filenames are case sensitive. Leave out the filename
 *   extension from the notetag.
 * - This will override any menu images used for battle only.
 * 
 * ---
 * 
 * <Battle Portrait Offset: +x, +y>
 * <Battle Portrait Offset: -x, -y>
 * 
 * <Battle Portrait Offset X: +x>
 * <Battle Portrait Offset X: -x>
 * 
 * <Battle Portrait Offset Y: +y>
 * <Battle Portrait Offset Y: -y>
 *
 * - Used for: Actor
 * - This is used with the "Portrait" and "Border" Battle Layouts.
 * - Offsets the X and Y coordinates for the battle portrait.
 * - Replace 'x' with a number value that offsets the x coordinate.
 * - Negative x values offset left. Positive x values offset right.
 * - Replace 'y' with a number value that offsets the y coordinate.
 * - Negative y values offset up. Positive x values offset down.
 * 
 * ---
 * 
 * === JavaScript Notetag: Battle Command-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine if skill-based battle commands are visible or hidden.
 * 
 * ---
 * 
 * <JS Command Visible>
 *  code
 *  code
 *  visible = code;
 * </JS Command Visible>
 * 
 * - Used for: Skill Notetags
 * - The 'visible' variable is the final returned variable to determine the
 *   skill's visibility in the Battle Command Window.
 * - Replace 'code' with JavaScript code to determine the skill's visibility in
 *   the Battle Command Window.
 * - The 'user' variable represents the user who will perform the skill.
 * - The 'skill' variable represents the skill to be used.
 * 
 * ---
 *
 * === Targeting-Related Notetags ===
 *
 * The following notetags are related to the targeting aspect of skills and
 * items and may adjust the scope of how certain skills/items work.
 *
 * ---
 *
 * <Always Hit>
 *
 * <Always Hit Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - Causes the action to always hit or to always have a hit rate of exactly
 *   the marked x%.
 * - Replace 'x' with a number value representing the hit success percentage.
 *
 * ---
 *
 * <Repeat Hits: x>
 *
 * - Used for: Skill, Item Notetags
 * - Changes the number of hits the action will produce.
 * - Replace 'x' with a number value representing the number of hits to incur.
 *
 * ---
 *
 * <Target: x Random Any>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets can be both actors and enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Enemies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only enemies.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: x Random Allies>
 *
 * - Used for: Skill, Item Notetags
 * - Makes the skill pick 'x' random targets when used.
 * - Targets are only actors.
 * - Replace 'x' with a number value representing the number of random targets.
 *
 * ---
 *
 * <Target: All Allies But User>
 *
 * - Used for: Skill, Item Notetags
 * - Targets all allies with the exception of the user.
 *
 * ---
 *
 * === JavaScript Notetag: Targeting-Related ===
 *
 * ---
 * 
 * <JS Targets>
 *  code
 *  code
 *  targets = [code];
 * </JS Targets>
 *
 * - Used for: Skill, Item Notetags
 * - The 'targets' variable is an array that is returned to be used as a
 *   container for all the valid action targets.
 * - The 'targets' variable will include the original set of targets determined
 *   by the skill/item's original scale.
 * - If you wish to clear it out, simply do 'targets = []' first.
 * - Replace 'code' with JavaScript code to determine valid targets.
 *
 * ---
 *
 * === Damage-Related Notetags ===
 *
 * ---
 *
 * <Damage Style: name>
 *
 * - Used for: Skill, Item Notetags
 * - Replace 'name' with a Damage Style name to change the way calculations are
 *   made using the damage formula input box.
 * - Names can be found in Plugin Parameters => Damage Settings => Style List
 *
 * ---
 *
 * <Armor Reduction: x>
 * <Armor Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Armor Penetration: x>
 * <Armor Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to physical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Magic Reduction: x>
 * <Magic Reduction: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   reduction properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor reduction properties
 *   when calculating one's own armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat reduction value.
 * - Use the 'x%' notetag variant to determine a percentile reduction value.
 *
 * ---
 *
 * <Magic Penetration: x>
 * <Magic Penetration: x%>
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, sets the current skill/item's armor
 *   penetration properties to 'x' and/or 'x%'.
 * - If used on trait objects, adds 'x' and/or 'x%' armor penetration
 *   properties when calculating a target's armor.
 * - This applies to magical attacks.
 * - Use the 'x' notetag variant to determine a flat penetration value.
 * - Use the 'x%' notetag variant to determine a percentile penetration value.
 *
 * ---
 *
 * <Bypass Damage Cap>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage capped.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage capped.
 *
 * ---
 *
 * <Damage Cap: x>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will declare the hard damage cap to
 *   be the 'x' value.
 * - If used on trait objects, this will raise the affect unit's hard damage
 *   cap to 'x' value. If another trait object has a higher value, use that
 *   value instead.
 *
 * ---
 *
 * <Bypass Soft Damage Cap>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will cause the action to never have
 *   its damage scaled downward to the soft cap.
 * - If used on trait objects, this will cause the affected unit to never have
 *   its damage scaled downward to the soft cap.
 *
 * ---
 *
 * <Soft Damage Cap: +x%>
 * <Soft Damage Cap: -x%>
 *
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - If used on skills and/or items, this will increase/decrease the action's
 *   soft cap by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 * - If used on trait objects, this will raise the affect unit's soft damage
 *   limit by x% where 'x' is a percentage value representing the increment
 *   changed by the hard cap value.
 *
 * ---
 *
 * <Unblockable>
 *
 * - Used for: Skill, Item Notetags
 * - Using "Guard" against this skill will not reduce any damage.
 *
 * ---
 *
 * === Critical-Related Notetags ===
 *
 * The following notetags affect skill and item critical hit rates and the
 * critical damage multiplier.
 *
 * ---
 *
 * <Always Critical>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always land a critical hit regardless of the
 *   user's CRI parameter value.
 *
 * ---
 *
 * <Set Critical Rate: x%>
 *
 * - Used for: Skill, Item Notetags
 * - This skill/item will always have a x% change to land a critical hit
 *   regardless of user's CRI parameter value.
 * - Replace 'x' with a percerntage value representing the success rate.
 *
 * ---
 *
 * <Modify Critical Rate: x%>
 * <Modify Critical Rate: +x%>
 * <Modify Critical Rate: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - Modifies the user's CRI parameter calculation for this skill/item.
 * - The 'x%' notetag variant will multiply the user's CRI parameter value
 *   for this skill/item.
 * - The '+x%' and '-x%' notetag variants will incremenetally increase/decrease
 *   the user's CRI parameter value for this skill/item.
 *
 * ---
 *
 * <Modify Critical Multiplier: x%>
 * <Modify Critical Multiplier: +x%>
 * <Modify Critical Multiplier: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the damage multiplier when a critical hit lands.
 * - The 'x%' notetag variant multiply the multiplier to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the multiplier with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * <Modify Critical Bonus Damage: x%>
 * <Modify Critical Bonus Damage: +x%>
 * <Modify Critical Bonus Damage: -x%>
 *
 * - Used for: Skill, Item Notetags
 * - These notetags determine the bonus damage added when a critical hit lands.
 * - The 'x%' notetag variant multiply the damage to that exact percentage.
 * - The '+x%' and '-x%' notetag variants will change the bonus damage with an
 *   incremenetal rate for this skill/item.
 *
 * ---
 *
 * === JavaScript Notetags: Critical-Related ===
 *
 * The following are notetags made for users with JavaScript knowledge to
 * determine how critical hit-related aspects are calculated.
 *
 * ---
 *
 * <JS Critical Rate>
 *  code
 *  code
 *  rate = code;
 * </JS Critical Rate>
 *
 * - Used for: Skill, Item Notetags
 * - The 'rate' variable is the final returned amount to determine the
 *   critical hit success rate.
 * - Replace 'code' with JavaScript code to determine the final 'rate' to be
 *   returned as the critical hit success rate.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Critical Damage>
 *  code
 *  code
 *  multiplier = code;
 *  bonusDamage = code;
 * </JS Critical Damage>
 *
 * - Used for: Skill, Item Notetags
 * - The 'multiplier' variable is returned later and used as the damage
 *   multiplier used to amplify the critical damage amount.
 * - The 'bonusDamage' variable is returned later and used as extra added
 *   damage for the critical damage amount.
 * - Replace 'code' with JavaScript code to determine how the 'multiplier' and
 *   'bonusDamage' variables are calculated.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * === Action Sequence-Related Notetags ===
 *
 * Action Sequences allow you full control over how a skill and/or item plays
 * through its course. These notetags give you control over various aspects of
 * those Action Sequences. More information is found in the Action Sequences
 * help section.
 *
 * ---
 *
 * <Custom Action Sequence>
 *
 * - Used for: Skill, Item Notetags
 * - Removes all automated Action Sequence parts from the skill.
 * - Everything Action Sequence-related will be done by Common Events.
 * - Insert Common Event(s) into the skill/item's effects list to make use of
 *   the Custom Action Sequences.
 * - This will prevent common events from loading in the Item Scene and Skill
 *   Scene when used outside of battle.
 *
 * ---
 * 
 * <Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - If the Action Sequence Plugin Parameter "Auto Notetag" is enabled, this
 *   plugin will prevent custom action sequences from happening for the skill
 *   or item, and instead, use an Automatic Action Sequence instead.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Bypass Auto Action Sequence>
 * 
 * - Used for: Skill, Item Notetags
 * - This notetag is used for the game devs that have the Action Sequence
 *   Plugin Parameter "Auto Notetag" on for applying <Custom Action Sequence>
 *   to everything.
 * - This will allow items and skills to be able to launch their common
 *   events from the menu scene regardless of the inherent restriction to
 *   prevent action sequence based skills/items with common events from
 *   launching.
 * - Ignore this if you have "Auto Notetag" disabled or set to false. By
 *   default, this setting is set to false. Please be aware of the changes
 *   you've made to your game before using it.
 * 
 * ---
 * 
 * <Common Event: name>
 *
 * - Used for: Skill, Item Notetags
 * - Battle only: calls forth a Common Event of a matching name.
 * - Replace 'name' with the name of a Common Event to call from when this
 *   skill/item is used in battle.
 *   - Remove any \I[x] in the name.
 * - Insert multiple notetags to call multiple Common Events in succession.
 * - This will occur after any Common Event Trait Effects for the skill/item's
 *   database entry.
 * - This is primarily used for users who are reorganizing around their Common
 *   Events and would still like to have their skills/items perform the correct
 *   Action Sequences in case the ID's are different.
 * 
 * ---
 *
 * <Display Icon: x>
 * <Display Text: string>
 *
 * - Used for: Skill, Item Notetags
 * - When displaying the skill/item name in the Action Sequence, determine the
 *   icon and/or text displayed.
 * - Replace 'x' with a number value representing the icon ID to be displayed.
 * - Replace 'string' with a text value representing the displayed name.
 *
 * ---
 * 
 * <Common Event Key: name>
 * <Common Event Keys: name, name, name>
 * 
 * <Common Event Keys>
 *  key
 *  key
 *  key
 * </Common Event Keys>
 * 
 * - Used for: Skill, Item Notetags
 * - Will generate Common Events for the skill/item with a corresponding key.
 * - Replace 'name' with the name of the Common Event's key that you want to
 *   reference. That key will be converted into a Common Event effect for the
 *   skill/item and be treated as an action sequence.
 *   - The notetag variants that use multiple keys will have the keys added in
 *     the order they are listed.
 *   - If keys do not reference any Common Events, no Common Events will be
 *     added for that key.
 * - To mark a Common Event with a key, insert inside a Common Event's name the
 *   [ and ] brackets around the text that will be used as the Common Event's
 *   key text.
 *   - For example, if Common Event's name is "Penta Slash [PENTA]", then the
 *     key used is "PENTA" without the quotes.
 *   - This key could then be referenced by <Common Event Key: PENTA> notetag.
 *   - Do not use commas (,) inside the key text as it will be automatically
 *     removed for the sake of consistency.
 * - This feature is made for make the process of sharing Action Sequences to
 *   become easier without needing to line up Common Event ID's.
 * 
 * ---
 *
 * === Animated Sideview Battler-Related Notetags ===
 *
 * Enemies can use Animated Sideview Actor graphics thanks to this plugin.
 * These notetags give you control over that aspect. Some of these also affect
 * actors in addition to enemies.
 *
 * ---
 *
 * <Sideview Battler: filename>
 *
 * <Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Replaces the enemy's battler graphic with an animated Sideview Actor
 *   graphic found in the img/sv_actors/ folder.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Sideview Battlers>
 *
 * ---
 *
 * <Sideview Anchor: x, y>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets the sprite anchor positions for the sideview sprite.
 * - Replace 'x' and 'y' with numbers depicting where the anchors should be for
 *   the sideview sprite.
 * - By default, the x and y anchors are 0.5 and 1.0.
 *
 * ---
 * 
 * <Sideview Home Offset: +x, +y>
 * <Sideview Home Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, State Notetags
 * - Offsets the sideview actor sprite's home position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * - This notetag will not work if you remove it from the JavaScript code in
 *   Plugin Parameters > Actor > JS:  Home Position
 * 
 * ---
 * 
 * <Sideview Weapon Offset: +x, +y>
 * <Sideview Weapon Offset: -x, -y>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy State Notetags
 * - Offsets the sideview weapon sprite's position by +/-x, +/-y.
 * - Replace 'x' and 'y' with numbers depicting how much to offset each of the
 *   coordinates by. For '0' values, use +0 or -0.
 * 
 * ---
 *
 * <Sideview Show Shadow>
 * <Sideview Hide Shadow>
 *
 * - Used for: Actor, Enemy Notetags
 * - Sets it so the sideview battler's shadow will be visible or hidden.
 *
 * ---
 * 
 * <Sideview Shadow Scale: x%>
 * <Sideview Shadow Scale: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - This affects both the X and Y scale.
 * 
 * ---
 * 
 * <Sideview Shadow Scale X: x%>
 * <Sideview Shadow Scale X: x.y>
 * 
 * <Sideview Shadow Scale Y: x%>
 * <Sideview Shadow Scale Y: x.y>
 * 
 * - Used for: Actor, Enemy Notetags
 * - Adjusts the scaling size of the sideview battler's shadow.
 * - These affect their respective X and Y scales separately.
 * 
 * ---
 *
 * <Sideview Collapse>
 * <Sideview No Collapse>
 *
 * - Used for: Enemy Notetags
 * - Either shows the collapse graphic or does not show the collapse graphic.
 * - Collapse graphic means the enemy will 'fade away' once it's defeated.
 * - No collapse graphic means the enemy's corpse will remain on the screen.
 *
 * ---
 *
 * <Sideview Idle Motion: name>
 *
 * <Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Changes the default idle motion for the enemy.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Idle Motions>
 *  walk: 25
 *  wait: 50
 *  guard
 *  victory
 *  abnormal
 * </Sideview Idle Motions>
 *
 * ---
 *
 * <Sideview Size: width, height>
 *
 * - Used for: Enemy Notetags
 * - When using a sideview battler, its width and height will default to the
 *   setting made in Plugin Parameters => Enemy Settings => Size: Width/Height.
 * - This notetag lets you change that value to something else.
 * - Replace 'width' and 'height' with numbers representing how many pixels
 *   wide/tall the sprite will be treated as.
 * - This does NOT change the image size. This only changes the HITBOX size.
 *
 * ---
 *
 * <Sideview Weapon: weapontype>
 *
 * <Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Give your sideview enemies weapons to use.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Sideview Weapons>
 *
 * ---
 *
 * <traitname Sideview Battler: filename>
 *
 * <traitname Sideview Battlers>
 *  filename: weight
 *  filename: weight
 *  filename: weight
 * </traitname Sideview Battlers>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have a unique appearance.
 * - Replace 'filename' with the filename of the graphic to use. Do not insert
 *   any extensions. This means the file 'Actor1_1.png' will be only inserted
 *   as 'Actor1_1' without the '.png' at the end.
 * - If the multiple notetag vaiant is used, then a random filename is selected
 *   from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'filename'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'filename' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Battlers>
 *  Actor1_1: 25
 *  Actor1_3: 10
 *  Actor1_5
 *  Actor1_7
 * </Male Sideview Battlers>
 *
 * <Female Sideview Battlers>
 *  Actor1_2: 25
 *  Actor1_4: 10
 *  Actor1_6
 *  Actor1_8
 * </Female Sideview Battlers>
 *
 * ---
 *
 * <traitname Sideview Idle Motion: name>
 *
 * <traitname Sideview Idle Motions>
 *  name: weight
 *  name: weight
 *  name: weight
 * </traitname Sideview Idle Motions>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique idle motions.
 * - Replace 'name' with any of the following motion names:
 *   - 'walk', 'wait', 'chant', 'guard', 'damage', 'evade', 'thrust', 'swing',
 *     'missile', 'skill', 'spell', 'item', 'escape', 'victory', 'dying',
 *     'abnormal', 'sleep', 'dead'
 * - If the multiple notetag vaiant is used, then a random motion name is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Jolly Sideview Idle Motions>
 *  wait: 25
 *  victory: 10
 *  walk
 * </Jolly Sideview Idle Motions>
 *
 * <Serious Sideview Idle Motions>
 *  walk: 25
 *  guard: 10
 *  wait
 * </Jolly Sideview Idle Motions>
 *
 * ---
 *
 * <traitname Sideview Weapon: weapontype>
 *
 * <traitname Sideview Weapons>
 *  weapontype: weight
 *  weapontype: weight
 *  weapontype: weight
 * </traitname Sideview Weapons>
 *
 * - Used for: Enemy Notetags
 * - Requires VisuMZ_1_ElementStatusCore
 * - Allows certain Trait Sets to cause battlers to have unique weapons.
 * - Replace 'weapontype' with the name of the weapon type found under the
 *   Database => Types => Weapon Types list (without text codes).
 * - If the multiple notetag vaiant is used, then a random weapon type is
 *   selected from the list upon the enemy's creation.
 * - Replace 'weight' with a number value representing how often the weapontype
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'weapontype' instead.
 * - Add/remove lines as you see fit.
 *
 * Examples:
 *
 * <Male Sideview Weapons>
 *  Dagger: 25
 *  Sword: 25
 *  Axe
 * </Male Sideview Weapons>
 *
 * <Female Sideview Weapons>
 *  Dagger: 25
 *  Spear: 25
 *  Cane
 * </Female Sideview Weapons>
 *
 * ---
 *
 * === Enemy-Related Notetags ===
 *
 * ---
 *
 * <Battler Sprite Cannot Move>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to move, jump, and/or float due to
 *   Action Sequences. Useful for rooted enemies.
 *
 * ---
 * 
 * <Battler Sprite Grounded>
 *
 * - Used for: Enemy Notetags
 * - Prevents the enemy from being able to jumping and/or floating due to
 *   Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * ---
 *
 * <Swap Enemies>
 *  name: weight
 *  name: weight
 *  name: weight
 * </Swap Enemies>
 *
 * - Used for: Enemy Notetags
 * - Causes this enemy database object to function as a randomizer for any of
 *   the listed enemies inside the notetag. When the enemy is loaded into the
 *   battle scene, the enemy is immediately replaced with one of the enemies
 *   listed. The randomization is based off the 'weight' given to each of the
 *   enemy 'names'.
 * - Replace 'name' with the database enemy of the enemy you wish to replace
 *   the enemy with.
 * - Replace 'weight' with a number value representing how often the 'name'
 *   would come up. The higher the weight, the more often. You may omit this
 *   and the colon(:) and just type in the 'name' instead.
 * - Add/remove lines as you see fit.
 *
 * Example:
 *
 * <Swap Enemies>
 *  Bat: 50
 *  Slime: 25
 *  Orc
 *  Minotaur
 * </Swap Enemies>
 *
 * ---
 *
 * === JavaScript Notetags: Mechanics-Related ===
 *
 * These JavaScript notetags allow you to run code at specific instances during
 * battle provided that the unit has that code associated with them in a trait
 * object (actor, class, weapon, armor, enemy, or state). How you use these is
 * entirely up to you and will depend on your ability to understand the code
 * used and driven for each case.
 *
 * ---
 *
 * <JS Pre-Start Battle>
 *  code
 *  code
 *  code
 * </JS Pre-Start Battle>
 *
 * <JS Post-Start Battle>
 *  code
 *  code
 *  code
 * </JS Post-Start Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of battle aimed at the function:
 *   BattleManager.startBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Turn>
 *  code
 *  code
 *  code
 * </JS Pre-Start Turn>
 *
 * <JS Post-Start Turn>
 *  code
 *  code
 *  code
 * </JS Post-Start Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of a turn aimed at the function:
 *   BattleManager.startTurn()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Start Action>
 *  code
 *  code
 *  code
 * </JS Pre-Start Action>
 *
 * <JS Post-Start Action>
 *  code
 *  code
 *  code
 * </JS Post-Start Action>
 * 
 * - Used for: Actor, Class, Skill, Item, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action aimed at the function:
 *   BattleManager.startAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Apply>
 *  code
 *  code
 *  code
 * </JS Pre-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Apply as User>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as User>
 *
 * <JS Pre-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the start of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage>
 *  code
 *  code
 *  code
 * </JS Pre-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Pre-Damage as User>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as User>
 *
 * <JS Pre-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Pre-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code before damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Pre' runs before the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage>
 *  code
 *  code
 *  code
 * </JS Post-Damage>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Damage as User>
 *  code
 *  code
 *  code
 * </JS Post-Damage as User>
 *
 * <JS Post-Damage as Target>
 *  code
 *  code
 *  code
 * </JS Post-Damage as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code after damage is dealt aimed at the function:
 *   Game_Action.prototype.executeDamage()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply>
 *  code
 *  code
 *  code
 * </JS Post-Apply>
 * 
 * - Used for: Skill, Item Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on skills and/or items, this will only apply to the skill/item
 *   being used and does not affect other skills and items.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one using the skill/item.
 * - The 'target' variable represents the one receiving the skill/item hit.
 *
 * ---
 *
 * <JS Post-Apply as User>
 *  code
 *  code
 *  code
 * </JS Post-Apply as User>
 *
 * <JS Post-Apply as Target>
 *  code
 *  code
 *  code
 * </JS Post-Apply as Target>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action hit aimed at the function:
 *   Game_Action.prototype.apply()
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - If the 'as User' notetag variant is used, this code will be run as a
 *   response to the action from the action user end.
 * - If the 'as Target' notetag variant is used, this code will be run as a
 *   response to the action from the action target end.
 * - Replace 'code' with JavaScript code to run desired effects.
 *
 * ---
 *
 * <JS Pre-End Action>
 *  code
 *  code
 *  code
 * </JS Pre-End Action>
 *
 * <JS Post-End Action>
 *  code
 *  code
 *  code
 * </JS Post-End Action>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of an action aimed at the function:
 *   BattleManager.endAction()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - If used on trait objects, this will apply to any skills/items used as long
 *   as the unit affected by the trait object has access to the trait object.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Turn>
 *  code
 *  code
 *  code
 * </JS Pre-End Turn>
 *
 * <JS Post-End Turn>
 *  code
 *  code
 *  code
 * </JS Post-End Turn>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code at the end of a turn aimed at the function:
 *   Game_Battler.prototype.onTurnEnd()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-Regenerate>
 *  code
 *  code
 *  code
 * </JS Pre-Regenerate>
 *
 * <JS Post-Regenerate>
 *  code
 *  code
 *  code
 * </JS Post-Regenerate>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a unit regenerates HP/MP aimed at the function:
 *   Game_Battler.prototype.regenerateAll()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Victory>
 *  code
 *  code
 *  code
 * </JS Battle Victory>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is won aimed at the function:
 *   BattleManager.processVictory()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Success>
 *  code
 *  code
 *  code
 * </JS Escape Success>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping succeeds aimed at the function:
 *   BattleManager.onEscapeSuccess()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Escape Failure>
 *  code
 *  code
 *  code
 * </JS Escape Failure>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when escaping fails aimed at the function:
 *   BattleManager.onEscapeFailure()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Battle Defeat>
 *  code
 *  code
 *  code
 * </JS Battle Defeat>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when a battle is lost aimed at the function:
 *   BattleManager.processDefeat()
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 *
 * <JS Pre-End Battle>
 *  code
 *  code
 *  code
 * </JS Pre-End Battle>
 *
 * <JS Post-End Battle>
 *  code
 *  code
 *  code
 * </JS Post-End Battle>
 * 
 * - Used for: Actor, Class, Weapon, Armor, Enemy, State Notetags
 * - Runs JavaScript code when the battle is over aimed at the function:
 *   BattleManager.endBattle()
 *   - 'Pre' runs before the function runs.
 *   - 'Post' runs after the function runs.
 * - Replace 'code' with JavaScript code to run desired effects.
 * - The 'user' variable represents the one affected by the trait object.
 *
 * ---
 * 
 * === Battle Layout-Related Notetags ===
 * 
 * These tags will change the battle layout for a troop regardless of how the
 * plugin parameters are set up normally. Insert these tags in either the
 * noteboxes of maps or the names of troops for them to take effect. If both
 * are present for a specific battle, then priority goes to the setting found
 * in the troop name.
 * 
 * ---
 * 
 * <Layout: type>
 * <Battle Layout: type>
 * 
 * - Used for: Map Notetags, Troop Name Tags, and Troop Comment Tags
 * - Changes the battle layout style used for this specific map or battle.
 * - Replace 'type' with 'default', 'list', 'xp', 'portrait', or 'border'.
 * - If using Troop Comment Tags, then as long as the tag appears in a comment
 *   found on any of the Troop's pages (even if they don't run), the tag will
 *   be considered in effect.
 * 
 * ---
 * 
 * === Troop Comment Tags ===
 * 
 * Place these tags inside of a comment found in a troop page's event list.
 * 
 * ---
 * 
 * <Once Parallel When Start Battle>
 * 
 * - Used for: Troop Page Comment Tags
 * - Causes the troop page to immediately load the moment the battle scene
 *   begins to fade in (not after it fades in). This is faster than a turn 0
 *   condition troop page. Troop page conditions are ignored.
 * - This can be used for things like the Action Sequence Camera plugin, the
 *   Visual Battle Environment plugin, and/or initial battle poses and such in
 *   order to provide a near seamless battle transition experience.
 * - This does NOT trigger when coming out of the options menu or party menu.
 * - This WILL trigger when going from battle to battle nonstop via plugins
 *   like VisuStella MZ's Chain Battles.
 * - When actors are moving towards their home positions, it will take around
 *   30 frames by default. Use this information however you like.
 * 
 * ---
 *
 * ============================================================================
 * Action Sequence - Plugin Commands
 * ============================================================================
 *
 * Skills and items, when used in battle, have a pre-determined series of
 * actions to display to the player as a means of representing what's going on
 * with the action. For some game devs, this may not be enough and they would
 * like to get more involved with the actions themselves.
 *
 * Action Sequences, added through this plugin, enable this. To give a skill or
 * item a Custom Action Sequence, a couple of steps must be followed:
 *
 * ---
 *
 * 1. Insert the <Custom Action Sequence> notetag into the skill or item's
 *    notebox (or else this would not work as intended).
 * 2. Give that skill/item a Common Event through the Effects box. The selected
 *    Common Event will contain all the Action Sequence data.
 * 3. Create the Common Event with Action Sequence Plugin Commands and/or event
 *    commands to make the skill/item do what you want it to do.
 *
 * ---
 *
 * The Plugin Commands added through the Battle Core plugin focus entirely on
 * Action Sequences. However, despite the fact that they're made for skills and
 * items, some of these Action Sequence Plugin Commands can still be used for
 * regular Troop events and Common Events.
 *
 * ---
 *
 * === Action Sequence - Action Sets ===
 *
 * Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * ---
 *
 * ACSET: Setup Action Set
 * - The generic start to most actions.
 *
 *   Display Action:
 *   Immortal: On:
 *   Battle Step:
 *   Wait For Movement:
 *   Cast Animation:
 *   Wait For Animation:
 *   - Use this part of the action sequence?
 *
 * ---
 *
 * ACSET: All Targets Action Set
 * - Affects all targets simultaneously performing the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 * 
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait For Animation:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Each Target Action Set
 * - Goes through each target one by one to perform the following.
 *
 *   Dual/Multi Wield?
 *   - Add times struck based on weapon quantity equipped?
 *
 *   Perform Action:
 *   Wait Count:
 *   Action Animation:
 *   Wait Count:
 *   Action Effect:
 *   Immortal: Off:
 *   - Use this part of the action sequence?
 *   - Insert values for the Wait Count(s).
 *
 * ---
 *
 * ACSET: Finish Action
 * - The generic ending to most actions.
 *
 *   Wait For New Line:
 *   Wait For Effects:
 *   Clear Battle Log:
 *   Home Reset:
 *   Wait For Movement:
 *   - Use this part of the action sequence?
 *
 * ---
 * 
 * === Action Sequences - Angle ===
 * 
 * These action sequences allow you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * ANGLE: Change Angle
 * - Changes the camera angle.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Angle:
 *   - Change the camera angle to this many degrees.
 *
 *   Duration:
 *   - Duration in frames to change camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Reset Angle
 * - Reset any angle settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera angle.
 *
 *   Angle Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Angle?:
 *   - Wait for angle changes to complete before performing next command?
 *
 * ---
 *
 * ANGLE: Wait For Angle
 * - Waits for angle changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Animations ===
 *
 * These Action Sequences are related to the 'Animations' that can be found in
 * the Animations tab of the Database.
 *
 * ---
 *
 * ANIM: Action Animation
 * - Plays the animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation
 * - Plays the animation associated with the user's weapon.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Attack Animation 2+
 * - Plays the animation associated with the user's other weapons.
 * - Plays nothing if there is no other weapon equipped.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 * 
 *   Slot:
 *   - Which weapon slot to get this data from?
 *   - Main-hand weapon is weapon slot 1.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Cast Animation
 * - Plays the cast animation associated with the action.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Change Battle Portrait
 * - Changes the battle portrait of the actor (if it's an actor).
 * - Can be used outside of battle/action sequences.
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *   - Valid units can only be actors.
 *
 *   Filename:
 *   - Select the file to change the actor's portrait to.
 * 
 * ---
 *
 * ANIM: Play at Coordinate
 * - Plays an animation on the screen at a specific x, y coordinate.
 * - Requires VisuMZ_0_CoreEngine!
 * 
 *   Animation ID:
 *   - Plays this animation.
 * 
 *   Coordinates:
 * 
 *     X:
 *     Y:
 *     - X/Y coordinate used for the animation.
 *       You may use JavaScript code.
 * 
 *   Mirror Animation?:
 *   - Mirror the animation?
 * 
 *   Mute Animation?:
 *   - Mute the animation?
 * 
 *   Wait for Completion?:
 *   - Wait the animation to finish before continuing?
 *
 * ---
 *
 * ANIM: Show Animation
 * - Plays the a specific animation on unit(s).
 *
 *   Targets:
 *   - Select unit(s) to play the animation on.
 *
 *   Animation ID:
 *   - Select which animation to play on unit(s).
 *
 *   Mirror Animation:
 *   - Mirror the animation?
 *
 *   Wait For Animation?:
 *   - Wait for animation to complete before performing next command?
 *
 * ---
 *
 * ANIM: Wait For Animation
 * - Causes the interpreter to wait for any animation(s) to finish.
 *
 * ---
 *
 * === Action Sequences - Battle Log ===
 *
 * These Action Sequences are related to the Battle Log Window, the window
 * found at the top of the battle screen.
 *
 * ---
 *
 * BTLOG: Add Text
 * - Adds a new line of text into the Battle Log.
 *
 *   Text:
 *   - Add this text into the Battle Log.
 *   - Text codes allowed.
 * 
 *   Copy to Combat Log?:
 *   - Copies text to the Combat Log.
 *   - Requires VisuMZ_4_CombatLog
 * 
 *     Combat Log Icon:
 *     - What icon would you like to bind to this entry?
 *     - Requires VisuMZ_4_CombatLog
 *
 * ---
 *
 * BTLOG: Clear Battle Log
 * - Clears all the text in the Battle Log.
 *
 * ---
 *
 * BTLOG: Display Action
 * - plays the current action in the Battle Log.
 *
 * ---
 *
 * BTLOG: Pop Base Line
 * - Removes the Battle Log's last added base line and  all text up to its
 *   former location.
 *
 * ---
 *
 * BTLOG: Push Base Line
 * - Adds a new base line to where the Battle Log currently is at.
 *
 * ---
 *
 * BTLOG: Refresh Battle Log
 * - Refreshes the Battle Log.
 *
 * ---
 *
 * BTLOG: UI Show/Hide
 * - Shows or hides the Battle UI (including the Battle Log).
 *
 *   Show/Hide?:
 *   - Shows/hides the Battle UI.
 *
 * ---
 *
 * BTLOG: Wait For Battle Log
 * - Causes the interpreter to wait for the Battle Log to finish.
 *
 * ---
 *
 * BTLOG: Wait For New Line
 * - Causes the interpreter to wait for a new line in the Battle Log.
 *
 * ---
 *
 * === Action Sequences - Camera ===
 *
 * These Action Sequences are battle camera-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * CAMERA: Clamp ON/OFF
 * - Turns battle camera clamping on/off.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Setting:
 *   - Turns camera clamping on/off.
 *
 * ---
 *
 * CAMERA: Focus Point
 * - Focus the battle camera on a certain point in the screen.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   X Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Y Coordinate:
 *   - Insert the point to focus the camera on.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Focus Target(s)
 * - Focus the battle camera on certain battler target(s).
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Targets:
 *   - Select unit(s) to focus the battle camera on.
 *
 *   Duration:
 *   - Duration in frames for camera focus change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Offset
 * - Offset the battle camera from the focus target.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Offset X:
 *   - How much to offset the camera X by.
 *   - Negative: left. Positive: right.
 *
 *   Offset Y:
 *   - How much to offset the camera Y by.
 *   - Negative: up. Positive: down.
 *
 *   Duration:
 *   - Duration in frames for offset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Reset
 * - Reset the battle camera settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Reset Focus?:
 *   - Reset the focus point?
 *
 *   Reset Offset?:
 *   - Reset the camera offset?
 *
 *   Duration:
 *   - Duration in frames for reset change.
 *
 *   Camera Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Camera?
 *   - Wait for camera changes to complete before performing next command?
 *
 * ---
 *
 * CAMERA: Wait For Camera
 * - Waits for camera changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Dragonbones ===
 *
 * These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * ---
 *
 * DB: Dragonbones Animation
 * - Causes the unit(s) to play a Dragonbones motion animation.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Motion Animation:
 *   - What is the name of the Dragonbones motion animation you wish to play?
 *
 * ---
 *
 * DB: Dragonbones Time Scale
 * - Causes the unit(s) to change their Dragonbones time scale.
 * - Requires VisuMZ_2_DragonbonesUnion!
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion animation.
 *
 *   Time Scale:
 *   - Change the value of the Dragonbones time scale to this.
 *
 * ---
 *
 * === Action Sequences - Elements ===
 *
 * These Action Sequences can change up the element(s) used for the action's
 * damage calculation midway through an action.
 *
 * They also require the VisuMZ_1_ElementStatusCore plugin to be present in
 * order for them to work.
 *
 * ---
 *
 * ELE: Add Elements
 * - Adds element(s) to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to add onto the action.
 *   - Insert multiple element ID's to add multiple at once.
 *
 * ---
 *
 * ELE: Clear Element Changes
 * - Clears all element changes made through Action Sequences.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 *
 * ELE: Force Elements
 * - Forces only specific element(s) when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 *   Elements:
 *   - Select which element ID to force in the action.
 *   - Insert multiple element ID's to force multiple at once.
 *
 * ---
 *
 * ELE: Null Element
 * - Forces no element to be used when calculating damage.
 * - Requires VisuMZ_1_ElementStatusCore!
 *
 * ---
 * 
 * === Action Sequences - Horror Effects ===
 * 
 * These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 * 
 * ---
 *
 * HORROR: Clear All Filters
 * - Clear all Horror Effects filters on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove Horror Effects for.
 *
 * ---
 *
 * HORROR: Glitch Create
 * - Creates the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Glitch Slices:
 *   - Glitch slices to be used with the target.
 *
 *   Glitch Offset:
 *   - Default offset value.
 *
 *   Glitch Animated?:
 *   - Animate the glitch effect?
 *
 *   Glitch Frequency:
 *   - If animated, how frequent to make the glitch effect?
 *   - Lower = often     Higher = rarer
 *
 *   Glitch Strength:
 *   - If animated, how strong is the glitch effect?
 *   - Lower = weaker     Higher = stronger
 *
 * ---
 *
 * HORROR: Glitch Remove
 * - Removes the glitch effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: Noise Create
 * - Creates the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   Noise Rate:
 *   - Noise rate to be used with the target.
 *
 *   Noise Animated:
 *   - Animate the noise for the target?
 *
 * ---
 *
 * HORROR: Noise Remove
 * - Removes the noise effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 *
 * HORROR: TV Create
 * - Creates the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to create the Horror Effect for.
 *
 *   TV Line Thickness:
 *   - Default TV line thickness
 *   - Lower = thinner     Higher = thicker
 *
 *   TV Corner Size:
 *   - Default TV line corner size
 *   - Lower = smaller     Higher = bigger
 *
 *   TV Animated:
 *   - Animate the TV?
 *
 *   TV Speed:
 *   - Speed used to animate the TV if animated
 *   - Lower = slower     Higher = faster
 *
 * ---
 *
 * HORROR: TV Remove
 * - Removes the TV effect on the target battler(s).
 *
 *   Targets:
 *   - Select unit(s) to remove the Horror Effect for.
 *
 * ---
 * 
 * === Action Sequences - Impact ===
 * 
 * These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * ---
 *
 * IMPACT: Bizarro Inversion
 * - Swaps blue/red colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Bizarro?:
 *   - Enable Bizarro Inversion effect?
 *
 * ---
 *
 * IMPACT: Color Break
 * - Breaks the colors on the screen before reassembling.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Intensity:
 *   - What is the intensity of the color break effect?
 *
 *   Duration:
 *   - What is the duration of the color break effect?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Desaturation
 * - Desaturates all colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Desaturate?:
 *   - Enable Desaturation effect?
 *
 * ---
 *
 * IMPACT: Motion Blur Screen
 * - Creates a motion blur on the whole screen.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Blur Target(s)
 * - Creates a motion blur on selected target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion blur effects for.
 *
 *   Angle:
 *   - Determine what angle to make the motion blur at.
 *
 *   Intensity Rate:
 *   - This determines intensity rate of the motion blur.
 *   - Use a number between 0 and 1.
 *
 *   Duration:
 *   - How many frames should the motion blur last?
 *   - What do you want to be its duration?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Motion Trail Create
 * - Creates a motion trail effect for the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to create motion trail effects for.
 *
 *   Delay:
 *   - How many frames to delay by when creating a motion trail?
 *   - The higher the delay, the less motion trails there are.
 *
 *   Duration:
 *   - How many frames should the motion trail last?
 *   - What do you want to be its duration?
 *
 *   Hue:
 *   - What do you want to be the hue for the motion trail?
 *
 *   Starting Opacity:
 *   - What starting opacity value do you want for the motion trail?
 *   - Opacity values decrease over time.
 *
 *   Tone:
 *   - What tone do you want for the motion trail?
 *   - Format: [Red, Green, Blue, Gray]
 *
 * ---
 *
 * IMPACT: Motion Trail Remove
 * - Removes the motion trail effect from the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to clear motion trail effects for.
 *
 * ---
 *
 * IMPACT: Negative Inversion
 * - Inverts all the colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Negative?:
 *   - Enable Negative Inversion effect?
 *
 * ---
 *
 * IMPACT: Oversaturation
 * - Oversaturates colors on the battlefield.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Oversaturate?:
 *   - Enable Oversaturation effect?
 *
 * ---
 *
 * IMPACT: Shockwave at Point
 * - Creates a shockwave at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to create a shockwave at?
 *   - You can use JavaScript code.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Each Target(s)
 * - Creates a shockwave at each of the target(s) location(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Shockwave from Target(s) Center
 * - Creates a shockwave from the center of the target(s).
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a shockwave from.
 *
 *   Target Location:
 *   - Select which part target group to start a shockwave from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the shockwave X/Y point by.
 *
 *   Amplitude:
 *   - What is the aplitude of the shockwave effect?
 *
 *   Wavelength:
 *   - What is the wavelength of the shockwave effect?
 *
 *   Duration:
 *   - What is the duration of the shockwave?
 *
 * ---
 *
 * IMPACT: Time Scale
 * - Adjust time to go faster or slower!
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Scale:
 *   - Adjusts how fast/slow time goes.
 *   - 1.00 is normal. Lower is slower. Higher is faster.
 *
 * ---
 *
 * IMPACT: Time Stop
 * - Stops time for a set amount of milliseconds.
 * - Requires VisuMZ_3_ActSeqImpact!
 * - Created by Manu Gaming!
 *
 *   Milliseconds:
 *   - How many milliseconds should time stop for?
 *   - 1000 milliseconds = 1 second.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Point
 * - Creates a zoom blur at the designated coordinates.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Point: X:
 *   Point: Y:
 *   - What x/y coordinate do you want to focus the zoom at?
 *   - You can use JavaScript code.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * IMPACT: Zoom Blur at Target(s) Center
 * - Creates a zoom blur at the center of targets.
 * - Requires VisuMZ_3_ActSeqImpact!
 *
 *   Targets:
 *   - Select unit(s) to start a zoom blur from.
 *
 *   Target Location:
 *   - Select which part target group to start a zoom blur from.
 * 
 *     Offset X:
 *     Offset Y:
 *     - How much to offset the zoom blur X/Y point by.
 *
 *   Zoom Strength:
 *   - What is the strength of the zoom effect?
 *   - Use a number between 0 and 1.
 *
 *   Visible Radius:
 *   - How much of a radius should be visible from the center?
 *
 *   Duration:
 *   - What is the duration of the zoom blur?
 *
 *   Easing Type:
 *   - Select which easing type you wish to apply.
 *
 * ---
 *
 * === Action Sequences - Mechanics ===
 *
 * These Action Sequences are related to various mechanics related to the
 * battle system.
 *
 * ---
 *
 * MECH: Action Effect
 * - Causes the unit(s) to take damage/healing from action and incurs any
 *   changes made such as buffs and states.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 * ---
 *
 * MECH: Add Buff/Debuff
 * - Adds buff(s)/debuff(s) to unit(s). 
 * - Determine which parameters are affected and their durations.
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s) and/or debuff(s).
 *
 *   Buff Parameters:
 *   - Select which parameter(s) to buff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Debuff Parameters:
 *   - Select which parameter(s) to debuff.
 *   - Insert a parameter multiple times to raise its stacks.
 *
 *   Turns:
 *   - Number of turns to set the parameter(s) buffs to.
 *   - You may use JavaScript code.
 *
 * ---
 *
 * MECH: Add State
 * - Adds state(s) to unit(s).
 *
 *   Targets:
 *   - Select unit(s) to receive the buff(s).
 *
 *   States:
 *   - Select which state ID(s) to add to unit(s).
 *   - Insert multiple state ID's to add multiple at once.
 *
 * ---
 * 
 * MECH: Analyze Weakness
 * - Reveal elemental weakness(es) from target(s).
 * - Requires VisuMZ_3_WeaknessDisplay!
 * 
 *   Targets:
 *   - Select unit(s) to reveal elemental weaknesses for.
 * 
 *   Reveal:
 *   - How many elemental weaknesses do you wish to reveal?
 *   - You may use JavaScript code.
 * 
 * ---
 *
 * MECH: Armor Penetration
 * - Adds an extra layer of defensive penetration/reduction.
 * - You may use JavaScript code for any of these.
 *
 *   Armor/Magic Penetration:
 *
 *     Rate:
 *     - Penetrates an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Penetrates a flat amount of armor by this value.
 *
 *   Armor/Magic Reduction:
 *
 *     Rate:
 *     - Reduces an extra multiplier of armor by this value.
 *
 *     Flat:
 *     - Reduces a flat amount of armor by this value.
 *
 * ---
 * 
 * MECH: ATB Gauge
 * - Alters the ATB/TPB Gauges.
 * - Requires VisuMZ_2_BattleSystemATB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Charging:
 *   
 *     Charge Rate:
 *     - Changes made to the ATB Gauge if it is currently charging.
 * 
 *   Casting:
 *   
 *     Cast Rate:
 *     - Changes made to the ATB Gauge if it is currently casting.
 *   
 *     Interrupt?:
 *     - Interrupt the ATB Gauge if it is currently casting?
 * 
 * ---
 * 
 * MECH: Boost Points Change
 * - Changes Boost Points for target(s).
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Boost Points for.
 * 
 *   Alter Boost Points By:
 *   - Alters the unit(s) Boost Points.
 *   - Positive for gaining points. Negative for losing points.
 * 
 * ---
 * 
 * MECH: Boost Store Data
 * - Stores the number of Boosts used this action inside a variable.
 * - Requires VisuMZ_3_BoostAction!
 * 
 *   Variable ID:
 *   - Which variable do you want to store the data inside?
 * 
 * ---
 * 
 * MECH: Break Shield Change
 * - Changes Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to alter the Break Shields for.
 * 
 *   Alter Break Shields By:
 *   - Alters the unit(s) Break Shields.
 *   - Positive for gaining shields. Negative for losing shields.
 * 
 * ---
 * 
 * MECH: Break Shield Reset
 * - Resets Break Shields for target(s) if not Break Stunned.
 * - Requires VisuMZ_4_BreakShields!
 * 
 *   Targets:
 *   - Select unit(s) to reset the Break Shields for.
 * 
 * ---
 * 
 * MECH: BTB Brave Points
 * - Alters the target(s) Brave Points to an exact value.
 * - Requires VisuMZ_2_BattleSystemBTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the ATB/TPB Gauges for.
 * 
 *   Alter Brave Points By:
 *   - Alters the target(s) Brave Points.
 *   - Positive for gaining BP.
 *   - Negative for losing BP.
 * 
 * ---
 *
 * MECH: Collapse
 * - Causes the unit(s) to perform its collapse animation if the unit(s)
 *   has died.
 *
 *   Targets:
 *   - Select unit(s) to process a death collapse.
 *
 *   Force Death:
 *   - Force death even if the unit has not reached 0 HP?
 *   - This will remove immortality.
 *
 *   Wait For Effect?:
 *   - Wait for the collapse effect to complete before performing next command?
 *
 * ---
 * 
 * MECH: CTB Order
 * - Alters the CTB Turn Order.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Turn Order for.
 * 
 *   Change Order By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: CTB Speed
 * - Alters the CTB Speed.
 * - Requires VisuMZ_2_BattleSystemCTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the CTB Speed for.
 * 
 *   Charge Rate:
 *   - Changes made to the CTB Speed if it is currently charging.
 * 
 *   Cast Rate:
 *   - Changes made to the CTB Speed if it is currently casting.
 * 
 * ---
 * 
 * MECH: Custom Damage Formula
 * - Changes the current action's damage formula to custom.
 * - This will assume the MANUAL damage style.
 * 
 *   Formula:
 *   - Changes the current action's damage formula to custom.
 *   - Use 'default' to revert the damage formula.
 * 
 * ---
 *
 * MECH: Damage Popup
 * - Causes the unit(s) to display the current state of damage received
 *   or healed.
 *
 *   Targets:
 *   - Select unit(s) to prompt a damage popup.
 *
 * ---
 *
 * MECH: Dead Label Jump
 * - If the active battler is dead, jump to a specific label in the
 *   common event.
 *
 *   Jump To Label:
 *   - If the active battler is dead, jump to this specific label in the
 *     common event.
 *
 * ---
 *
 * MECH: Enemy Escape
 * - Causes the enemy unit(s) to escape.
 *
 *   Targets:
 *   - Select unit(s) to escape.
 *
 * ---
 *
 * MECH: ETB Energy Count
 * - Alters the subject team's available Energy Count.
 * - Requires VisuMZ_2_BattleSystemETB!
 *
 *   Energy Count:
 *   - Alters the subject team's available Energy Count.
 *   - Positive for gaining energy. Negative for losing energy.
 *
 * ---
 *
 * MECH: FTB Action Count
 * - Alters the subject team's available Action Count.
 * - Requires VisuMZ_2_BattleSystemFTB!
 *
 *   Action Count:
 *   - Alters the subject team's available Action Count.
 *   - Positive for gaining actions. Negative for losing actions.
 *
 * ---
 *
 * MECH: HP, MP, TP
 * - Alters the HP, MP, and TP values for unit(s).
 * - Positive values for healing. Negative values for damage.
 *
 *   Targets:
 *   - Select unit(s) to receive the current action's effects.
 *
 *   HP, MP, TP:
 *
 *     Rate:
 *     - Changes made to the parameter based on rate.
 *     - Positive values for healing. Negative values for damage.
 *
 *     Flat:
 *     - Flat changes made to the parameter.
 *     - Positive values for healing. Negative values for damage.
 *
 *   Damage Popup?:
 *   - Display a damage popup after?
 *
 * ---
 *
 * MECH: Immortal
 * - Changes the immortal flag of targets. If immortal flag is removed and a
 *   unit would die, collapse that unit.
 *
 *   Targets:
 *   - Alter the immortal flag of these groups. If immortal flag is removed and
 *     a unit would die, collapse that unit.
 *
 *   Immortal:
 *   - Turn immortal flag for unit(s) on/off?
 *
 * ---
 *
 * MECH: Multipliers
 * - Changes the multipliers for the current action.
 * - You may use JavaScript code for any of these.
 *
 *   Critical Hit%:
 *
 *     Rate:
 *     - Affects chance to land a critical hit by this multiplier.
 *
 *     Flat:
 *     - Affects chance to land a critical hit by this flat bonus.
 *
 *   Critical Damage
 *
 *     Rate:
 *     - Affects critical damage by this multiplier.
 *
 *     Flat:
 *     - Affects critical damage by this flat bonus.
 *
 *   Damage/Healing
 *
 *     Rate:
 *     - Sets the damage/healing multiplier for current action.
 *
 *     Flat:
 *     - Sets the damage/healing bonus for current action.
 *
 *   Hit Rate
 *
 *     Rate:
 *     - Affects chance to connect attack by this multiplier.
 *
 *     Flat:
 *     - Affects chance to connect attack by this flat bonus.
 *
 * ---
 * 
 * MECH: Once Parallel
 * - Plays a Common Event parallel to the battle event once without repeating
 *   itself when done.
 * 
 *   Common Event ID:
 *   - The ID of the parallel Common Event to play.
 *   - Does NOT repeat itself when finished.
 *   - When exiting battle scene, all Once Parallels are cleared.
 *   - Once Parallels are not retained upon reentering the scene.
 *   - Once Parallels are not stored in memory and cannot be saved.
 * 
 * ---
 * 
 * MECH: OTB Order
 * - Alters the OTB Turn Order. Best used with single targets.
 * - Requires VisuMZ_2_BattleSystemOTB!
 * 
 *   Targets:
 *   - Select unit(s) to alter the OTB Turn Order for.
 * 
 *   Current Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Next Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 *   Follow Turn By:
 *   - Changes turn order for target(s) by this amount.
 *   - Positive increases wait. Negative decreases wait.
 * 
 * ---
 * 
 * MECH: PTB Alter Cost
 * - Alters the action's cost settings.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Override?:
 *   - Overrides any 'permanent' settings for Changeability?
 * 
 *   Alter Changeability:
 *   - Allow the cost type and value to be changeable?
 * 
 *   Alter Cost Type:
 *   - Change the cost type to this scenario.
 *   - Use 'Unchanged' for no changes.
 * 
 *   Alter Cost Value:
 *   - What is the default action cost for this scenario?
 * 
 *   Priority:
 *   - What is this scenario's priority? Scenario outcomes with equal or lower
 *     priorities cannot override types and costs.
 * 
 * ---
 * 
 * MECH: PTB Conversion
 * - Converts full actions into half actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Conversion Count:
 *   - Converts full actions into half actions.
 *   - If not enough, consume half actions.
 * 
 * ---
 * 
 * MECH: PTB Full/Half Action(s)
 * - Alters the subject team's available Full/Half Actions.
 * - Requires VisuMZ_2_BattleSystemPTB!
 * 
 *   Full Actions:
 *   - Alters the subject team's available Full Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 *   Half Actions:
 *   - Alters the subject team's available Half Actions.
 *   - Positive for gaining. Negative for losing.
 * 
 * ---
 *
 * MECH: Remove Buff/Debuff
 * - Removes buff(s)/debuff(s) from unit(s). 
 * - Determine which parameters are removed.
 *
 *   Targets:
 *   - Select unit(s) to have the buff(s) and/or debuff(s) removed.
 *
 *   Buff Parameters:
 *   - Select which buffed parameter(s) to remove.
 *
 *   Debuff Parameters:
 *   - Select which debuffed parameter(s) to remove.
 *
 * ---
 *
 * MECH: Remove State
 * - Remove state(s) from unit(s).
 *
 *   Targets:
 *   - Select unit(s) to have states removed from.
 *
 *   States:
 *   - Select which state ID(s) to remove from unit(s).
 *   - Insert multiple state ID's to remove multiple at once.
 *
 * ---
 * 
 * MECH: STB Exploit Effect
 * - Utilize the STB Exploitation mechanics!
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Target(s) Exploited?:
 *   - Exploit the below targets?
 * 
 *     Targets:
 *     - Select unit(s) to become exploited.
 * 
 *     Force Exploitation:
 *     - Force the exploited status?
 * 
 *   User Exploiter?:
 *   - Allow the user to become the exploiter?
 * 
 *     Force Exploitation:
 *     - Force the exploiter status?
 * 
 * ---
 * 
 * MECH: STB Extra Action
 * - Adds an extra action for the currently active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Extra Actions:
 *   - How many extra actions should the active battler gain?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: STB Remove Excess Actions
 * - Removes excess actions from the active battler.
 * - Requires VisuMZ_2_BattleSystemSTB!
 * 
 *   Remove Actions:
 *   - How many actions to remove from the active battler?
 *   - You may use JavaScript code.
 * 
 * ---
 * 
 * MECH: Swap Weapon
 * - Causes the unit(s) to swap their weapon for another.
 * - Requires VisuMZ_2_WeaponSwapSystem!
 * 
 *   Targets:
 *   - Select unit(s) to swap weapons for.
 * 
 *   Weapon Type ID:
 *   - Which weapon type to swap to?
 *   - This is NOT the weapon's ID.
 *   - It's the weapon TYPE.
 * 
 * ---
 * 
 * MECH: Text Popup
 * - Causes the unit(s) to display a text popup.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Text:
 *   - What text do you wish to display?
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 * 
 * MECH: Variable Popup
 * - Causes the unit(s) to display a popup using the data stored inside
 *   a variable.
 * 
 *   Targets:
 *   - Select unit(s) to prompt a text popup.
 * 
 *   Variable:
 *   - Get data from which variable to display as a popup?
 * 
 *   Digit Grouping:
 *   - Use digit grouping to separate numbers?
 *   - Requires VisuMZ_0_CoreEngine!
 * 
 *   Text Color:
 *   - Use #rrggbb for custom colors or regular numbers for text colors from
 *     the Window Skin.
 * 
 *   Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Flash Duration:
 *   - What is the frame duration of the flash effect?
 * 
 * ---
 *
 * MECH: Wait For Effect
 * - Waits for the effects to complete before performing next command.
 *
 * ---
 *
 * === Action Sequences - Motion ===
 *
 * These Action Sequences allow you the ability to control the motions of
 * sideview sprites.
 *
 * ---
 * 
 * MOTION: Clear Freeze Frame
 * - Clears any freeze frames from the unit(s).
 * 
 *   Targets:
 *   - Select which unit(s) to clear freeze frames for.
 * 
 * ---
 * 
 * MOTION: Freeze Motion Frame
 * - Forces a freeze frame instantly at the selected motion.
 * - Automatically clears with a new motion.
 * 
 *   Targets:
 *   - Select which unit(s) to freeze motions for.
 * 
 *   Motion Type:
 *   - Freeze this motion for the unit(s).
 * 
 *   Frame Index:
 *   - Which frame do you want to freeze the motion on?
 *   - Frame index values start at 0.
 * 
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 * 
 * ---
 *
 * MOTION: Motion Type
 * - Causes the unit(s) to play the selected motion.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 *   Motion Type:
 *   - Play this motion for the unit(s).
 *
 *   Show Weapon?:
 *   - If using 'attack', 'thrust', 'swing', or 'missile', display the
 *     weapon sprite?
 *
 * ---
 *
 * MOTION: Perform Action
 * - Causes the unit(s) to play the proper motion based on the current action.
 *
 *   Targets:
 *   - Select which unit(s) to perform a motion.
 *
 * ---
 *
 * MOTION: Refresh Motion
 * - Cancels any set motions unit(s) has to do and use their most natural
 *   motion at the moment.
 *
 *   Targets:
 *   - Select which unit(s) to refresh their motion state.
 *
 * ---
 *
 * MOTION: Wait By Motion Frame
 * - Creates a wait equal to the number of motion frames passing.
 * - Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 *   Motion Frames to Wait?:
 *   - Each "frame" is equal to the value found in 
 *     Plugin Parameters => Actors => Motion Speed
 *
 * ---
 *
 * === Action Sequences - Movement ===
 *
 * These Action Sequences allow you the ability to control the sprites of
 * actors and enemies in battle.
 *
 * ---
 *
 * MOVE: Battle Step
 * - Causes the unit(s) to move forward past their home position to prepare
 *   for action.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home By Distance
 * - Change unit(s)'s home position by a distance from their current home
 *   position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     change by.
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Point
 * - Change home position(s) to a target point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Change Home To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to change home position(s) for.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to change home position to.
 *
 *     Target Location:
 *     - Select which part target group to change home position to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total change amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Face Direction
 * - Causes the unit(s) to face forward or backward.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Direction:
 *   - Select which direction to face.
 *
 * ---
 *
 * MOVE: Face Point
 * - Causes the unit(s) to face a point on the screen.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change direction.
 *
 *   Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Face Away From?:
 *   - Face away from the point instead?
 *
 * ---
 *
 * MOVE: Face Target(s)
 * - Causes the unit(s) to face other targets on the screen.
 * - Sideview-only!
 *
 *   Targets (facing):
 *   - Select which unit(s) to change direction.
 *
 *   Targets (destination):
 *   - Select which unit(s) for the turning unit(s) to face.
 *
 *   Face Away From?:
 *   - Face away from the unit(s) instead?
 *
 * ---
 *
 * MOVE: Float
 * - Causes the unit(s) to float above the ground.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make float.
 *
 *   Desired Height:
 *   - Vertical distance to float upward.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total float amount.
 *
 *   Float Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Float?:
 *   - Wait for floating to complete before performing next command?
 *
 * ---
 *
 * MOVE: Home Reset
 * - Causes the unit(s) to move back to their home position(s) and face back to
 *   their original direction(s).
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Jump
 * - Causes the unit(s) to jump into the air.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to make jump.
 *
 *   Desired Height:
 *   - Max jump height to go above the ground
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total jump amount.
 *
 *   Wait For Jump?:
 *   - Wait for jumping to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move Distance
 * - Moves unit(s) by a distance from their current position(s).
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Distance Adjustment:
 *   - Makes adjustments to distance values to determine which direction to
 *     move unit(s).
 *     - Normal - No adjustments made
 *     - Horizontal - Actors adjust left, Enemies adjust right
 *     - Vertical - Actors adjust Up, Enemies adjust down
 *     - Both - Applies both Horizontal and Vertical
 *
 *     Distance: X:
 *     - Horizontal distance to move.
 *     - You may use JavaScript code.
 *
 *     Distance: Y:
 *     - Vertical distance to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Point
 * - Moves unit(s) to a designated point on the screen.
 * - Sideview-only! Points based off Graphics.boxWidth/Height.
 *
 *   Targets:
 *   - Select which unit(s) to move.
 *
 *   Destination Point:
 *   - Select which point to face.
 *     - Home
 *     - Center
 *     - Point X, Y
 *       - Replace 'x' and 'y' with coordinates
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Move To Target(s)
 * - Moves unit(s) to another unit(s) on the battle field.
 * - Sideview-only!
 *
 *   Targets (Moving):
 *   - Select which unit(s) to move.
 *
 *   Targets (Destination):
 *   - Select which unit(s) to move to.
 *
 *     Target Location:
 *     - Select which part target group to move to.
 *       - front head
 *       - front center
 *       - front base
 *       - middle head
 *       - middle center
 *       - middle base
 *       - back head
 *       - back center
 *       - back base
 *
 *     Melee Distance:
 *     - The melee distance away from the target location in addition to the
 *       battler's width.
 *
 *   Offset Adjustment:
 *   - Makes adjustments to offset values to determine which direction to
 *     adjust the destination by.
 *
 *     Offset: X:
 *     - Horizontal offset to move.
 *     - You may use JavaScript code.
 *
 *     Offset: Y:
 *     - Vertical offset to move.
 *     - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for total movement amount.
 *
 *   Face Destination?:
 *   - Turn and face the destination?
 *
 *   Movement Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Movement Motion:
 *   - Play this motion for the unit(s).
 *
 *   Wait For Movement?:
 *   - Wait for movement to complete before performing next command?
 *
 * ---
 *
 * MOVE: Opacity
 * - Causes the unit(s) to change opacity.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change opacity.
 *
 *   Desired Opacity:
 *   - Change to this opacity value.
 *   - You may use JavaScript code.
 *
 *   Duration:
 *   - Duration in frames for opacity change.
 *
 *   Opacity Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Opacity?:
 *   - Wait for opacity changes to complete before performing next command?
 *
 * ---
 *
 * MOVE: Scale/Grow/Shrink
 * - Causes the unit(s) to scale, grow, or shrink?.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to change the scale of.
 *
 *   Scale X:
 *   Scale Y:
 *   - What target scale value do you want?
 *   - 1.0 is normal size.
 *
 *   Duration:
 *   - Duration in frames to scale for.
 *
 *   Scale Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Scale?:
 *   - Wait for scaling to complete before performing next command?
 *
 * ---
 *
 * MOVE: Skew/Distort
 * - Causes the unit(s) to skew.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to skew.
 *
 *   Skew X:
 *   Skew Y:
 *   - What variance to skew?
 *   - Use small values for the best results.
 *
 *   Duration:
 *   - Duration in frames to skew for.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew to complete before performing next command?
 *
 * ---
 *
 * MOVE: Spin/Rotate
 * - Causes the unit(s) to spin.
 * - Sideview-only!
 *
 *   Targets:
 *   - Select which unit(s) to spin.
 *
 *   Angle:
 *   - How many degrees to spin?
 *
 *   Duration:
 *   - Duration in frames to spin for.
 *
 *   Spin Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 * 
 *   Revert Angle on Finish:
 *   - Upon finishing the spin, revert the angle back to 0.
 *
 *   Wait For Spin?:
 *   - Wait for spin to complete before performing next command?
 *
 * ---
 *
 * MOVE: Wait For Float
 * - Waits for floating to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Jump
 * - Waits for jumping to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Movement
 * - Waits for movement to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Opacity
 * - Waits for opacity changes to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Scale
 * - Waits for scaling to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Skew
 * - Waits for skewing to complete before performing next command.
 *
 * ---
 *
 * MOVE: Wait For Spin
 * - Waits for spinning to complete before performing next command.
 *
 * ---
 * 
 * === Action Sequences - Projectiles ===
 * 
 * Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * ---
 *
 * PROJECTILE: Animation
 * - Create an animation projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Animation ID:
 *     - Determine which animation to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 * 
 *     Wait For Animation?:
 *     - Wait for animation to finish before going to the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Icon
 * - Create an icon projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Icon:
 *     - Determine which icon to use as a projectile.
 *       - You may use JavaScript code.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 *
 * PROJECTILE: Picture
 * - Create a picture projectile and fire it at a target.
 * - Requires VisuMZ_3_ActSeqProjectiles!
 *
 *   Coordinates:
 *
 *     Start Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should start from.
 *         - Target - Start from battler target(s)
 *         - Point - Start from a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) to start the projectile from.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile from.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to start the projectile at.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *     Goal Location:
 *     - Settings to determine where the projectile(s) start from.
 *
 *       Type:
 *       - Select where the projectile should go to.
 *         - Target - Goal is battler target(s)
 *         - Point - Goal is a point on the screen
 *
 *         Target(s):
 *         - Select which unit(s) for projectile to go to.
 *
 *           Centralize:
 *           - Create one projectile at the center of the targets?
 *           - Or create a projectile for each target?
 * 
 *           Target Location:
 *           - Select which part of the target to send the projectile to.
 *           - front head
 *           - front center
 *           - front base
 *           - middle head
 *           - middle center
 *           - middle base
 *           - back head
 *           - back center
 *           - back base
 *
 *         Point X:
 *         Point Y:
 *         - Insert the X/Y coordinate to send the projectile to.
 *         - You may use JavaScript code.
 *
 *       Offset X:
 *       Offset Y:
 *       - Insert how many pixels to offset the X/Y coordinate by.
 *       - You may use JavaScript code.
 *
 *   Settings:
 *
 *     Picture Filename:
 *     - Determine which picture to use as a projectile.
 *
 *     Duration:
 *     - Duration for the projectile(s) to travel.
 *
 *     Wait For Projectile?:
 *     - Wait for projectile(s) to reach their destination before going onto
 *       the next command?
 *
 *     Extra Settings:
 *     - Add extra settings to the projectile?
 *
 *       Auto Angle?:
 *       - Automatically angle the projectile to tilt the direction
 *         it's moving?
 *
 *       Angle Offset:
 *       - Alter the projectile's tilt by this many degrees.
 *
 *       Arc Peak:
 *       - This is the height of the project's trajectory arc in pixels.
 *
 *       Blend Mode:
 *       - What kind of blend mode do you wish to apply to the projectile?
 *         - Normal
 *         - Additive
 *         - Multiply
 *         - Screen
 *
 *       Easing:
 *       - Select which easing type to apply to the projectile's trajectory.
 *
 *       Hue:
 *       - Adjust the hue of the projectile.
 *       - Insert a number between 0 and 360.
 *
 *       Scale:
 *       - Adjust the size scaling of the projectile.
 *       - Use decimals for exact control.
 *
 *       Spin Speed:
 *       - Determine how much angle the projectile spins per frame.
 *       - Does not work well with "Auto Angle".
 *
 * ---
 * 
 * === Action Sequences - Skew ===
 * 
 * These action sequences allow you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * ---
 *
 * SKEW: Change Skew
 * - Changes the camera skew.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Skew X:
 *   - Change the camera skew X to this value.
 *
 *   Skew Y:
 *   - Change the camera skew Y to this value.
 *
 *   Duration:
 *   - Duration in frames to change camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Reset Skew
 * - Reset any skew settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset camera skew.
 *
 *   Skew Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Skew?:
 *   - Wait for skew changes to complete before performing next command?
 *
 * ---
 *
 * SKEW: Wait For Skew
 * - Waits for skew changes to complete before performing next command.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * === Action Sequences - Target ===
 *
 * If using a manual target by target Action Sequence, these commands will give
 * you full control over its usage.
 *
 * ---
 *
 * TARGET: Current Index
 * - Sets the current index to this value.
 * - Then decide to jump to a label (optional).
 *
 *   Set Index To:
 *   - Sets current targeting index to this value.
 *   - 0 is the starting index of a target group.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Next Target
 * - Moves index forward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Previous Target
 * - Moves index backward by 1 to select a new current target.
 * - Then decide to jump to a label (optional).
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * TARGET: Random Target
 * - Sets index randomly to determine new currernt target.
 * - Then decide to jump to a label (optional).
 *
 *   Force Random?:
 *   - Index cannot be its previous index amount after random.
 *
 *   Jump To Label:
 *   - If a target is found after the index change, jump to this label in the
 *     Common Event.
 *
 * ---
 *
 * === Action Sequences - Weapon ===
 *
 * Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * ---
 *
 * WEAPON: Clear Weapon Slot
 * - Clears the active weapon slot (making others valid again).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to clear the active weapon slot for.
 *
 * ---
 *
 * WEAPON: Next Weapon Slot
 * - Goes to next active weapon slot (making others invalid).
 * - If next slot is weaponless, don't label jump.
 *
 *   Targets:
 *   - Select unit(s) to change the next active weapon slot for.
 *
 * ---
 *
 * WEAPON: Set Weapon Slot
 * - Sets the active weapon slot (making others invalid).
 * - Only works for Actors.
 *
 *   Targets:
 *   - Select unit(s) to change the active weapon slot for.
 *
 *   Weapon Slot ID:
 *   - Select weapon slot to make active (making others invalid).
 *   - Use 0 to clear and normalize. You may use JavaScript code.
 *
 * ---
 *
 * === Action Sequences - Zoom ===
 *
 * These Action Sequences are zoom-related.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ZOOM: Change Scale
 * - Changes the zoom scale.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Scale:
 *   - The zoom scale to change to.
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Reset Zoom
 * - Reset any zoom settings.
 * - Requires VisuMZ_3_ActSeqCamera!
 *
 *   Duration:
 *   - Duration in frames to reset battle zoom.
 *
 *   Zoom Easing:
 *   - Select which easing type you wish to apply.
 *   - Requires VisuMZ_0_CoreEngine.
 *
 *   Wait For Zoom?
 *   - Wait for zoom changes to complete before performing next command?
 *
 * ---
 *
 * ZOOM: Wait For Zoom
 * - Waits for zoom changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Auto Battle Settings
 * ============================================================================
 *
 * These Plugin Parameter settings allow you to change the aspects added by
 * this plugin that support Auto Battle and the Auto Battle commands.
 *
 * Auto Battle commands can be added to the Party Command Window and/or Actor
 * Command Window. The one used by the Party Command Window will cause the
 * whole party to enter an Auto Battle state until stopped by a button input.
 * The command used by the Actor Command Window, however, will cause the actor
 * to select an action based off the Auto Battle A.I. once for the current turn
 * instead.
 *
 * ---
 *
 * Battle Display
 * 
 *   Message:
 *   - Message that's displayed when Auto Battle is on.
 *     Text codes allowed. %1 - OK button, %2 - Cancel button
 * 
 *   OK Button:
 *   - Text used to represent the OK button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Cancel Button:
 *   - Text used to represent the Cancel button.
 *   - If VisuMZ_0_CoreEngine is present, ignore this.
 * 
 *   Background Type:
 *   - Select background type for Auto Battle window.
 *     - 0 - Window
 *     - 1 - Dim
 *     - 2 - Transparent
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for this window.
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the Auto Battle options to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Startup Name:
 *   - Command name of the option.
 * 
 *   Style Name:
 *   - Command name of the option.
 * 
 *   OFF:
 *   - Text displayed when Auto Battle Style is OFF.
 * 
 *   ON:
 *   - Text displayed when Auto Battle Style is ON.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Damage Settings
 * ============================================================================
 *
 * These Plugin Parameters add a variety of things to how damage is handled in
 * battle. These range from hard damage caps to soft damage caps to how damage
 * popups appear, how the formulas for various aspects are handled and more.
 *
 * Damage Styles are also a feature added through this plugin. More information
 * can be found in the help section above labeled 'Damage Styles'.
 *
 * ---
 *
 * Damage Styles
 * 
 *   Default Style:
 *   - Which Damage Style do you want to set as default?
 *   - Use 'Manual' to not use any styles at all.
 *     - The 'Manual' style will not support <Armor Penetration> notetags.
 *     - The 'Manual' style will not support <Armor Reduction> notetags.
 * 
 *   Style List:
 *   - A list of the damage styles available.
 *   - These are used to calculate base damage.
 * 
 *     Name:
 *     - Name of this Damage Style.
 *     -Used for notetags and such.
 * 
 *     JS: Formula:
 *     - The base formula for this Damage Style.
 * 
 *     Items & Equips Core:
 * 
 *       HP Damage:
 *       MP Damage:
 *       HP Recovery:
 *       MP Recovery:
 *       HP Drain:
 *       MP Drain:
 *       - Vocabulary used for this data entry.
 * 
 *       JS: Damage Display:
 *       - Code used the data displayed for this category.
 *
 * ---
 *
 * Damage Cap
 * 
 *   Enable Damage Cap?:
 *   - Put a maximum hard damage cap on how far damage can go?
 *   - This can be broken through the usage of notetags.
 * 
 *   Default Hard Cap:
 *   - The default hard damage cap used before applying damage.
 * 
 *   Enable Soft Cap?:
 *   - Soft caps ease in the damage values leading up to the  hard damage cap.
 *   - Requires hard Damage Cap enabled.
 * 
 *     Base Soft Cap Rate:
 *     - The default soft damage cap used before applying damage.
 * 
 *     Soft Scale Constant:
 *     - The default soft damage cap used before applying damage.
 *
 * ---
 *
 * Popups
 * 
 *   Popup Duration:
 *   - Adjusts how many frames a popup stays visible.
 * 
 *   Newest Popups Bottom:
 *   - Puts the newest popups at the bottom.
 * 
 *   Offset X:
 *   Offset Y:
 *   - Sets how much to offset the sprites by horizontally/vertically.
 * 
 *   Shift X:
 *   Shift Y:
 *   - Sets how much to shift the sprites by horizontally/vertically.
 * 
 *   Shift Y:
 * 
 *   Critical Flash Color:
 *   - Adjust the popup's flash color.
 *   - Format: [red, green, blue, alpha]
 * 
 *   Critical Duration:
 *   - Adjusts how many frames a the flash lasts.
 *
 * ---
 *
 * Formulas
 * 
 *   JS: Overall Formula:
 *   - The overall formula used when calculating damage.
 * 
 *   JS: Variance Formula:
 *   - The formula used when damage variance.
 * 
 *   JS: Guard Formula:
 *   - The formula used when damage is guarded.
 *
 * ---
 *
 * Critical Hits
 * 
 *   JS: Rate Formula:
 *   - The formula used to calculate Critical Hit Rates.
 * 
 *   JS: Damage Formula:
 *   - The formula used to calculate Critical Hit Damage modification.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Mechanics Settings
 * ============================================================================
 *
 * Some of the base settings for the various mechanics found in the battle
 * system can be altered here in these Plugin Parameters. Most of these will
 * involve JavaScript code and require you to have to good understanding of
 * how the RPG Maker MZ code works before tampering with it.
 *
 * ---
 *
 * Action Speed
 * 
 *   Allow Random Speed?:
 *   - Allow speed to be randomized base off the user's AGI?
 * 
 *   JS: Calculate:
 *   - Code used to calculate action speed.
 *
 * ---
 *
 * Base Troop
 * 
 *   Base Troop ID's:
 *   - Select the Troop ID(s) to duplicate page events from for all
 *     other troops.
 *   - More information can be found in the dedicated Help section above.
 *
 * ---
 * 
 * Common Events (on Map)
 * 
 *   Pre-Battle Event:
 *   Post-Battle Event:
 *   Victory Event:
 *   Defeat Event:
 *   Escape Success Event:
 *   Escape Fail Event:
 *   - Queued Common Event to run upon meeting the condition.
 *   - Use to 0 to not run any Common Event at all.
 *   - "Post-Battle Event" will always run regardless.
 *   - If any events are running before the battle, they will continue running
 *     to the end first before the queued Common Events will run.
 *   - These common events only run on the map scene. They're not meant to run
 *     in the battle scene.
 *   - If the "Defeat Event" has a common event attached to it, then random
 *     encounters will be changed to allow defeat without being sent to the
 *     Game Over scene. Instead, the game will send the player to the map scene
 *     where the Defeat Event will run.
 *
 * ---
 *
 * Escape
 * 
 *   JS: Calc Escape Ratio:
 *   - Code used to calculate the escape success ratio.
 * 
 *   JS: Calc Escape Raise:
 *   - Code used to calculate how much the escape success ratio raises upon
 *     each failure.
 * 
 * ---
 * 
 * Switches
 * 
 *   Switch: Critical:
 *   - Turns switch ON if the action performs a critical hit.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit lands a critical
 *     hit, then the switch will remain ON for the rest of the action.
 * 
 *   Switch: Miss/Evade:
 *   - Turns switch ON if the action misses/is evaded.
 *   - Switch reverts to OFF whenever an action starts.
 *   - If multiple targets/hits are struck, as long as one hit fails to land,
 *     then the switch will remain ON for the rest of the action.
 * 
 * ---
 * 
 * Variables
 * 
 *   Variable: Damage:
 *   - Variable records target damage during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of damage done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 *   Variable: Healing:
 *   - Variable records target healing during action.
 *   - Variable reverts to 0 whenever an action starts.
 *   - If multiple targets/hits are struck, the variable will record the total
 *     amount of healing done for the remainder of the action (unless manually
 *     reseting to 0 during an Action Sequence).
 * 
 * ---
 *
 * JS: Battle-Related
 * 
 *   JS: Pre-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Battle:
 *   - Target function: BattleManager.startBattle()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Battle Victory:
 *   - Target function: BattleManager.processVictory()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Success:
 *   - Target function: BattleManager.onEscapeSuccess()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Escape Failure:
 *   - Target function: BattleManager.onEscapeFailure()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Battle Defeat:
 *   - Target function: BattleManager.processDefeat()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Battle:
 *   - Target function: BattleManager.endBattle()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Turn-Related
 * 
 *   JS: Pre-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Turn:
 *   - Target function: BattleManager.startTurn()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Turn:
 *   - Target function: Game_Battler.prototype.onTurnEnd()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Regenerate:
 *   - Target function: Game_Battler.prototype.regenerateAll()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * JS: Action-Related
 * 
 *   JS: Pre-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Start Action:
 *   - Target function: BattleManager.startAction()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Pre-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-Damage:
 *   - Target function: Game_Action.prototype.executeDamage()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Post-Apply:
 *   - Target function: Game_Action.prototype.apply()
 *   - JavaScript code occurs after function is run.
 * 
 *   JS: Pre-End Action:
 *   - Target function: BattleManager.endAction()
 *   - JavaScript code occurs before function is run.
 * 
 *   JS: Post-End Action:
 *   - DescriTarget function: BattleManager.endAction()
 *   - JavaScript code occurs after function is run.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Layout Settings
 * ============================================================================
 *
 * The Battle Layout Settings Plugin Parameter gives you control over the look,
 * style, and appearance of certain UI elements. These range from the way the
 * Battle Status Window presents its information to the way certain windows
 * like the Party Command Window and Actor Command Window appear.
 *
 * ---
 *
 * Battle Layout Style
 * - The style used for the battle layout.
 * 
 *   Default:
 *   - Shows actor faces in Battle Status.
 * 
 *   List:
 *   - Lists actors in Battle Status.
 * 
 *   XP:
 *   - Shows actor battlers in a stretched Battle Status.
 * 
 *   Portrait:
 *   - Shows portraits in a stretched Battle Status.
 * 
 *   Border:
 *   - Displays windows around the screen border.
 *
 * ---
 *
 * List Style
 * 
 *   Show Faces:
 *   - Shows faces in List Style?
 * 
 *   Command Window Width:
 *   - Determine the window width for the Party and Actor Command Windows.
 *   - Affects Default and List Battle Layout styles.
 *
 * ---
 *
 * XP Style
 * 
 *   Command Lines:
 *   - Number of action lines in the Actor Command Window for the XP Style.
 * 
 *   Sprite Height:
 *   - Default sprite height used when if the sprite's height has not been
 *     determined yet.
 * 
 *   Sprite Base Location:
 *   - Determine where the sprite is located on the Battle Status Window.
 *     - Above Name - Sprite is located above the name.
 *     - Bottom - Sprite is located at the bottom of the window.
 *     - Centered - Sprite is centered in the window.
 *     - Top - Sprite is located at the top of the window.
 *
 * ---
 *
 * Portrait Style
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait instead of a face.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Border Style
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 * 
 *   Show Portraits?:
 *   - Requires VisuMZ_1_MainMenuCore.
 *   - Shows the actor's portrait at the edge of the screen.
 * 
 *   Portrait Scaling:
 *   - If portraits are used, scale them by this much.
 *
 * ---
 *
 * Skill & Item Windows
 * 
 *   Middle Layout:
 *   - Shows the Skill & Item Windows in mid-screen?
 * 
 *   Columns:
 *   - The total number of columns for Skill & Item Windows in the battle scene
 *
 * ---
 * 
 * Status Window Elements
 * 
 *   Battler Name:
 *   Gauge 1 (HP):
 *   Gauge 2 (MP):
 *   Gauge 3 (TP):
 *   State Icon:
 *   TPB/ATB Gauge:
 * 
 *     Offset: X/Y:
 *     - Offset this Battle Status Window element's X/Y.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Window Skin:
 * 
 *     Filename:
 *     - Filename used for the Battle Status Window skin.
 *     - Leave this empty to use the default window skin.
 * 
 *     Hide Window Skin?:
 *     - Hide the window skin for the Battle Status Window?
 * 
 *   Selectable Background:
 * 
 *     Hide Selectable BG?:
 *     - Show/Hide the selectable background box for the Battle Status Window?
 * 
 *   Attachments:
 * 
 *     Back Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the back of the Battle
 *         Status Window. Leave empty for none.
 * 
 *       Offset: X/Y:
 *       - Offset this Battle Status Window element's X/Y.
 *       - For X: Negative goes left. Positive goes right.
 *       - For Y: Negative goes up. Positive goes down.
 * 
 *     Front Attachment:
 * 
 *       Filename:
 *       - Filename used for an image to attach to the front of the Battle
 *         Status Window. Leave empty for none.
 * 
 * ---
 * 
 * UI Elements
 * 
 *   Anti-Tint UI?
 *   - Prevent UI Elements from being tinted?
 *   - This prevents UI Elements such as HP Gauges, Enemy Names, Battle Cursor,
 *     and Weakness Display from being affected by screen tint.
 * 
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battle Log Settings
 * ============================================================================
 *
 * These Plugin Parameters give you control over how the Battle Log Window, the
 * window shown at the top of the screen in the battle layout, appears, its
 * various properties, and which text will be displayed.
 *
 * The majority of the text has been disabled by default with this plugin to
 * make the flow of battle progress faster.
 *
 * ---
 *
 * General
 * 
 *   Back Color:
 *   - Use #rrggbb for a hex color.
 * 
 *   Max Lines:
 *   - Maximum number of lines to be displayed.
 * 
 *   Message Wait:
 *   - Number of frames for a usual message wait.
 * 
 *   Text Align:
 *   - Text alignment for the Window_BattleLog.
 * 
 *   JS: X, Y, W, H:
 *   - Code used to determine the dimensions for the battle log.
 *
 * ---
 *
 * Start Turn
 * 
 *   Show Start Turn?:
 *   - Display turn changes at the start of the turn?
 * 
 *   Start Turn Message:
 *   - Message displayed at turn start.
 *   - %1 - Turn Count
 * 
 *   Start Turn Wait:
 *   - Number of frames to wait after a turn started.
 *
 * ---
 *
 * Display Action
 * 
 *   Show Centered Action?:
 *   - Display a centered text of the action name?
 * 
 *   Show Skill Message 1?:
 *   - Display the 1st skill message?
 * 
 *   Show Skill Message 2?:
 *   - Display the 2nd skill message?
 * 
 *   Show Item Message?:
 *   - Display the item use message?
 *
 * ---
 *
 * Action Changes
 * 
 *   Show Counter?:
 *   - Display counter text?
 * 
 *   Show Reflect?:
 *   - Display magic reflection text?
 * 
 *   Show Substitute?:
 *   - Display substitute text?
 *
 * ---
 *
 * Action Results
 * 
 *   Show No Effect?:
 *   - Display no effect text?
 * 
 *   Show Critical?:
 *   - Display critical text?
 * 
 *   Show Miss/Evasion?:
 *   - Display miss/evasion text?
 * 
 *   Show HP Damage?:
 *   - Display HP Damage text?
 * 
 *   Show MP Damage?:
 *   - Display MP Damage text?
 * 
 *   Show TP Damage?:
 *   - Display TP Damage text?
 *
 * ---
 *
 * Display States
 * 
 *   Show Added States?:
 *   - Display added states text?
 * 
 *   Show Removed States?:
 *   - Display removed states text?
 * 
 *   Show Current States?:
 *   - Display the currently affected state text?
 * 
 *   Show Added Buffs?:
 *   - Display added buffs text?
 * 
 *   Show Added Debuffs?:
 *   - Display added debuffs text?
 * 
 *   Show Removed Buffs?:
 *   - Display removed de/buffs text?
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Battleback Scaling Settings
 * ============================================================================
 *
 * By default, the battlebacks in RPG Maker MZ scale as if the screen size is
 * a static 816x624 resolution, which isn't always the case. These settings
 * here allow you to dictate how you want the battlebacks to scale for the
 * whole game. These settings CANNOT be changed midgame or per battle.
 *
 * ---
 *
 * Settings
 * 
 *   Default Style:
 *   - The default scaling style used for battlebacks.
 *   - MZ (MZ's default style)
 *   - 1:1 (No Scaling)
 *   - Scale To Fit (Scale to screen size)
 *   - Scale Down (Scale Downward if Larger than Screen)
 *   - Scale Up (Scale Upward if Smaller than Screen)
 * 
 *   JS: 1:1:
 *   JS: Scale To Fit:
 *   JS: Scale Down:
 *   JS: Scale Up:
 *   JS: 1:1:
 *   JS: 1:1:
 *   - This code gives you control over the scaling for this style.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Party Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you control over how the Party Command Window
 * operates in the battle scene. You can turn disable it from appearing or make
 * it so that it doesn't 
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Party Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Party Command Window.
 * 
 *   Fight Icon:
 *   - The icon used for the Fight command.
 * 
 *   Add Auto Battle?:
 *   - Add the "Auto Battle" command to the Command Window?
 * 
 *     Auto Battle Icon:
 *     - The icon used for the Auto Battle command.
 * 
 *     Auto Battle Text:
 *     - The text used for the Auto Battle command.
 * 
 *   Add Options?:
 *   - Add the "Options" command to the Command Window?
 * 
 *     Options Icon:
 *     - The icon used for the Options command.
 * 
 *     Active TPB Message:
 *     - Message that will be displayed when selecting options during the
 *       middle of an action.
 * 
 *   Escape Icon:
 *   - The icon used for the Escape command.
 *
 * ---
 *
 * Access
 * 
 *   Skip Party Command:
 *   - DTB: Skip Party Command selection on turn start.
 *   - TPB: Skip Party Command selection at battle start.
 * 
 *   Disable Party Command:
 *   - Disable the Party Command Window entirely?
 *
 * ---
 *
 * Help Window
 * 
 *   Fight:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 * 
 *   Options:
 *   - Text displayed when selecting the Options command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Command Window
 * ============================================================================
 *
 * These Plugin Parameters allow you to change various aspects regarding the
 * Actor Command Window and how it operates in the battle scene. This ranges
 * from how it appears to the default battle commands given to all players
 * without a custom <Battle Commands> notetag.
 *
 * ---
 *
 * Command Window
 * 
 *   Style:
 *   - How do you wish to draw commands in the Actor Command Window?
 *   - Text Only: Display only the text.
 *   - Icon Only: Display only the icon.
 *   - Icon + Text: Display the icon first, then the text.
 *   - Auto: Determine which is better to use based on the size of the cell.
 * 
 *   Text Align:
 *   - Text alignment for the Actor Command Window.
 * 
 *   Item Icon:
 *   - The icon used for the Item command.
 * 
 *   Normal SType Icon:
 *   - Icon used for normal skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * 
 *   Magic SType Icon:
 *   - Icon used for magic skill types that aren't assigned any icons.
 *   - Ignore if VisuMZ_1_SkillsStatesCore is installed.
 *
 * ---
 *
 * Battle Commands
 * 
 *   Command List:
 *   - List of battle commands that appear by default if the <Battle Commands>
 *     notetag isn't present.
 *
 *     - Attack 
 *       - Adds the basic attack command.
 * 
 *     - Skills
 *       - Displays all the skill types available to the actor.
 * 
 *     - SType: x
 *     - Stype: name
 *       - Adds in a specific skill type.
 *       - Replace 'x' with the ID of the skill type.
 *       - Replace 'name' with the name of the skill type (without text codes).
 *
 *     - All Skills
 *       - Adds all usable battle skills as individual actions.
 * 
 *     - Skill: x
 *     - Skill: name
 *       - Adds in a specific skill as a usable action.
 *       - Replace 'x' with the ID of the skill.
 *       - Replace 'name' with the name of the skill.
 * 
 *     - Guard
 *       - Adds the basic guard command.
 * 
 *     - Item
 *       - Adds the basic item command.
 * 
 *     - Escape
 *       - Adds the escape command.
 * 
 *     - Auto Battle
 *       - Adds the auto battle command.
 * 
 *     - Party
 *       - Requires VisuMZ_2_PartySystem!
 *       - Switches out the current actor for another.
 * 
 *     - Combat Log
 *       - Requires VisuMZ_4_CombatLog!
 *       - Shows combat log.
 * 
 *     - Talk
 *       - Requires VisuMZ_3_BattleCmdTalk!
 *       - Shows talk command if applicable.
 * 
 *     - Weapon Swap
 *       - Requires VisuMZ_2_WeaponSwapSystem!
 *       - Swaps current weapon for next one.
 * 
 *   Show Command Costs:
 *   - If a battle command has a resource cost, show it?
 *
 * ---
 *
 * Help Window
 * 
 *   Skill Types:
 *   - Text displayed when selecting a skill type.
 *   - %1 - Skill Type Name
 * 
 *   Items:
 *   - Text displayed when selecting the item command.
 * 
 *   Escape:
 *   - Text displayed when selecting the escape command.
 * 
 *   Auto Battle:
 *   - Text displayed when selecting the Auto Battle command.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Actor Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how the sideview battlers behave for
 * the actor sprites. Some of these settings are shared with enemies if they
 * use sideview battler graphics.
 *
 * ---
 *
 * Flinch
 * 
 *   Flinch Distance X:
 *   - The normal X distance when flinching.
 * 
 *   Flinch Distance Y:
 *   - The normal Y distance when flinching.
 * 
 *   Flinch Duration:
 *   - The number of frames for a flinch to complete.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 * 
 *   Chant Style:
 *   - What determines the chant motion?
 *   - Hit type or skill type?
 * 
 *   Offset X:
 *   - Offsets X position where actor is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where actor is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Motion Speed:
 *   - The number of frames in between each motion.
 * 
 *   Priority: Active:
 *   - Place the active actor on top of actor and enemy sprites.
 * 
 *   Priority: Actors:
 *   - Prioritize actors over enemies when placing sprites on top of each other
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 * 
 *   JS: Home Position:
 *   - Code used to calculate the home position of actors.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Enemy Battler Settings
 * ============================================================================
 *
 * These Plugin Parameter settings adjust how enemies appear visually in the
 * battle scene. Some of these settings will override the settings used for
 * actors if used as sideview battlers. Other settings include changing up the
 * default attack animation for enemies, how the enemy select window functions,
 * and more.
 *
 * ---
 *
 * Visual
 * 
 *   Attack Animation:
 *   - Default attack animation used for enemies.
 *   - Use <Attack Animation: x> for custom animations.
 * 
 *   Emerge Text:
 *   - Show or hide the 'Enemy emerges!' text at the start of battle.
 * 
 *   Offset X:
 *   - Offsets X position where enemy is positioned.
 *   - Negative values go left. Positive values go right.
 * 
 *   Offset Y:
 *   - Offsets Y position where enemy is positioned.
 *   - Negative values go up. Positive values go down.
 * 
 *   Smooth Image:
 *   - Smooth out the battler images or pixelate them?
 *
 * ---
 *
 * Select Window
 * 
 *   Any: Last Selected:
 *   - Prioritize last selected enemy over front view or sideview settings?
 * 
 *   FV: Right Priority:
 *   - If using frontview, auto select the enemy furthest right.
 * 
 *   SV: Right Priority:
 *   - If using sideview, auto select the enemy furthest right.
 * 
 * ---
 * 
 * Name:
 * 
 *   Legacy Option:
 *   - Use the legacy version (window) or new version (sprite).
 *   - WARNING: Legacy version is no longer supported for bugs.
 *   - Not all settings available here in the Plugin Parameters will be
 *     available to the legacy version (ie Always Visible and Attach States).
 * 
 *   Font Size:
 *   - Font size used for enemy names.
 * 
 *   Name Position:
 * 
 *     Offset X:
 *     Offset Y:
 *     - Offset the enemy name's position by this much.
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name: Attach States:
 *   - Attach the enemy's state icon to the enemy name?
 * 
 *     Attach: Offset X:
 *     Attach: Offset Y:
 *     - How much to offset the attached icon's X/Y position by?
 *     - For X: Negative goes left. Positive goes right.
 *     - For Y: Negative goes up. Positive goes down.
 * 
 *   Name Visibility:
 * 
 *     Always Hidden:
 *     - Determines if the enemy name will always be visible.
 *     - Highest priority.
 * 
 *     Always Visible:
 *     - Determines if the enemy name will always be visible.
 *     - Medium priority.
 * 
 *     By Selection?:
 *     - Determines the conditions for enemy name visibility.
 *     - Lowest priority.
 *
 * ---
 *
 * Sideview Battlers
 * 
 *   Allow Collapse:
 *   - Causes defeated enemies with SV Battler graphics to "fade away"
 *     when defeated?
 * 
 *   Anchor: X:
 *   - Default X anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Anchor: Y:
 *   - Default Y anchor for Sideview Battlers.
 *   - Use values between 0 and 1 to be safe.
 * 
 *   Motion: Idle:
 *   - Sets default idle animation used by Sideview Battlers.
 * 
 *   Shadow Visible:
 *   - Show or hide the shadow for Sideview Battlers.
 * 
 *   Size: Width:
 *   - Default width for enemies that use Sideview Battlers.
 * 
 *   Size: Height:
 *   - Default height for enemies that use Sideview Battlers.
 * 
 *   Weapon Type:
 *   - Sets default weapon type used by Sideview Battlers.
 *   - Use 0 for Bare Hands.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: HP Gauge Settings
 * ============================================================================
 *
 * Settings that adjust the visual HP Gauge displayed in battle.
 *
 * ---
 *
 * Show Gauges For
 * 
 *   Actors:
 *   - Show HP Gauges over the actor sprites' heads?
 *   - Requires SV Actors to be visible.
 * 
 *   Enemies:
 *   - Show HP Gauges over the enemy sprites' heads?
 *   - Can be bypassed with <Hide HP Gauge> notetag.
 * 
 *     Requires Defeat?:
 *     - Requires defeating the enemy once to show HP Gauge?
 *     - Can be bypassed with <Show HP Gauge> notetag.
 * 
 *       Battle Test Bypass?:
 *       - Bypass the defeat requirement in battle test?
 *
 * ---
 *
 * Settings
 * 
 *   Anchor X:
 *   Anchor Y:
 *   - Where do you want the HP Gauge sprite's anchor X/Y to be?
 *     Use values between 0 and 1 to be safe.
 * 
 *   Scale:
 *   - How large/small do you want the HP Gauge to be scaled?
 * 
 *   Offset X:
 *   Offset Y:
 *   - How many pixels to offset the HP Gauge's X/Y by?
 *
 * ---
 *
 * Options
 * 
 *   Add Option?:
 *   - Add the 'Show HP Gauge' option to the Options menu?
 * 
 *   Adjust Window Height:
 *   - Automatically adjust the options window height?
 * 
 *   Option Name:
 *   - Command name of the option.
 *
 * ---
 *
 * ============================================================================
 * Plugin Parameters: Action Sequence Settings
 * ============================================================================
 *
 * Action Sequence Plugin Parameters allow you to decide if you want automatic
 * Action Sequences to be used for physical attacks, the default casting
 * animations used, how counters and reflects appear visually, and what the
 * default stepping distances are.
 *
 * ---
 *
 * Automatic Sequences
 * 
 *   Melee Single Target:
 *   - Allow this auto sequence for physical, single target actions?
 * 
 *   Melee Multi Target:
 *   - Allow this auto sequence for physical, multi-target actions?
 *
 * ---
 * 
 * Quality of Life
 * 
 *   Auto Notetag:
 *   - Automatically apply the <Custom Action Sequence> notetag effect to any
 *     item or skill that has a Common Event?
 *   - Any item or skill without a Common Event attached to it will use the
 *     Automatic Action Sequences instead.
 *   - The <Auto Action Sequence> notetag will disable this effect for that
 *     particular skill or item.
 * 
 * ---
 *
 * Cast Animations
 * 
 *   Certain Hit:
 *   - Cast animation for Certain Hit skills.
 * 
 *   Physical:
 *   - Cast animation for Physical skills.
 * 
 *   Magical:
 *   - Cast animation for Magical skills.
 *
 * ---
 *
 * Counter/Reflect
 * 
 *   Counter Back:
 *   - Play back the attack animation used?
 * 
 *   Reflect Animation:
 *   - Animation played when an action is reflected.
 * 
 *   Reflect Back:
 *   - Play back the attack animation used?
 *
 * ---
 *
 * Stepping
 * 
 *   Melee Distance:
 *   - Minimum distance in pixels for Movement Action Sequences.
 * 
 *   Step Distance X:
 *   - The normal X distance when stepping forward.
 * 
 *   Step Distance Y:
 *   - The normal Y distance when stepping forward.
 * 
 *   Step Duration:
 *   - The number of frames for a stepping action to complete.
 *
 * ---
 *
 * ============================================================================
 * Terms of Use
 * ============================================================================
 *
 * 1. These plugins may be used in free or commercial games provided that they
 * have been acquired through legitimate means at VisuStella.com and/or any
 * other official approved VisuStella sources. Exceptions and special
 * circumstances that may prohibit usage will be listed on VisuStella.com.
 * 
 * 2. All of the listed coders found in the Credits section of this plugin must
 * be given credit in your games or credited as a collective under the name:
 * "VisuStella".
 * 
 * 3. You may edit the source code to suit your needs, so long as you do not
 * claim the source code belongs to you. VisuStella also does not take
 * responsibility for the plugin if any changes have been made to the plugin's
 * code, nor does VisuStella take responsibility for user-provided custom code
 * used for custom control effects including advanced JavaScript notetags
 * and/or plugin parameters that allow custom JavaScript code.
 * 
 * 4. You may NOT redistribute these plugins nor take code from this plugin to
 * use as your own. These plugins and their code are only to be downloaded from
 * VisuStella.com and other official/approved VisuStella sources. A list of
 * official/approved sources can also be found on VisuStella.com.
 *
 * 5. VisuStella is not responsible for problems found in your game due to
 * unintended usage, incompatibility problems with plugins outside of the
 * VisuStella MZ library, plugin versions that aren't up to date, nor
 * responsible for the proper working of compatibility patches made by any
 * third parties. VisuStella is not responsible for errors caused by any
 * user-provided custom code used for custom control effects including advanced
 * JavaScript notetags and/or plugin parameters that allow JavaScript code.
 *
 * 6. If a compatibility patch needs to be made through a third party that is
 * unaffiliated with VisuStella that involves using code from the VisuStella MZ
 * library, contact must be made with a member from VisuStella and have it
 * approved. The patch would be placed on VisuStella.com as a free download
 * to the public. Such patches cannot be sold for monetary gain, including
 * commissions, crowdfunding, and/or donations.
 *
 * ============================================================================
 * Credits
 * ============================================================================
 * 
 * If you are using this plugin, credit the following people in your game:
 * 
 * Team VisuStella
 * * Yanfly
 * * Arisu
 * * Olivia
 * * Irina
 *
 * ============================================================================
 * Changelog
 * ============================================================================
 * 
 * Version 1.62: April 22, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Battle Forced End Action Crash
 * **** Depending on various circumstances, currently active battlers can be
 *      cleared from the battle system at will due to a number of reasons.
 *      However, if it just so happens that the targets are cleared, too, with
 *      actions remaining, then a crash will follow up. This plugin will
 *      prevent that change. Fix made by Olivia.
 * 
 * Version 1.61: April 14, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Impact Effects added by Irina and collaborating with Manu Gaming!
 * *** Impact: Bizarro Inversion
 * *** Impact: Desaturation
 * *** Impact: Negative Inversion
 * *** Impact: Oversaturation
 * *** Impact: Time Scale
 * *** Impact: Time Stop
 * 
 * Version 1.60: April 7, 2022
 * * Bug Fixes!
 * ** <Bypass Soft Damage Cap> notetag should no longer cause crashes. Fix made
 *    by Olivia.
 * * Feature Update!
 * ** Removed one of the forced log window clear events that have made log
 *    window messages impossible to utilize for certain settings. Update made
 *    by Olivia.
 * 
 * Version 1.59: March 31, 2022
 * * Bug Fixes!
 * ** Escape failure will no longer trigger Post-Battle Common Events. Fix
 *    made by Arisu.
 * 
 * Version 1.58: March 24, 2022
 * * Documentation Update:
 * ** Added extra clarity to <Sideview Size: width, height> notetag:
 * *** This does NOT change the image size. This only changes the HITBOX size.
 * * Feature Update!
 * ** Added failsafes to prevent battlers from moving to non-finite coordinates
 *    if calculations are made for non-existent targets. Updated by Olivia.
 * ** Regeneration timing for TPB-based battle systems will now occur based on
 *    individual turn counts instead of global turn counts for initial turn 0
 *    checks. Updated by Olivia.
 * 
 * Version 1.57: February 17, 2022
 * * Feature Update!
 * ** Adjusted the offset properties for the anti-tint UI container to properly
 *    match the UI offsets if the anti-tint were to be off. Update by Irina.
 * 
 * Version 1.56: February 10, 2022
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Once Parallels for battle now operate outside of the battle process.
 *    Update made by Olivia.
 * * New Features!
 * ** New Troop Page comment tag added by Olivia and sponsored by Puddor:
 * *** <Once Parallel When Start Battle>
 * **** Causes the troop page to immediately run the moment the battle scene
 *      begins to fade in (not after it fades in). This is faster than a turn 0
 *      condition troop page. Troop page conditions are ignored.
 * **** This can be used for things like the Action Sequence Camera plugin, the
 *      Visual Battle Environment plugin, and/or initial battle poses and such
 *      in order to provide a near seamless battle transition experience.
 * **** This does NOT trigger when coming out of the options menu or party
 *      menu screens.
 * **** This WILL trigger when going from battle to battle nonstop via plugins
 *      like VisuStella MZ's Chain Battles.
 * **** When actors are moving towards their home positions, it will take
 *      around 30 frames by default. Use this information however you like.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.55: January 27 2022
 * * Compatibility Update!
 * ** RPG Maker MV animations with front view should now play in the correct
 *    area against actor faces. Update made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Animations now play on top of all actor faces/portraits regardless of the
 *    battle layout style. Update made by Olivia.
 * * New Features!
 * ** New notetag added by Arisu.
 * *** <Bypass Auto Action Sequence>
 * **** This notetag is used for the game devs that have the Action Sequence
 *      Plugin Parameter "Auto Notetag" on for applying the notetag
 *      <Custom Action Sequence> to every skill and item with common events.
 * **** This will allow items and skills to be able to launch their common
 *      events from the menu scene regardless of the inherent restriction to
 *      prevent action sequence based skills/items with common events from
 *      launching.
 * **** Ignore this if you have "Auto Notetag" disabled or set to false. By
 *      default, this setting is set to false. Please be aware of the changes
 *      you've made to your game before using it.
 * 
 * Version 1.54: January 13, 2022
 * * Bug Fixes!
 * ** RPG Maker MZ Bug Fix!
 * *** Overly-Protective Substitute
 * *** When an ally with critical health is being targeted by a friendly non-
 *     Certain Hit skill (such as a heal or buff) and another ally has the
 *     substitute state, the other ally would "protect" the originally targeted
 *     ally and take the heal or buff.
 * *** The new changed behavior is that now, substitute will not trigger for
 *     any actions whose scope targets allies.
 * *** Fix made by Olivia.
 * 
 * Version 1.53: December 30, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Help file updated for updated features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Battle Layout > UI Elements > Anti-Tint UI?
 * **** Prevent UI Elements from being tinted?
 * **** This prevents UI Elements such as HP Gauges, Enemy Names, Battle
 *      Cursor, and Weakness Display from being affected by screen tint.
 * * Updated Feature!
 * ** Updated Plugin Command "PROJECTILE: Animation" by Arisu!
 * *** New Parameter: Wait For Animation?
 * **** Wait for animation to finish before going to the next command?
 * 
 * Version 1.52: December 16, 2021
 * * Compatibility Update!
 * ** RPG Maker MZ 1.4.0 compatibility update!
 * *** MV Animations played on screen level will now show up properly in the
 *     center of the screen.
 * 
 * Version 1.51: December 9, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence Plugin Commands added by Arisu:
 * *** MOVE: Change Home By Distance
 * *** MOVE: Change Home To Point
 * *** MOVE: Change Home To Target(s)
 * **** These Plugin Commands allow you to adjust the home position of
 *      battlers in sideview battle.
 * **** This is sideview only!
 * **** This does NOT work with front view!
 * **** For those wondering, going to the options screen, party screen, etc.
 *      won't reset the home positions like regular movement changes do.
 * **** Merry Christmas, Harold-gang!
 * 
 * Version 1.50: November 4, 2021
 * * Bug Fixes!
 * ** <Seal Attack> and <Seal Guard> should no longer be bypassed by
 *    auto-battle status. Fix made by Yanfly.
 * 
 * Version 1.49: October 28, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Action Sequence: MOTION: Freeze Motion Frame will now only show weapons
 *    when using a motion that is named either "attack", "thrust", "swing", or
 *    "missile". Update made by Irina.
 * ** Fail safe added to prevent Scene_Battle going into unsupported scenes
 *    like Scene_Equip and Scene_Skill. Update made by Olivia.
 * * New Feature!
 * ** New Action Sequence Plugin Command added by Arisu and sponsored by Anon:
 * *** MECH: Once Parallel
 * **** Plays a Common Event parallel to the battle event once without
 *      repeating itself when done.
 * **** When exiting battle scene, all Once Parallels are cleared.
 * **** Once Parallels are not retained upon reentering the scene.
 * **** Once Parallels are not stored in memory and cannot be saved.
 * 
 * Version 1.48: October 21, 2021
 * * Feature Update!
 * ** Animations are now played on top of battlers in the Front View XP Battle
 *    Layout appearance. Update made by Irina.
 * ** Battle Log, if decided to be shown, now updates faster. Update by Irina.
 * ** Default Critical Damage Bonus increase is now updated to account for
 *    HP Healing and MP Recovery. To update this, create a new project, with
 *    the newest version of Battle Core installed. Copy over the Plugin
 *    Parameters for the Damage Settings > Critical Hits > JS: Damage Formula
 *    to your own project's version. Update made by Irina.
 * 
 * Version 1.47: October 14, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Feature Update!
 * ** Back attachment sprites are now automatically updated with sprite
 *    battlers to be shifted towards the very back.
 * 
 * Version 1.46: September 23, 2021
 * * Bug Fixes!
 * ** Fixed problem with skills and items without action sequences preventing
 *    actions from occurring. Fix made by Yanfly.
 * 
 * Version 1.45: September 17, 2021
 * * Bug Fixes!
 * ** <JS Pre-End Action> and <JS Post-End Action> effects now have multiple
 *    checks to make sure that they don't launch multiple times when a battler
 *    without actions has a turn after one that does. Fix made by Olivia.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence notetags added by Yanfly and Arisu:
 * *** <Common Event Key: name>
 * *** <Common Event Keys: name, name, name>
 * *** <Common Event Keys>
 *      key
 *      key
 *      key
 *     </Common Event Keys>
 * **** Will generate Common Events for the skill/item with a corresponding
 *      key.
 * **** More information will be explained inside of the help file.
 * **** This feature is made for make the process of sharing Action Sequences
 *      to become easier without needing to line up Common Event ID's.
 * 
 * Version 1.44: August 20, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Action Sequence added by Irina and sponsored by Anon.
 * *** "ANIM: Play at Coordinate"
 * **** Plays an animation on the screen at a specific x, y coordinate even if
 *      there is no sprite attached.
 * **** Requires VisuMZ_0_CoreEngine!
 * 
 * Version 1.43: July 23, 2021
 * * Feature Update!
 * ** Immortality now works different with instant death mechanics. Skill
 *    effects that apply instant death or attack states that apply instant
 *    death will now trigger a flag instead of cancelling immortality. The
 *    flag will remain until immortality is manually cancelled via Action
 *    Sequence and then proc the death effect. This way, animations can remain
 *    to the end with instant death mechanics in mind. This does not affect
 *    script calls.
 * 
 * Version 1.42: July 16, 2021
 * * Bug Fixes!
 * ** Added another fail safe for empty common events used for pre-battle
 *    common events. Fix made by Olivia.
 * 
 * Version 1.41: July 2, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * ** Added entries to <Battle Command> notetags and Plugin Parameters for
 *    "Party", "Combat Log", and "Weapon Swap" which weren't updated before.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * * New Features!
 * ** New Action Sequence added by Arisu:
 * *** MECH: Enemy Escape
 * **** Causes the enemy unit(s) to escape.
 * 
 * Version 1.40: June 25, 2021
 * * Bug Fixes!
 * ** Transformations from static enemies to and from animated SV enemies
 *    should no longer show both sprites. Fix made by Irina.
 * * Compatibility Update
 * ** Compatibility update with RPG Maker MZ 1.3.0+.
 * 
 * Version 1.39: June 18, 2021
 * * Bug Fixes!
 * ** MOVE: Home Reset should no longer trigger an end action function and
 *    cause plugins such as "Boost Action" to malfunction. Fix made by Olivia.
 * * Compatibility Update
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <Battle Layout: x> Troop Name tags can now work with comment tags. Update
 *    made by Irina.
 * ** Random encounter lists are now better shuffled for more variety with how
 *    the RNG seed works. Update made by Arisu.
 * 
 * Version 1.38: June 11, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Updates!
 * ** Location calculations will now be based off the a battler's base position
 *    in order for animations, popups, and other aspects to line up properly
 *    when scaled. Update made by Irina.
 * ** Plugin Parameters for Enemy Battler Settings > Name have been rearranged
 *    for better organization. Update by Olivia.
 * * New Features!
 * ** New Notetags added by Olivia and sponsored by NSG:
 * *** <Sideview Shadow Scale X: x%>
 * *** <Sideview Shadow Scale X: x.y>
 * *** <Sideview Shadow Scale Y: x%>
 * *** <Sideview Shadow Scale Y: x.y>
 * **** These new notetags allow you to adjust the X and Y scale of the SV
 *      shadow sprite separately.
 * ** New Plugin Parameters added by Olivia and sponsored by NSG:
 * *** Enemy Battler Settings > Name > Name Visibility > Always Hidden
 * *** Enemy Battler Settings > Name > Name Visibility > By Selection?
 * **** Choose to have the names always hidden or by selection.
 * **** These are adjusted on a priority list.
 * 
 * Version 1.37: May 21, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia.
 * *** <Command Require Learn>
 * *** <Command Require Access>
 * **** These two commands determine the visibility of a battle command by
 *      whether or not the skill has been learned or accessible.
 * * Feature Update!
 * ** For those using TPB, each battler's regeneration phase will no longer
 *    tick multiple times in a single frame to prevent irregularities. Update
 *    made by Olivia.
 * 
 * Version 1.36: May 14, 2021
 * * Bug Fixes!
 * ** Reversed an HP/MP regeneration bug that was incorrectly reported for TPB.
 *    Fix made by Olivia.
 * * Documentation Update
 * ** Added "TPB/ATB Active Battle Actor Shifting" to Major Changes section:
 * *** This change has been active since the start of this plugin. It was not
 *     documented until now.
 * *** Pressing cancel on the Actor Command Window no longer switches between
 *     actors with a full TPB/ATB gauge before reaching the Party Command
 *     Window. This is to accomplish a couple of things: 1) reduce the number
 *     of button presses to reach the Party Command Window and 2) to prevent
 *     motion resets and disrupting action sequences. If this feature is vital
 *     to your battle system, we recommend that you do not use this plugin or
 *     any of the Battle Core-required plugins.
 * ** Feature Updates
 * *** Distortion sprite Y calculations will now be rounded upward for better
 *     visuals and prevent odd pixelation effects. Update made by Irina.
 * 
 * Version 1.35: May 7, 2021
 * * Bug Fixes!
 * ** Pre-Battle Common Events without a wait command at the end should no
 *    longer lock up by coincidentally pressing the menu key at the same time.
 *    Fix made by Olivia.
 * * Feature Update!
 * ** Added an extra check for TPB-based battle systems to not run turn end
 *    functions when it's not actually the actual turn end timing. Update made
 *    by Olivia.
 * ** "Damage Styles" plugin parameters are now moved to the top of the
 *    Damage Settings category. This should make it easier to acknowledge the
 *    existence of and not have it be an unknown entity. Update made by Irina.
 * 
 * Version 1.34: April 23, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** Uses a better algorithm for determining shadow positioning. Update made
 *    by Olivia.
 * * New Features!
 * ** New additions made for Projectile action sequences.
 * ** "Start Location" and "Goal Location" now have "Target Location" parameter
 *    to determine which part of the target's body to send the projectile from
 *    or towards. Added by Olivia.
 * ** Requires VisuMZ_1_BattleCore version 1.34 to have affect.
 * 
 * Version 1.33: April 9, 2021
 * * Bug Fixes!
 * ** Skill costs should now be displayed on battle commands again. Bug fix
 *    made by Olivia.
 * ** Pre-Battle Common Events should no longer cause stalling when used with
 *    specific event commands. Bug fix made by Olivia.
 * * Compatibility Update!
 * ** Added "Weapon Swap" to the list of battle commands that can be added.
 * * Documentation Update!
 * ** Added "Weapon Swap" and "Combat Log" to the list of <Battle Commands> in
 *    the notetags section.
 * ** Help file updated for new features.
 * * New Features!
 * ** New notetags added by Olivia:
 * *** <Sideview Shadow Scale: x%> and <Sideview Shadow Scale: x.y>
 * **** Used for: Actor, Enemy Notetags
 * **** Adjusts the scaling size of the sideview battler's shadow.
 * 
 * Version 1.32: April 2, 2021
 * * Feature Update!
 * ** Sideview battler sprites when using front view will now factor in the
 *    window padding and appear properly centered to their focus point. Update
 *    made by Olivia.
 * 
 * Version 1.31: March 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Added "VisuStella MZ Compatibility" section for detailed compatibility
 *    explanations with the VisuMZ_3_BoostAction plugin.
 * 
 * Version 1.30: March 19, 2021
 * * Documentation Update!
 * ** Help file updated for updated features.
 * * Feature Update!
 * ** <JS Targets> is now updated to include the default set of targets
 *    selected by the skill/item's original scope. Update made by Yanfly.
 * *** If you wish to clear it out, simply do 'targets = []' first.
 * 
 * Version 1.29: March 12, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameter added by Olivia:
 * *** Plugin Parameters > Enemy Battler Settings > Name > Legacy Option
 * **** Use the legacy version (window) or new version (sprite).
 * **** WARNING: Legacy version is no longer supported for bugs.
 * **** Not all settings available here in the Plugin Parameters will be
 *      available to the legacy version (ie Always Visible and Attach States).
 * 
 * Version 1.28: March 5, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Arisu:
 * *** Plugin Parameters > Actor Command > Show Command Costs
 * **** If you don't want to show skill costs for your commands in the Actor
 *      Command Window, you can now hide them.
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battle Layout Settings > Status Window Elements
 * *** Battle Layout Settings > Status Window Elements > Battler Name
 * *** Battle Layout Settings > Status Window Elements > Gauge 1 (HP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 2 (MP)
 * *** Battle Layout Settings > Status Window Elements > Gauge 3 (TP)
 * *** Battle Layout Settings > Status Window Elements > State Icon
 * *** Battle Layout Settings > Status Window Elements > TPB/ATB Gauge
 * **** These new Plugin Parameters allow you to offset the positions of the
 *      various Battle Status Window elements. Their base positions will be
 *      calculated by the Battle Layout used and then offset from there.
 * *** Battle Layout Settings > Status Window Elements > Window Skin
 * **** These settings allow you to set a specific window skin for the
 *      Battle Status Window or hide it from view completely.
 * *** Battle Layout Settings > Status Window Elements > Selectable Background
 * **** This option allows you to hide the black box that comes with the
 *      majority of selectable elements found in RPG Maker MZ in case it does
 *      not fit with how you want the Battle Status Window to look.
 * *** Battle Layout Settings > Status Window Elements > Back Attachment
 * *** Battle Layout Settings > Status Window Elements > Front Attachment
 * **** These settings allow you to attach images to the back/front of the
 *      Battle Status Window from the img/system/ folder.
 * **** You may offset X and Y positions for them as well.
 * ** New Plugin Parameters added by Olivia:
 * *** Plugin Parameters > Enemy Settings > Name: Always Visible
 * **** Determines if the enemy name will always be visible.
 * *** Plugin Parameters > Enemy Settings > Name: Attach States
 * **** Attach the enemy's state icon to the enemy name?
 * *** Plugin Parameters > Enemy Settings > Attach: Offset X/Y
 * **** Offset the attached state icon's position.
 * * Feature Update!
 * ** Switched drawing enemy names on the screen from window to sprite to
 *    reduce lag and for better screen positioning accuracy especially during
 *    screen zooming. Update by Olivia.
 * 
 * Version 1.27: February 26, 2021
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * * Documentation Update!
 * ** Help file updated for new features.
 * * New Features!
 * ** New Plugin Parameters added by Irina and sponsored by AndyL:
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Critical
 * *** Plugin Parameters > Mechanics Settings > Switches > Switch: Miss/Evade
 * **** Turns Switches ON if the action performs a critical hit, misses, or is
 *      evaded at any point.
 * **** Switch reverts to OFF whenever an action starts.
 * **** If multiple targets/hits are struck, as long as one hit respectively
 *      lands a critical hit, fails to land, then the switch will remain ON for
 *      the rest of the action.
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Damage
 * *** Plugin Parameters > Mechanics Settings > Variables > Variable: Healing
 * **** Variable records target damage/healing during action.
 * **** Variable reverts to 0 whenever an action starts.
 * **** If multiple targets/hits are struck, the variable will record the total
 *      amount of damage/healing done for the remainder of the action (unless
 *      manually reseting to 0 during an Action Sequence).
 * 
 * Version 1.26: February 19, 2021
 * * Bug Fixes!
 * ** Battles with branching event paths found within a conditional branch or
 *    choice tree will no longer be skipped over. Fix made by Arisu.
 * * Compatibility Update
 * ** Returning to the battle scene from the options scene in a Tpb-base battle
 *    system now links the current actor. Update by Irina.
 * 
 * Version 1.25: February 5, 2021
 * * Compatibility Update
 * ** Added compatibility update with VisuStella MZ Skills and States Core's
 *    Plugin Parameter > State Settings > Action End Update
 * * Feature Update!
 * ** <Common Event: name> notetag no longer requires <Custom Action Sequence>
 *    notetag if the Plugin Parameter: Auto Notetag is enabled.
 * 
 * Version 1.24: January 29, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** MOVE: Move To Point and MOVE: Move To Target(s) Action Sequences'
 *    "Offset Adjustment" normal setting will now factor in Offset X and
 *    Offset Y positions unlike before where it cancels them. Update by Irina.
 * * New Features!
 * ** New notetag added by Arisu:
 * *** <Common Event: name>
 * **** Battle only: calls forth a Common Event of a matching name.
 * **** This is primarily used for users who are reorganizing around their
 *      Common Events and would still like to have their skills/items perform
 *      the correct Action Sequences in case the ID's are different.
 * 
 * Version 1.23: January 22, 2021
 * * Documentation Update!
 * ** Help file updated for new features.
 * * Feature Update!
 * ** ACSET: All Targets Action Set and ACSET: Each Target Action Set updated
 * *** New parameter added: Dual/Multi Wield?
 * **** Add times struck based on weapon quantity equipped?
 * * New Features!
 * ** Dual Wielding now functions differently. Made by Olivia.
 * *** Previously, RPG Maker MZ had "Dual Wielding" attack using both weapon
 *     animations at once, with the combined ATK of each weapon. It's confusing
 *     to look at and does not portray the nature of "Dual Wielding".
 * *** Dual Wielding, or in the case of users adding in third and fourth
 *     weapons, Multi Wielding is now changed. Each weapon is displayed
 *     individually, each producing its own attack animation, showing each
 *     weapon type, and applying only that weapon's ATK, Traits, and related
 *     effects. It is no longer a combined effect to display everything at once
 *     like RPG Maker MZ default.
 * *** If an actor has multiple weapon slots but some of them are unequipped,
 *     then the action will treat the attack as a single attack. There will be
 *     no barehanded attack to add on top of it. This is to match RPG Maker
 *     MZ's decision to omit a second animation if the same scenario is
 *     applied.
 * ** New Action Sequence Plugin Commands added by Yanfly
 * *** ANIM: Attack Animation 2+
 * **** Plays the animation associated with the user's 2nd weapon.
 *      Plays nothing if there is no 2nd weapon equipped.
 * ** New Action Sequence Plugin Commands added by Olivia
 * *** WEAPON: Clear Weapon Slot
 * *** WEAPON: Next Weapon Slot
 * *** WEAPON: Set Weapon Slot
 * **** These are Action Sequence Plugin Commands for devs who want finer
 *      control over Dual/Multi Wielding weapons.
 * 
 * Version 1.22: January 15, 2021
 * * Compatibility Update
 * ** Compatibility with "All Skills" Actor Command should now work with the
 *    Skills & States Core hide skill notetags.
 * 
 * Version 1.21: January 8, 2021
 * * Bug Fixes!
 * ** "MOVE: Home Reset" Plugin Command Action Sequence should work properly.
 *    Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Notetag snuck in by Arisu
 * *** <Auto Action Sequence>
 * **** Used for those who have the "Auto Notetag" Plugin Parameter enabled and
 *      just want to use an automatic Action Sequence instead.
 * ** New Plugin Parameter snuck in by Arisu!
 * *** Plugin Parameters > Action Sequences > Quality of Life > Auto Notetag
 * **** Automatically apply the <Custom Action Sequence> notetag effect to any
 *      item or skill that has a Common Event?
 * **** Any item or skill without a Common Event attached to it will use the
 *      Automatic Action Sequences instead.
 * **** The <Auto Action Sequence> notetag will disable this effect for that
 *      particular skill or item.
 * ** Arisu, you're going to be responsible for any bugs these may cause.
 * *** Bring it!!!!
 * **** And handling any bug report emails that are sent because this was
 *      turned on by accident.
 * ***** Please read the documentation, guys!
 * 
 * Version 1.20: January 1, 2021
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors that have received damage
 *    will return back to place after flinching. Fix made by Yanfly.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New notetags added by Yanfly:
 * *** <Battle Portrait Offset: +x, +y>
 * *** <Battle Portrait Offset X: +x>
 * *** <Battle Portrait Offset Y: +y>
 * **** This is used with the "Portrait" and "Border" Battle Layouts.
 * **** Offsets the X and Y coordinates for the battle portrait.
 * 
 * Version 1.19: December 25, 2020
 * * Bug Fixes!
 * ** Removing a state from a Sideview Enemy during the middle of their a non-
 *    looping motion will no longer reset their motion to neutral.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for updated feature(s)!
 * * Feature Update!
 * ** Action Sequence "PROJECTILE: Icon" now supports code for the "Icon"
 *    parameter. Update made by Yanfly.
 * 
 * Version 1.18: December 18, 2020
 * * Bug Fixes!
 * ** For TPB Active or ATB Active, inputting actors will no longer step back
 *    after an enemy's action is finished. Fix made by Yanfly and Shiro.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** Action Sequence "BTLOG: Add Text" is updated for the convenience of a new
 *    option to quickly copy the displayed text to the VisuStella MZ Combat Log
 *    if that plugin is installed. Added by Yanfly.
 * 
 * Version 1.17: December 11, 2020
 * * Bug Fixes!
 * ** Common Events in TPB Active that cause forced actions will no longer
 *    cause currently inputting actors that match the forced action battler to
 *    crash the game. Fix made by Yanfly and Shiro.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins.
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * Feature Update!
 * ** Action Sequence Impact Action Sequences "Shockwave from Each Target(s)",
 *    "Shockwave from Target(s) Center", and "Zoom Blur at Target(s) Center"
 *    now have "Offset X" and "Offset Y" plugin parameters. Added by Yanfly.
 * ** Action Sequence "MOVE: Move To Target(s)" is now changed so that if the
 *    "Melee Distance" value is set to 0, battlers will no longer stand a half
 *    body distance away. Added by Yanfly.
 * 
 * Version 1.16: December 4, 2020
 * * Bug Fixes!
 * ** Bug fixes made for the RPG Maker MZ base code. If a battler has no
 *    actions, then their action speed will not be Infinity. Fix by Olivia.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.15: November 29, 2020
 * * Bug Fixes!
 * ** Completely replacing the whole party at once will no longer cause the
 *    battle system to crash. Fix made by Olivia.
 * ** Pre-Battle Common Events will no longer cancel out any win/lose branches.
 *    Fix made by Arisu.
 * * Feature Update!
 * ** Custom Action Sequences will no longer close the Actor Command Input
 *    window unless absolutely necessary (like for Show Message events) during
 *    Active TPB/ATB. Change made by Arisu.
 * 
 * Version 1.14: November 22, 2020
 * * Feature Update!
 * ** Natural Miss and Evasion motions now have flinch distance.
 *    Added by Yanfly.
 * 
 * Version 1.13: November 15, 2020
 * * Optimization Update!
 * ** Plugin should run more optimized.
 * 
 * Version 1.12: November 8, 2020
 * * Bug Fixes!
 * ** Failsafes added to prevent common events from running if they're empty.
 *    Fix made by Irina.
 * ** Skip Party Command will now work properly with TPB-based battle systems.
 *    Fix made by Yanfly.
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** In preparation for upcoming VisuStella MZ plugins.
 * 
 * Version 1.11: November 1, 2020
 * * Compatibility Update!
 * ** Plugins should be more compatible with one another.
 * * Documentation Update!
 * ** Added clarity for the Plugin Parameters for the Common Events settings
 *    found in the mechanics section. The common events are only meant to run
 *    in the map scene and not for the battle scene. Update made by Irina.
 * * Feature Update!
 * ** The Plugin Parameter for Mechanics, Common Events (on Map), Defeat Event
 *    now has updated functionality. If this has a common event attached to it,
 *    then losing to random encounters will no longer send the player to the
 *    Game Over scene, but instead, send the player back to the map scene,
 *    where the Defeat Common Event will run. Update made by Irina.
 * 
 * Version 1.10: October 25, 2020
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * * New Features!
 * ** New Action Sequence Plugin Command added by Olivia:
 * *** MECH: Custom Damage Formula
 * **** Changes the current action's damage formula to custom.
 *      This will assume the MANUAL damage style.
 * ** New Notetag added by Irina:
 * ** New Plugin Parameters added by Irina:
 * *** Plugin Parameters > Battleback Scaling Settings
 * **** These settings allow you to adjust how battlebacks scale to the screen
 *      in the game.
 * *** <Battler Sprite Grounded>
 * **** Prevents the enemy from being able to jumping and/or floating due to
 *      Action Sequences but still able to move. Useful for rooted enemies.
 * 
 * Version 1.09: October 18, 2020
 * * Bug Fixes!
 * ** Exiting out of the Options menu scene or Party menu scene will no longer
 *    cause party members to reset their starting position. Fix made by Arisu
 * * Documentation Update!
 * ** Added documentation for new feature(s)!
 * ** There was a documentation error with <JS Pre-Regenerate> and
 *    <JS Post-Regenerate>. Fix made by Yanfly.
 * *** Before, these were written as <JS Pre-Regenerate Turn> and
 *     <JS Post-Regenerate Turn>. The "Turn" part of the notetag has been
 *     removed in the documentation.
 * * Feature Update!
 * ** Damage sprites on actors are now centered relative to the actor's anchor.
 *    Change made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Command added by Yanfly:
 * *** MECH: Variable Popup
 * **** Causes the unit(s) to display a popup using the data stored inside
 *      a variable.
 * 
 * Version 1.08: October 11, 2020
 * * Bug Fixes!
 * ** Dead party members at the start of battle no longer start offscreen.
 *    Fix made by Arisu.
 * ** Removed party members from battle no longer count as moving battlers.
 *    Fix made by Yanfly.
 * ** Using specific motions should now have the weapons showing and not
 *    showing properly. Fix made by Yanfly.
 * 
 * Version 1.07: October 4, 2020
 * * Bug Fixes!
 * ** Adding and removing actors will now refresh the battle status display.
 *    Fix made by Irina.
 * ** Adding new states that would change the affected battler's state motion
 *    will automatically refresh the battler's motion. Fix made by Irina.
 * ** Boss Collapse animation fixed and will sink into the ground.
 *    Fix made by Irina.
 * ** Failsafes added for certain animation types. Fix made by Yanfly.
 * ** Freeze Motion for thrust, swing, and missile animations will now show the
 *    weapons properly. Fix made by Yanfly.
 * ** The Guard command will no longer display the costs of the Attack command.
 *    Fix made by Irina.
 * * Documentation Update!
 * ** Updated help file for newly added plugin parameters.
 * * Feature Updates!
 * ** When using the Change Battleback event command in battle, the game client
 *    will wait until both battlebacks are loaded before changing the both of
 *    them so that the appearance is synched together. Change made by Yanfly.
 * * New Features!
 * ** New plugin parameters added by Irina!
 * *** Plugin Parameters > Actor Battler Settings > Chant Style
 * **** What determines the chant motion? Hit type or skill type?
 * 
 * Version 1.06: September 27, 2020
 * * Bug Fixes!
 * ** Enemy Battler Plugin Parameter "Shadow Visible" should now work again.
 *    Fix made by Irina.
 * * Compatibility Update!
 * ** Added compatibility functionality for future plugins. Added by Yanfly.
 * * Documentation Update!
 * ** Updated the help file for all the new plugin parameters.
 * * Feature Update!
 * ** Action Sequence "MECH: HP, MP, TP" will now automatically collapse an
 *    enemy if it has been killed by the effect.
 * ** All battle systems for front view will now have damage popups appear
 *    in front of the status window instead of just the Portrait battle layout.
 *    Update made by Yanfly.
 * * New Features!
 * ** New Action Sequence Plugin Commands from Irina!
 * *** MOTION: Clear Freeze Frame
 * *** MOTION: Freeze Motion Frame
 * **** You can freeze a battler's sprite's motion with a specific frame.
 * ** New notetags for Maps and name tags for Troops added by Yanfly!
 * *** <Battle Layout: type> to change the battle layout style used for
 *     specific maps and/or troops.
 * ** New plugin parameters added by Yanfly!
 * *** Plugin Parameters > Battle Layout Settings > Command Window Width
 * **** This plugin parameter lets you adjust the window width for Party and
 *      Actor Command windows in the Default and List Battle Layout styles.
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset X
 * *** Plugin Parameters > Enemy Battler Settings > Name: Offset Y
 * **** These plugin parameters allow you to offset the position of the enemy
 *      name positions on the screen by a specific amount.
 * 
 * Version 1.05: September 20, 2020
 * * Bug Fixes!
 * ** Actors now use their casting or charging animations again during TPB/ATB.
 *    Fix made by Yanfly.
 * ** Defeat requirement for enemies will no longer crash the game if turned on
 *    after creating
 * ** Escaping animation no longer has actors stay in place. Fixed by Yanfly.
 * ** Failsafes added for newly added weapon types that have not been adjusted
 *    in the Database > System 2 tab. Fixed by Irina.
 * ** Shadows now appear under the actor sprites. Fix made by Yanfly.
 * ** Victory during TPB will no longer cancel the victory animations of
 *    actors that will have their turn after. Fixed by Yanfly.
 * * Documentation Update!
 * ** All Anchor Plugin Parameter descriptions now state to use values between
 *    0 and 1 to be safe. Update made by Yanfly.
 * * Feature Update!
 * ** During Active TPB / ATB, canceling out of the actor command window will
 *    go directly into the party window without having to sort through all of
 *    the available active actors.
 * ** Going from the Party Command Window's Fight command will immediately
 *    return back to the actor command window that was canceled from.
 * * New Features!
 * ** Action Sequence Plugin Command "MOVE: Spin/Rotate" has been updated.
 * *** A new parameter has been added: "Revert Angle on Finish"
 * *** Added by Yanfly.
 * ** New plugin parameters have been added to Damage Settings.
 * *** Appear Position: Selects where you want popups to appear relative to the
 *     battler. Head, Center, Base. Added by Yanfly.
 * *** Offset X: Sets how much to offset the sprites by vertically.
 *     Added by Yanfly.
 * *** Offset Y: Sets how much to offset the sprites by horizontally.
 *     Added by Yanfly.
 * ** New plugin parameters have been added to Actor Battler Settings.
 * *** Priority: Active - Place the active actor on top of actor and
 *     enemy sprites. Added by Yanfly.
 * *** Priority: Actors - Prioritize actors over enemies when placing 
 *     sprites on top of each other. Added by Yanfly.
 * 
 * Version 1.04: September 13, 2020
 * * Bug Fixes!
 * ** Active Battler Sprites now remain on top and won't be hidden behind
 *    other sprites for better visual clarity. Fix made by Arisu.
 * ** Collapsing battlers will now show the dead motion properly. Fix made by
 *    Olivia.
 * ** Dead battlers can no longer be given immortality. Fix made by Olivia.
 * ** Going into the Options menu with no battleback set will no longer set a
 *    battle snapshot.
 * ** HP Gauges for Sideview Enemies are no longer flipped! Fix made by Yanfly.
 * ** Moving a dead battler would no longer reset their animation. Fix made by
 *    Olivia.
 * ** Pre-Battle Common Events now work with events instead of just random
 *    encounters. Fix made by Yanfly.
 * ** Sideview Enemy shadows no longer twitch. Fix made by Irina.
 * * Documentation Updates!
 * ** Added further explanations for Anchor X and Anchor Y plugin parameters.
 *    This is because there's a lot of confusion for users who aren't familiar
 *    with how sprites work. Added by Irina.
 * ** <Magic Reduction: x> notetag updated to say magical damage instead of
 *    physical damage. Fix made by Yanfly.
 * * New Features!
 * ** Additional Action Sequence Plugin Commands have been added in preparation
 *    of upcoming plugins! Additions made by Irina.
 * *** Action Sequences - Angle (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Camera (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Skew (for VisuMZ_3_ActSeqCamera)
 * *** Action Sequences - Zoom (for VisuMZ_3_ActSeqCamera)
 * ** Additional Action Sequence Plugin Commands have been made available now
 *    and added to Battle Core! Additions made by Irina.
 * *** MOVE: Scale/Grow/Shrink
 * *** MOVE: Skew/Distort
 * *** MOVE: Spin/Rotate
 * *** MOVE: Wait For Scale
 * *** MOVE: Wait For Skew
 * *** MOVE: Wait For Spin
 * ** Plugin Parameters Additions. Additions made by Irina.
 * *** Plugin Params > Actor Battler Settings > Offset X
 * *** Plugin Params > Actor Battler Settings > Offset Y
 * *** Plugin Params > Actor Battler Settings > Smooth Image
 * *** Plugin Params > Enemy Battler Settings > Offset X
 * *** Plugin Params > Enemy Battler Settings > Offset Y
 * *** Plugin Params > Enemy Battler Settings > Smooth Image
 * 
 * Version 1.03: September 6, 2020
 * * Bug Fixes!
 * ** Animated Battlers will refresh their motions from the death motion once
 *    they're revived instead of waiting for their next input phase. Fix made
 *    by Yanfly.
 * ** Battle Log speed sometimes went by too fast for certain enabled messages.
 *    Wait timers are now added to them, like state results, buff results, and
 *    debuff results. Fix made by Yanfly.
 * ** Boss Collapse animation now works properly. Fix made by Yanfly.
 * ** Freeze fix for TPB (Wait) if multiple actors get a turn at the same time.
 *    Fix made by Olivia.
 * ** Pressing cancel on a target window after selecting a single skill no
 *    longer causes the status window to twitch.
 * ** Sideview Enemies had a split frame of being visible if they were to start
 *    off hidden in battle. Fix made by Shaz.
 * * Compatibility Update:
 * ** Battle Core's Sprite_Damage.setup() function is now separated fro the
 *    default to allow for better compatibility. Made by Yanfly.
 * * Documentation Update:
 * ** Inserted more information for "Damage Popups" under "Major Changes"
 * * New Features!
 * ** <Magic Penetration: x>, <Magic Penetration: x%> notetags added.
 * ** <Magic Reduction: x>, <Magic Reduction: x%> notetags added.
 * ** <Battle UI Offset: +x, +y>, <Battle UI Offset X: +x>, and
 *    <Battle UI Offset Y: +y> notetags added for adjusting the positions of
 *    HP Gauges and State Icons.
 * *** Notetags added by Yanfly.
 * 
 * Version 1.02: August 30, 2020
 * * Bug Fixes!
 * ** Failsafes added for parsing battle targets. Fix made by Yanfly.
 * ** Immortality is no longer ignored by skills/items with the Normal Attack
 *    state effect. Fix made by Yanfly.
 * ** Miss and Evasion sound effects work again! Fix made by Yanfly.
 * ** Selecting "Escape" from the Actor Command Window will now have the
 *    Inputting Battler show its escape motion. Fix made by Yanfly.
 * ** Wait for Movement now applies to SV Enemies. Fix made by Yanfly.
 * * New Features!
 * ** Plugin Command "ACSET: Finish Action" now has an option to turn off the
 *    Immortality of targets. Feature added by Yanfly.
 * * Optimization Update
 * ** Uses less resources when making checks for Pre-Battle Battle Start events
 * 
 * Version 1.01: August 23, 2020
 * * Bug Fixes!
 * ** Plugin Parameters > Damage Settings > Damage Formats are now fixed.
 *    Fix made by Olivia.
 * ** TPB Battle System with Disable Party Command fixed. Fix made by Olivia.
 * ** States now show in list format if faces are disabled. Fix made by Yanfly.
 * ** The default damage styles were missing the 'v' variable to allow for
 *    variable data input. These are back now. Fix made by Yanfly.
 * *** Users updating from version 1.00 will need to fix this problem by either
 *     removing the plugin from the Plugin Manager list and reinstalling it, or
 *     going to Plugin Parameters > Damage Settings > Style List > the style
 *     you want, and adding "const v = $gameVariables._data;" to JS: Formula
 * * New Notetags Added:
 * ** <Command Show Switch: x> added by Olivia
 * ** <Command Show All Switches: x,x,x> added by Olivia
 * ** <Command Show Any Switches: x,x,x> added by Olivia
 * ** <Command Hide Switch: x> added by Olivia
 * ** <Command Hide All Switches: x,x,x> added by Olivia
 * ** <Command Hide Any Switches: x,x,x> added by Olivia
 * ** <JS Command Visible> added by Olivia
 *
 * Version 1.00: August 20, 2020
 * * Finished Plugin!
 *
 * ============================================================================
 * End of Helpfile
 * ============================================================================
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceStart
 * @text -
 * @desc The following are Action Sequences commands/sets.
 * These Plugin Commands only work in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSet
 * @text Action Sequence - Action Sets
 * @desc Action Sequence Action Sets are groups of commonly used
 * Action Sequence Commands put together for more efficient usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_SetupAction
 * @text ACSET: Setup Action Set
 * @desc The generic start to most actions.
 * 
 * @arg DisplayAction:eval
 * @text Display Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: On
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionStart:eval
 * @text Battle Step
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg CastAnimation:eval
 * @text Cast Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_WholeActionSet
 * @text ACSET: All Targets Action Set
 * @desc Affects all targets simultaneously performing the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_TargetActionSet
 * @text ACSET: Each Target Action Set
 * @desc Goes through each target one by one to perform the following.
 * 
 * @arg DualWield:eval
 * @text Dual/Multi Wield?
 * @type boolean
 * @on Apply
 * @off Don't
 * @desc Add times struck based on weapon quantity equipped?
 * @default false
 * 
 * @arg PerformAction:eval
 * @text Perform Action
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount1:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed
 * 
 * @arg ActionAnimation:eval
 * @text Action Animation
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitCount2:eval
 * @text Wait Count
 * @desc How many frames should the action sequence wait?
 * You may use JavaScript code.
 * @default Sprite_Battler._motionSpeed * 2
 * 
 * @arg ActionEffect:eval
 * @text Action Effect
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Set_FinishAction
 * @text ACSET: Finish Action
 * @desc The generic ending to most actions.
 * 
 * @arg ApplyImmortal:eval
 * @text Immortal: Off
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForNewLine:eval
 * @text Wait For New Line
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effects
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ClearBattleLog:eval
 * @text Clear Battle Log
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg ActionEnd:eval
 * @text Home Reset
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement
 * @type boolean
 * @on Use
 * @off Don't Use
 * @desc Use this part of the action sequence?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAngle
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAngle
 * @text Action Sequences - Angle
 * @desc Allows you to have control over the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeAngle
 * @text ANGLE: Change Angle
 * @desc Changes the camera angle.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc Change the camera angle to this many degrees.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_Reset
 * @text ANGLE: Reset Angle
 * @desc Reset any angle settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera angle.
 * @default 60
 *
 * @arg EasingType:str
 * @text Angle Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForAngle:eval
 * @text Wait For Angle?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for angle changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Angle_WaitForAngle
 * @text ANGLE: Wait For Angle
 * @desc Waits for angle changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceAnimation
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakAnimation
 * @text Action Sequences - Animations
 * @desc These Action Sequences are related to the 'Animations' that
 * can be found in the Animations tab of the Database.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ActionAnimation
 * @text ANIM: Action Animation
 * @desc Plays the animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation
 * @text ANIM: Attack Animation
 * @desc Plays the animation associated with the user's 1st weapon.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_AttackAnimation2
 * @text ANIM: Attack Animation 2+
 * @desc Plays the animation associated with the user's other weapons.
 * Plays nothing if there is no other weapon equipped.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg Slot:eval
 * @text Slot
 * @desc Which weapon slot to get this data from?
 * Main-hand weapon is weapon slot 1.
 * @default 2
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_CastAnimation
 * @text ANIM: Cast Animation
 * @desc Plays the cast animation associated with the action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["user"]
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ChangeBattlePortrait
 * @text ANIM: Change Battle Portrait
 * @desc Changes the battle portrait of the actor (if it's an actor).
 * Can be used outside of battle/action sequences.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to change the portraits for.
 * Valid units can only be actors.
 * @default ["user"]
 * 
 * @arg Filename:str
 * @text Filename
 * @type file
 * @dir img/pictures/
 * @desc Select the file to change the actor's portrait to.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_PlayAtCoordinate
 * @text ANIM: Play at Coordinate
 * @desc Plays an animation on the screen at a specific x, y coordinate.
 * Requires VisuMZ_0_CoreEngine!
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Animation
 * @type animation
 * @desc Plays this animation.
 * @default 1
 * 
 * @arg Coordinates
 *
 * @arg pointX:eval
 * @text X
 * @parent Coordinates
 * @desc X coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 *
 * @arg pointY:eval
 * @text Y
 * @parent Coordinates
 * @desc Y coordinate used for the animation.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 *
 * @arg Mirror:eval
 * @text Mirror Animation?
 * @parent Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 *
 * @arg Mute:eval
 * @text Mute Animation?
 * @parent Animation
 * @type boolean
 * @on Mute
 * @off Normal
 * @desc Mute the animation?
 * @default false
 *
 * @arg WaitComplete:eval
 * @text Wait for Completion?
 * @parent Animation
 * @type boolean
 * @on Wait
 * @off Normal
 * @desc Wait the animation to finish before continuing?
 * @default false
 * 
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_ShowAnimation
 * @text ANIM: Show Animation
 * @desc Plays the a specific animation on unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to play the animation on.
 * @default ["all targets"]
 * 
 * @arg AnimationID:num
 * @text Animation ID
 * @type animation
 * @desc Select which animation to play on unit(s).
 * @default 1
 * 
 * @arg Mirror:eval
 * @text Mirror Animation
 * @type boolean
 * @on Mirror
 * @off Normal
 * @desc Mirror the animation?
 * @default false
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Animation_WaitForAnimation
 * @text ANIM: Wait For Animation
 * @desc Causes the interpreter to wait for any animation(s) to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceBattleLog
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakBattleLog
 * @text Action Sequences - Battle Log
 * @desc These Action Sequences are related to the Battle Log Window,
 * the window found at the top of the battle screen.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_AddText
 * @text BTLOG: Add Text
 * @desc Adds a new line of text into the Battle Log.
 * 
 * @arg Text:str
 * @text Text
 * @desc Add this text into the Battle Log.
 * Text codes allowed.
 * @default Insert text here.
 * 
 * @arg CopyCombatLog:eval
 * @text Copy to Combat Log?
 * @type boolean
 * @on Copy Text
 * @off Don't Copy
 * @desc Copies text to the Combat Log.
 * Requires VisuMZ_4_CombatLog
 * @default true
 *
 * @arg CombatLogIcon:num
 * @text Combat Log Icon
 * @parent CopyCombatLog:eval
 * @desc What icon would you like to bind to this entry?
 * Requires VisuMZ_4_CombatLog
 * @default 87
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Clear
 * @text BTLOG: Clear Battle Log
 * @desc Clears all the text in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_DisplayAction
 * @text BTLOG: Display Action
 * @desc Displays the current action in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PopBaseLine
 * @text BTLOG: Pop Base Line
 * @desc Removes the Battle Log's last added base line and 
 * all text up to its former location.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_PushBaseLine
 * @text BTLOG: Push Base Line
 * @desc Adds a new base line to where the Battle Log currently is at.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_Refresh
 * @text BTLOG: Refresh Battle Log
 * @desc Refreshes the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_UI
 * @text BTLOG: UI Show/Hide
 * @desc Shows or hides the Battle UI (including the Battle Log).
 * 
 * @arg ShowHide:eval
 * @text Show/Hide?
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows/hides the Battle UI.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForBattleLog
 * @text BTLOG: Wait For Battle Log
 * @desc Causes the interpreter to wait for the Battle Log to finish.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_BattleLog_WaitForNewLine
 * @text BTLOG: Wait For New Line
 * @desc Causes the interpreter to wait for a new line in the Battle Log.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceCamera
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakCamera
 * @text Action Sequences - Camera
 * @desc Allows you to have control over the camera.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Clamp
 * @text CAMERA: Clamp ON/OFF
 * @desc Turns battle camera clamping on/off.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Setting:eval
 * @text ON/OFF
 * @type boolean
 * @on ON
 * @off OFF
 * @desc Turns camera clamping on/off.
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusPoint
 * @text CAMERA: Focus Point
 * @desc Focus the battle camera on a certain point in the screen.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg FocusX:eval
 * @text X Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg FocusY:eval
 * @text Y Coordinate
 * @desc Insert the point to focus the camera on.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_FocusTarget
 * @text CAMERA: Focus Target(s)
 * @desc Focus the battle camera on certain battler target(s).
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to focus the battle camera on.
 * @default ["user"]
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for camera focus change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Offset
 * @text CAMERA: Offset
 * @desc Offset the battle camera from the focus target.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @desc How much to offset the camera X by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @desc How much to offset the camera Y by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for offset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_Reset
 * @text CAMERA: Reset
 * @desc Reset the battle camera settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg ResetFocus:eval
 * @text Reset Focus?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the focus point?
 * @default true
 * 
 * @arg ResetOffset:eval
 * @text Reset Offset?
 * @type boolean
 * @on On
 * @off Off
 * @desc Reset the camera offset?
 * @default true
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for reset change.
 * @default 60
 *
 * @arg EasingType:str
 * @text Camera Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForCamera:eval
 * @text Wait For Camera?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for camera changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Camera_WaitForCamera
 * @text CAMERA: Wait For Camera
 * @desc Waits for camera to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 *
 * @command ActionSequenceSpaceDragonbones
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreaDragonbones
 * @text Action Sequences - Dragonbones
 * @desc These Action Sequences are Dragonbones-related.
 * Requires VisuMZ_2_DragonbonesUnion!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesMotionAni
 * @text DB: Dragonbones Animation
 * @desc Causes the unit(s) to play a Dragonbones motion animation.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg MotionAni:str
 * @text Motion Animation
 * @desc What is the name of the Dragonbones motion animation you wish to play?
 * @default attack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_DB_DragonbonesTimeScale
 * @text DB: Dragonbones Time Scale
 * @desc Causes the unit(s) to change their Dragonbones time scale.
 * Requires VisuMZ_2_DragonbonesUnion!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion animation.
 * @default ["user"]
 *
 * @arg TimeScale:num
 * @text Time Scale
 * @desc Change the value of the Dragonbones time scale to this.
 * @default 1.0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceElements
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakElements
 * @text Action Sequences - Elements
 * @desc These Action Sequences are related to elements.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_AddElements
 * @text ELE: Add Elements
 * @desc Adds element(s) to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to add onto the action.
 * Insert multiple element ID's to add multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_Clear
 * @text ELE: Clear Element Changes
 * @desc Clears all element changes made through Action Sequences.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_ForceElements
 * @text ELE: Force Elements
 * @desc Forces only specific element(s) when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @arg Elements:arraynum
 * @text Elements
 * @type number[]
 * @min 1
 * @max 99
 * @desc Select which element ID to force in the action.
 * Insert multiple element ID's to force multiple at once.
 * @default ["1"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Element_NullElements
 * @text ELE: Null Element
 * @desc Forces no element to be used when calculating damage.
 * Requires VisuMZ_1_ElementStatusCore!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceHorror
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakHorror
 * @text Action Sequences - Horror Effects
 * @desc These Action Sequences are Horror Effects-related.
 * Requires VisuMZ_2_HorrorEffects!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_Clear
 * @text HORROR: Clear All Filters
 * @desc Clear all Horror Effects filters on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove Horror Effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchCreate
 * @text HORROR: Glitch Create
 * @desc Creates the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg slices:num
 * @text Glitch Slices
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Glitch slices to be used with the target.
 * @default 10
 *
 * @arg offset:num
 * @text Glitch Offset
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc Default offset value.
 * @default 100
 *
 * @arg animated:eval
 * @text Glitch Animated?
 * @parent FilterGlitch
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the glitch effect?
 * @default true
 *
 * @arg aniFrequency:num
 * @text Glitch Frequency
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how frequent to make the glitch effect?
 * Lower = often     Higher = rarer
 * @default 300
 *
 * @arg aniStrength:num
 * @text Glitch Strength
 * @parent FilterGlitch
 * @type number
 * @min 1
 * @desc If animated, how strong is the glitch effect?
 * Lower = weaker     Higher = stronger
 * @default 30
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_GlitchRemove
 * @text HORROR: Glitch Remove
 * @desc Removes the glitch effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseCreate
 * @text HORROR: Noise Create
 * @desc Creates the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg noise:num
 * @text Noise Rate
 * @parent FilterNoise
 * @desc Noise rate to be used with the target.
 * @default 0.3
 *
 * @arg animated:eval
 * @text Noise Animated
 * @parent FilterNoise
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the noise for the target?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_NoiseRemove
 * @text HORROR: Noise Remove
 * @desc Removes the noise effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVCreate
 * @text HORROR: TV Create
 * @desc Creates the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create the Horror Effect for.
 * @default ["user"]
 *
 * @arg lineWidth:num
 * @text TV Line Thickness
 * @parent FilterTV
 * @type number
 * @min 1
 * @desc Default TV line thickness
 * Lower = thinner     Higher = thicker
 * @default 5
 *
 * @arg vignetting:num
 * @text TV Corner Size
 * @parent FilterTV
 * @desc Default TV line corner size
 * Lower = smaller     Higher = bigger
 * @default 0.3
 *
 * @arg animated:eval
 * @text TV Animated
 * @parent FilterTV
 * @type boolean
 * @on Animate
 * @off Static
 * @desc Animate the TV?
 * @default true
 *
 * @arg aniSpeed:num
 * @text TV Speed
 * @parent FilterTV
 * @desc Speed used to animate the TV if animated
 * Lower = slower     Higher = faster
 * @default 0.25
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Horror_TVRemove
 * @text HORROR: TV Remove
 * @desc Removes the TV effect on the target battler(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to remove the Horror Effect for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceImpact
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakImpact
 * @text Action Sequences - Impact
 * @desc These Action Sequences are related to creating impact.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_BlueRedInvert
 * @text IMPACT: Bizarro Inversion
 * @desc Swaps blue/red colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Bizarro?
 * @type boolean
 * @on Enable / Bizarro
 * @off Disable / Normal
 * @desc Enable Bizarro Inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ColorBreak
 * @text IMPACT: Color Break
 * @desc Breaks the colors on the screen before reassembling.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Intensity:eval
 * @text Intensity
 * @desc What is the intensity of the color break effect?
 * @default 60
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the color break effect?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutBack
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Desaturate
 * @text IMPACT: Desaturation
 * @desc Desaturates all colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Desaturate?
 * @type boolean
 * @on Enable / Desaturate
 * @off Disable / Normal
 * @desc Enable Desaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurScreen
 * @text IMPACT: Motion Blur Screen
 * @desc Creates a motion blur on the whole screen.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.1
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionBlurTarget
 * @text IMPACT: Motion Blur Target(s)
 * @desc Creates a motion blur on selected target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion blur effects for.
 * @default ["user"]
 *
 * @arg Angle:eval
 * @text Angle
 * @desc Determine what angle to make the motion blur at.
 * @default Math.randomInt(360)
 *
 * @arg Rate:eval
 * @text Intensity Rate
 * @desc This determines intensity rate of the motion blur.
 * Use a number between 0 and 1.
 * @default 0.5
 *
 * @arg Duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion blur last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default InOutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailCreate
 * @text IMPACT: Motion Trail Create
 * @desc Creates a motion trail effect for the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to create motion trail effects for.
 * @default ["user"]
 *
 * @arg delay:num
 * @text Delay
 * @type number
 * @min 1
 * @desc How many frames to delay by when creating a motion trail?
 * The higher the delay, the less after images there are.
 * @default 1
 *
 * @arg duration:num
 * @text Duration
 * @type number
 * @min 1
 * @desc How many frames should the motion trail last?
 * What do you want to be its duration?
 * @default 30
 *
 * @arg hue:num
 * @text Hue
 * @type number
 * @min 0
 * @max 255
 * @desc What do you want to be the hue for the motion trail?
 * @default 0
 *
 * @arg opacityStart:num
 * @text Starting Opacity
 * @type number
 * @min 0
 * @max 255
 * @desc What starting opacity value do you want for the motion
 * trail? Opacity values decrease over time.
 * @default 200
 *
 * @arg tone:eval
 * @text Tone
 * @desc What tone do you want for the motion trail?
 * Format: [Red, Green, Blue, Gray]
 * @default [0, 0, 0, 0]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_MotionTrailRemove
 * @text IMPACT: Motion Trail Remove
 * @desc Removes the motion trail effect from the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to clear motion trail effects for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Negative
 * @text IMPACT: Negative Inversion
 * @desc Inverts all the colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 *
 * @arg Enable:eval
 * @text Negative?
 * @type boolean
 * @on Enable / Negative
 * @off Disable / Normal
 * @desc Enable negative inversion effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_Oversaturate
 * @text IMPACT: Oversaturation
 * @desc Oversaturates colors on the battlefield.
 * Requires VisuMZ_3_ActSeqImpact!
 *
 * @arg Enable:eval
 * @text Oversaturate?
 * @type boolean
 * @on Enable / Oversaturate
 * @off Disable / Normal
 * @desc Enable Oversaturation effect?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwavePoint
 * @text IMPACT: Shockwave at Point
 * @desc Creates a shockwave at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to create a shockwave at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveEachTargets
 * @text IMPACT: Shockwave from Each Target(s)
 * @desc Creates a shockwave at each of the target(s) location(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ShockwaveCenterTargets
 * @text IMPACT: Shockwave from Target(s) Center
 * @desc Creates a shockwave from the center of the target(s).
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a shockwave from.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a shockwave from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the shockwave Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Amp:eval
 * @text Amplitude
 * @desc What is the aplitude of the shockwave effect?
 * @default 30
 * 
 * @arg Wave:eval
 * @text Wavelength
 * @desc What is the wavelength of the shockwave effect?
 * @default 160
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the shockwave?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeScale
 * @text IMPACT: Time Scale
 * @desc Adjust time to go faster or slower!
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc Adjusts how fast/slow time goes.
 * 1.00 is normal. Lower is slower. Higher is faster.
 * @default 1.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_TimeStop
 * @text IMPACT: Time Stop
 * @desc Stops time for a set amount of milliseconds.
 * Requires VisuMZ_3_ActSeqImpact! Created by Manu Gaming!
 * 
 * @arg ms:eval
 * @text Milliseconds
 * @desc How many milliseconds should time stop for?
 * 1000 milliseconds = 1 second.
 * @default 1000
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurPoint
 * @text IMPACT: Zoom Blur at Point
 * @desc Creates a zoom blur at the designated coordinates.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Coordinates
 * 
 * @arg X:eval
 * @text Point: X
 * @parent Coordinates
 * @desc What x coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @arg Y:eval
 * @text Point: Y
 * @parent Coordinates
 * @desc What y coordinate do you want to focus the zoom at?
 * You can use JavaScript code.
 * @default (Graphics.height - 200) / 2
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Impact_ZoomBlurTargetCenter
 * @text IMPACT: Zoom Blur at Target(s) Center
 * @desc Creates a zoom blur at the center of targets.
 * Requires VisuMZ_3_ActSeqImpact!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to start a zoom blur from.
 * @default ["user"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to start a zoom blur from.
 * @default middle center
 * 
 * @arg OffsetX:eval
 * @text Offset X
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur X point by.
 * Negative: left. Positive: right.
 * @default +0
 * 
 * @arg OffsetY:eval
 * @text Offset Y
 * @parent TargetLocation:str
 * @desc How much to offset the zoom blur Y point by.
 * Negative: up. Positive: down.
 * @default +0
 * 
 * @arg Strength:eval
 * @text Zoom Strength
 * @desc What is the strength of the zoom effect?
 * Use a number between 0 and 1.
 * @default 0.5
 * 
 * @arg Radius:eval
 * @text Visible Radius
 * @desc How much of a radius should be visible from the center?
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc What is the duration of the zoom blur?
 * @default 60
 *
 * @arg EasingType:str
 * @text Easing Type
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * @default OutSine
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMechanics
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMechanics
 * @text Action Sequences - Mechanics
 * @desc These Action Sequences are related to various mechanics
 * related to the battle system.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ActionEffect
 * @text MECH: Action Effect
 * @desc Causes the unit(s) to take damage/healing from action and
 * incurs any changes made such as buffs and states.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddBuffDebuff
 * @text MECH: Add Buff/Debuff
 * @desc Adds buff(s)/debuff(s) to unit(s). 
 * Determine which parameters are affected and their durations.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s) and/or debuff(s).
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to buff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["ATK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which parameter(s) to debuff.
 * Insert a parameter multiple times to raise its stacks.
 * @default ["DEF"]
 * 
 * @arg Turns:eval
 * @text Turns
 * @desc Number of turns to set the parameter(s) buffs to.
 * You may use JavaScript code.
 * @default 5
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AddState
 * @text MECH: Add State
 * @desc Adds state(s) to unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the buff(s).
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to add to unit(s).
 * Insert multiple state ID's to add multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AnalyzeWeakness
 * @text MECH: Analyze Weakness
 * @desc Reveal elemental weakness(es) from target(s).
 * Requires VisuMZ_3_WeaknessDisplay!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reveal elemental weaknesses for.
 * @default ["all targets"]
 * 
 * @arg Reveal:eval
 * @text Reveal
 * @desc How many elemental weaknesses do you wish to reveal?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_ArmorPenetration
 * @text MECH: Armor Penetration
 * @desc Adds an extra layer of defensive penetration/reduction.
 * You may use JavaScript code for any of these.
 *
 * @arg ArmorPenetration
 * @text Armor/Magic Penetration
 * 
 * @arg ArPenRate:eval
 * @text Rate
 * @parent ArmorPenetration
 * @desc Penetrates an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArPenFlat:eval
 * @text Flat
 * @parent ArmorPenetration
 * @desc Penetrates a flat amount of armor by this value.
 * @default 0
 *
 * @arg ArmorReduction
 * @text Armor/Magic Reduction
 * 
 * @arg ArRedRate:eval
 * @text Rate
 * @parent ArmorReduction
 * @desc Reduces an extra multiplier of armor by this value.
 * @default 0.00
 * 
 * @arg ArRedFlat:eval
 * @text Flat
 * @parent ArmorReduction
 * @desc Reduces a flat amount of armor by this value.
 * @default 0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_AtbGauge
 * @text MECH: ATB Gauge
 * @desc Alters the ATB/TPB Gauges.
 * Requires VisuMZ_2_BattleSystemATB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 *
 * @arg Charging
 * 
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the ATB Gauge if it is currently charging.
 * @default -0.00
 * 
 * @arg Casting
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the ATB Gauge if it is currently casting.
 * @default -0.00
 * 
 * @arg Interrupt:eval
 * @text Interrupt?
 * @parent Casting
 * @type boolean
 * @on Interrupt
 * @off Don't Interrupt
 * @desc Interrupt the ATB Gauge if it is currently casting?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsChange
 * @text MECH: Boost Points Change
 * @desc Changes Boost Points for target(s).
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Boost Points for.
 * @default ["user"]
 * 
 * @arg BoostPoints:eval
 * @text Alter Boost Points By
 * @desc Alters the unit(s) Boost Points.
 * Positive for gaining points. Negative for losing points.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BoostPointsStoreData
 * @text MECH: Boost Store Data
 * @desc Stores the number of Boosts used this action inside a variable.
 * Requires VisuMZ_3_BoostAction!
 * 
 * @arg VariableID:num
 * @text Variable ID
 * @type variable
 * @desc Which variable do you want to store the data inside?
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldChange
 * @text MECH: Break Shield Change
 * @desc Changes Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the Break Shields for.
 * @default ["all targets"]
 * 
 * @arg BreakShields:eval
 * @text Alter Break Shields By
 * @desc Alters the unit(s) Break Shields.
 * Positive for gaining shields. Negative for losing shields.
 * @default -1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BreakShieldReset
 * @text MECH: Break Shield Reset
 * @desc Resets Break Shields for target(s) if not Break Stunned.
 * Requires VisuMZ_4_BreakShields!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to reset the Break Shields for.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_BtbGain
 * @text MECH: BTB Brave Points
 * @desc Alters the target(s) Brave Points to an exact value.
 * Requires VisuMZ_2_BattleSystemBTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the ATB/TPB Gauges for.
 * @default ["all targets"]
 * 
 * @arg BravePoints:eval
 * @text Alter Brave Points By
 * @desc Alters the target(s) Brave Points.
 * Positive for gaining BP. Negative for losing BP.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Collapse
 * @text MECH: Collapse
 * @desc Causes the unit(s) to perform its collapse animation
 * if the unit(s) has died.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to process a death collapse.
 * @default ["all targets"]
 * 
 * @arg ForceDeath:eval
 * @text Force Death
 * @type boolean
 * @on On
 * @off Off
 * @desc Force death even if the unit has not reached 0 HP?
 * This will remove immortality.
 * @default false
 * 
 * @arg WaitForEffect:eval
 * @text Wait For Effect?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for the collapse effect to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbOrder
 * @text MECH: CTB Order
 * @desc Alters the CTB Turn Order.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg ChangeOrderBy:eval
 * @text Change Order By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CtbSpeed
 * @text MECH: CTB Speed
 * @desc Alters the CTB Speed.
 * Requires VisuMZ_2_BattleSystemCTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the CTB Speed for.
 * @default ["all targets"]
 *
 * @arg ChargeRate:eval
 * @text Charge Rate
 * @parent Charging
 * @desc Changes made to the CTB Speed if it is currently charging.
 * @default -0.00
 * 
 * @arg CastRate:eval
 * @text Cast Rate
 * @parent Casting
 * @desc Changes made to the CTB Speed if it is currently casting.
 * @default -0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_CustomDmgFormula
 * @text MECH: Custom Damage Formula
 * @desc Changes the current action's damage formula to custom.
 * This will assume the MANUAL damage style.
 * 
 * @arg Formula:str
 * @text Formula
 * @desc Changes the current action's damage formula to custom.
 * Use 'default' to revert the damage formula.
 * @default default
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DamagePopup
 * @text MECH: Damage Popup
 * @desc Causes the unit(s) to display the current state of
 * damage received or healed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a damage popup.
 * @default ["all targets"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_DeathBreak
 * @text MECH: Dead Label Jump
 * @desc If the active battler is dead, jump to a specific label in the common event.
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If the active battler is dead, jump to this specific label in the common event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EnemyEscape
 * @text MECH: Enemy Escape
 * @desc Causes the enemy unit(s) to escape.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to escape.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_EtbAction
 * @text MECH: ETB Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Requires VisuMZ_2_BattleSystemETB!
 * 
 * @arg ActionCount:eval
 * @text Energy Count
 * @desc Alters the subject team's available Energy Count.
 * Positive for gaining energy. Negative for losing energy.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_FtbAction
 * @text MECH: FTB Action Count
 * @desc Alters the subject team's available Action Count.
 * Requires VisuMZ_2_BattleSystemFTB!
 * 
 * @arg ActionCount:eval
 * @text Action Count
 * @desc Alters the subject team's available Action Count.
 * Positive for gaining actions. Negative for losing actions.
 * @default +1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_HpMpTp
 * @text MECH: HP, MP, TP
 * @desc Alters the HP, MP, and TP values for unit(s).
 * Positive values for healing. Negative values for damage.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to receive the current action's effects.
 * @default ["user"]
 *
 * @arg HP
 * 
 * @arg HP_Rate:eval
 * @text HP Rate
 * @parent HP
 * @desc Changes made to HP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg HP_Flat:eval
 * @text HP Flat
 * @parent HP
 * @desc Flat changes made to HP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg MP
 * 
 * @arg MP_Rate:eval
 * @text MP Rate
 * @parent MP
 * @desc Changes made to MP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg MP_Flat:eval
 * @text MP Flat
 * @parent MP
 * @desc Flat changes made to MP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 *
 * @arg TP
 * 
 * @arg TP_Rate:eval
 * @text TP Rate
 * @parent TP
 * @desc Changes made to TP based on rate.
 * Positive values for healing. Negative values for damage.
 * @default +0.00
 * 
 * @arg TP_Flat:eval
 * @text TP Flat
 * @parent TP
 * @desc Flat changes made to TP.
 * Positive values for healing. Negative values for damage.
 * @default +0
 * 
 * @arg ShowPopup:eval
 * @text Damage Popup?
 * @type boolean
 * @on On
 * @off Off
 * @desc Display a damage popup after?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Immortal
 * @text MECH: Immortal
 * @desc Changes the immortal flag of targets. If immortal flag is
 * removed and a unit would die, collapse that unit.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Alter the immortal flag of these groups. If immortal flag
 * is removed and a unit would die, collapse that unit.
 * @default ["user","all targets"]
 * 
 * @arg Immortal:eval
 * @text Immortal
 * @type boolean
 * @on On
 * @off Off
 * @desc Turn immortal flag for unit(s) on/off?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_Multipliers
 * @text MECH: Multipliers
 * @desc Changes the multipliers for the current action.
 * You may use JavaScript code for any of these.
 *
 * @arg CriticalHit
 * @text Critical Hit%
 * 
 * @arg CriticalHitRate:eval
 * @text Rate
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalHitFlat:eval
 * @text Flat
 * @parent CriticalHit
 * @desc Affects chance to land a critical hit by this flat bonus.
 * @default +0.00
 *
 * @arg CriticalDmg
 * @text Critical Damage
 * 
 * @arg CriticalDmgRate:eval
 * @text Rate
 * @parent CriticalDmg
 * @desc Affects critical damage by this multiplier.
 * @default 1.00
 * 
 * @arg CriticalDmgFlat:eval
 * @text Flat
 * @parent CriticalDmg
 * @desc Affects critical damage by this flat bonus.
 * @default +0.00
 *
 * @arg Damage
 * @text Damage/Healing
 * 
 * @arg DamageRate:eval
 * @text Rate
 * @parent Damage
 * @desc Sets the damage/healing multiplier for current action.
 * @default 1.00
 * 
 * @arg DamageFlat:eval
 * @text Flat
 * @parent Damage
 * @desc Sets the damage/healing bonus for current action.
 * @default +0.00
 *
 * @arg HitRate
 * @text Hit Rate
 * 
 * @arg HitRate:eval
 * @text Rate
 * @parent HitRate
 * @desc Affects chance to connect attack by this multiplier.
 * @default 1.00
 * 
 * @arg HitFlat:eval
 * @text Flat
 * @parent HitRate
 * @desc Affects chance to connect attack by this flat bonus.
 * @default +0.00
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OnceParallel
 * @text MECH: Once Parallel
 * @desc Plays a Common Event parallel to the battle event once
 * without repeating itself when done.
 *
 * @arg CommonEventID:num
 * @text Common Event ID
 * @type common_event
 * @desc The ID of the parallel Common Event to play.
 * Does NOT repeat itself when finished.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_OtbOrder
 * @text MECH: OTB Order
 * @desc Alters the OTB Turn Order. Best used with single targets.
 * Requires VisuMZ_2_BattleSystemOTB!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to alter the OTB Turn Order for.
 * @default ["all targets"]
 *
 * @arg CurrentTurn:eval
 * @text Current Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @arg NextTurn:eval
 * @text Next Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +1
 *
 * @arg FollowTurn:eval
 * @text Follow Turn By
 * @parent Charging
 * @desc Changes turn order for target(s) by this amount.
 * Positive increases wait. Negative decreases wait.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbAlterCost
 * @text MECH: PTB Alter Cost
 * @desc Alters the action's cost settings.
 * Requires VisuMZ_2_BattleSystemPTB!
 *
 * @arg Override:eval
 * @text Override?
 * @type boolean
 * @on Override Permanent
 * @off Require Temporary
 * @desc Overrides any 'permanent' settings for Changeability?
 * @default false
 *
 * @arg alterChange:str
 * @text Alter Changeability
 * @type select
 * @option Unchanged - Cost type is unchanged after this effect
 * @value unchanged
 * @option Permanent - Cost type can no longer be changed after
 * @value permanent
 * @option Temporary - Cost type can still be changed after
 * @value temporary
 * @desc Allow the cost type and value to be changeable?
 * @default unchanged
 *
 * @arg alterType:str
 * @text Alter Cost Type
 * @type select
 * @option Unchanged - No changes are made
 * @value unchanged
 * @option Consume - Removes half, otherwise consumes full
 * @value consume
 * @option Convert - Converts full => half, otherwise consumes half
 * @value convert
 * @option Compress - Consumes half, otherwise converts full => half
 * @value compress
 * @desc Change the cost type to this scenario.
 * Use 'Unchanged' for no changes.
 * @default convert
 *
 * @arg alterCost:eval
 * @text Alter Cost Value
 * @desc What is the default action cost for this scenario?
 * @default +0
 *
 * @arg alterPriority:eval
 * @text Priority
 * @desc What is this scenario's priority? Scenario outcomes with
 * equal or lower priorities cannot override types and costs.
 * @default 50
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbConvert
 * @text MECH: PTB Conversion
 * @desc Converts full actions into half actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg ConvertCount:eval
 * @text Conversion Count
 * @desc Converts full actions into half actions.
 * If not enough, consume half actions.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_PtbFullHalfAction
 * @text MECH: PTB Full/Half Action(s)
 * @desc Alters the subject team's available Full/Half Actions.
 * Requires VisuMZ_2_BattleSystemPTB!
 * 
 * @arg FullActions:eval
 * @text Full Actions
 * @desc Alters the subject team's available Full Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 * 
 * @arg HalfActions:eval
 * @text Half Actions
 * @desc Alters the subject team's available Half Actions.
 * Positive for gaining. Negative for losing.
 * @default +0
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveBuffDebuff
 * @text MECH: Remove Buff/Debuff
 * @desc Removes buff(s)/debuff(s) from unit(s). 
 * Determine which parameters are removed.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have the buff(s) and/or debuff(s) removed.
 * @default ["user"]
 * 
 * @arg Buffs:arraystr
 * @text Buff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which buffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @arg Debuffs:arraystr
 * @text Debuff Parameters
 * @type combo[]
 * @option MaxHP
 * @option MaxMP
 * @option ATK
 * @option DEF
 * @option MAT
 * @option MDF
 * @option AGI
 * @option LUK
 * @desc Select which debuffed parameter(s) to remove.
 * @default ["MaxHP","MaxMP","ATK","DEF","MAT","MDF","AGI","LUK"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_RemoveState
 * @text MECH: Remove State
 * @desc Remove state(s) from unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to have states removed from.
 * @default ["user"]
 * 
 * @arg States:arraynum
 * @text States
 * @type state[]
 * @desc Select which state ID(s) to remove from unit(s).
 * Insert multiple state ID's to remove multiple at once.
 * @default ["4"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExploit
 * @text MECH: STB Exploit Effect
 * @desc Utilize the STB Exploitation mechanics!
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Exploited:eval
 * @text Target(s) Exploited?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Exploit the below targets?
 * @default true
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to become exploited.
 * @default ["all targets"]
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploited status?
 * @default false
 * 
 * @arg Exploiter:eval
 * @text User Exploiter?
 * @type boolean
 * @on Exploit
 * @off Don't
 * @desc Allow the user to become the exploiter?
 * @default true
 * 
 * @arg ForceExploited:eval
 * @text Force Exploitation
 * @type boolean
 * @on Force
 * @off Don't
 * @desc Force the exploiter status?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbExtraAction
 * @text MECH: STB Extra Action
 * @desc Adds an extra action for the currently active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Extra Actions
 * @parent Charging
 * @desc How many extra actions should the active battler gain?
 * You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_StbRemoveExcessActions
 * @text MECH: STB Remove Excess Actions
 * @desc Removes excess actions from the active battler.
 * Requires VisuMZ_2_BattleSystemSTB!
 * 
 * @arg Actions:eval
 * @text Remove Actions
 * @parent Charging
 * @desc How many actions to remove from the active battler?
 * You may use JavaScript code.
 * @default 99
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_SwapWeapon
 * @text MECH: Swap Weapon
 * @desc Causes the unit(s) to swap their weapon for another.
 * Requires VisuMZ_2_WeaponSwapSystem!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to swap weapons for.
 * @default ["user"]
 * 
 * @arg WeaponTypeID:eval
 * @text Weapon Type ID
 * @desc Which weapon type to swap to?
 * This is NOT the weapon's ID. It's the weapon TYPE.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_TextPopup
 * @text MECH: Text Popup
 * @desc Causes the unit(s) to display a text popup.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Text:str
 * @text Text
 * @desc What text do you wish to display?
 * @default Text
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Text:str
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_VariablePopup
 * @text MECH: Variable Popup
 * @desc Causes the unit(s) to display a popup using the data
 * stored inside a variable.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select unit(s) to prompt a text popup.
 * @default ["target"]
 * 
 * @arg Variable:num
 * @text Variable ID
 * @type variable
 * @desc Get data from which variable to display as a popup?
 * @default 1
 * 
 * @arg DigitGrouping:eval
 * @text Digit Grouping
 * @parent Variable:num
 * @type boolean
 * @on Group Digits
 * @off Don't Group
 * @desc Use digit grouping to separate numbers?
 * Requires VisuMZ_0_CoreEngine!
 * @default true
 * 
 * @arg TextColor:str
 * @text Text Color
 * @parent Variable:num
 * @desc Use #rrggbb for custom colors or regular numbers
 * for text colors from the Window Skin.
 * @default #ffffff
 *
 * @arg FlashColor:eval
 * @text Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [0, 0, 0, 0]
 * 
 * @arg FlashDuration:num
 * @text Flash Duration
 * @parent FlashColor:eval
 * @type number
 * @desc What is the frame duration of the flash effect?
 * @default 60
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Mechanics_WaitForEffect
 * @text MECH: Wait For Effect
 * @desc Waits for the effects to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMotion
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMotion
 * @text Action Sequences - Motion
 * @desc These Action Sequences allow you the ability to control
 * the motions of sideview sprites.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_ClearFreezeFrame
 * @text MOTION: Clear Freeze Frame
 * @desc Clears any freeze frames from the unit(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to clear freeze frames for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_FreezeMotionFrame
 * @text MOTION: Freeze Motion Frame
 * @desc Forces a freeze frame instantly at the selected motion.
 * Automatically clears with a new motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to freeze motions for.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Freeze this motion for the unit(s).
 * @default attack
 * 
 * @arg Frame:num
 * @text Frame Index
 * @desc Which frame do you want to freeze the motion on?
 * Frame index values start at 0.
 * @default 2
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_MotionType
 * @text MOTION: Motion Type
 * @desc Causes the unit(s) to play the selected motion.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @arg MotionType:str
 * @text Motion Type
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option attack
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default attack
 *
 * @arg ShowWeapon:eval
 * @text Show Weapon?
 * @type combo
 * @type boolean
 * @on Show
 * @off Hide
 * @desc If using 'attack', 'thrust', 'swing', or 'missile',
 * display the weapon sprite?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_PerformAction
 * @text MOTION: Perform Action
 * @desc Causes the unit(s) to play the proper motion based
 * on the current action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to perform a motion.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_RefreshMotion
 * @text MOTION: Refresh Motion
 * @desc Cancels any set motions unit(s) has to do and use
 * their most natural motion at the moment.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to refresh their motion state.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Motion_WaitMotionFrame
 * @text MOTION: Wait By Motion Frame
 * @desc Creates a wait equal to the number of motion frames passing.
 * Time is based on Plugin Parameters => Actors => Motion Speed.
 *
 * @arg MotionFrameWait:num
 * @text Motion Frames to Wait?
 * @type number
 * @min 1
 * @desc Each "frame" is equal to the value found in
 * Plugin Parameters => Actors => Motion Speed
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceMovement
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakMovement
 * @text Action Sequences - Movement
 * @desc These Action Sequences allow you the ability to control
 * the sprites of actors and enemies in battle.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_BattleStep
 * @text MOVE: Battle Step
 * @desc Causes the unit(s) to move forward past their home position
 * to prepare for action.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveBy
 * @text MOVE: Change Home By Distance
 * @desc Change unit(s)'s home position by a distance from their
 * current home position(s). Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to change by.
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to change home by.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToPoint
 * @text MOVE: Change Home To Point
 * @desc Change home position(s) to a target point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default center
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeMoveToTarget
 * @text MOVE: Change Home To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position(s) for.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change home position to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to change home position to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to change home by.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total change amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceDirection
 * @text MOVE: Face Direction
 * @desc Causes the unit(s) to face forward or backward.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Direction:str
 * @text Direction
 * @type combo
 * @option forward
 * @option backward
 * @option random
 * @desc Select which direction to face.
 * @default forward
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FacePoint
 * @text MOVE: Face Point
 * @desc Causes the unit(s) to face a point on the screen.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Point:str
 * @text Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the point instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_FaceTarget
 * @text MOVE: Face Target(s)
 * @desc Causes the unit(s) to face other targets on the screen.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (facing)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change direction.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for the turning unit(s) to face.
 * @default ["current target"]
 * 
 * @arg FaceAway:eval
 * @text Face Away From?
 * @type boolean
 * @on Turn Away
 * @off Face Directly
 * @desc Face away from the unit(s) instead?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Float
 * @text MOVE: Float
 * @desc Causes the unit(s) to float above the ground.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make float.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Vertical distance to float upward.
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total float amount.
 * @default 12
 *
 * @arg EasingType:str
 * @text Float Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForFloat:eval
 * @text Wait For Float?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for floating to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_HomeReset
 * @text MOVE: Home Reset
 * @desc Causes the unit(s) to move back to their home position(s)
 * and face back to their original direction(s).
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["alive battlers"]
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Jump
 * @text MOVE: Jump
 * @desc Causes the unit(s) to jump into the air.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to make jump.
 * @default ["user"]
 * 
 * @arg Height:eval
 * @text Desired Height
 * @desc Max jump height to go above the ground
 * You may use JavaScript code.
 * @default 100
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total jump amount.
 * @default 12
 * 
 * @arg WaitForJump:eval
 * @text Wait For Jump?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for jumping to complete before performing next command?
 * @default false
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveBy
 * @text MOVE: Move Distance
 * @desc Moves unit(s) by a distance from their current position(s).
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 *
 * @arg DistanceAdjust:str
 * @text Distance Adjustment
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to distance values to determine
 * which direction to move unit(s).
 * @default horz
 * 
 * @arg DistanceX:eval
 * @text Distance: X
 * @parent DistanceAdjust:str
 * @desc Horizontal distance to move.
 * You may use JavaScript code.
 * @default 48
 * 
 * @arg DistanceY:eval
 * @text Distance: Y
 * @parent DistanceAdjust:str
 * @desc Vertical distance to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToPoint
 * @text MOVE: Move To Point
 * @desc Moves unit(s) to a designated point on the screen.
 * Sideview-only! Points based off Graphics.boxWidth/Height.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Destination:str
 * @text Destination Point
 * @type combo
 * @option home
 * @option center
 * @option point x, y
 * @desc Select which point to face.
 * Replace 'x' and 'y' with coordinates
 * @default home
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Destination:str
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_MoveToTarget
 * @text MOVE: Move To Target(s)
 * @desc Moves unit(s) to another unit(s) on the battle field.
 * Sideview-only!
 * 
 * @arg Targets1:arraystr
 * @text Targets (Moving)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move.
 * @default ["user"]
 * 
 * @arg Targets2:arraystr
 * @text Targets (Destination)
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to move to.
 * @default ["all targets"]
 * 
 * @arg TargetLocation:str
 * @text Target Location
 * @parent Targets2:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part target group to move to.
 * @default front base
 * 
 * @arg MeleeDistance:eval
 * @text Melee Distance
 * @parent TargetLocation:str
 * @desc The melee distance away from the target location
 * in addition to the battler's width.
 * @default 24
 *
 * @arg OffsetAdjust:str
 * @text Offset Adjustment
 * @parent Targets2:arraystr
 * @type select
 * @option Normal - No adjustments made
 * @value none
 * @option Horizontal - Actors adjust left, Enemies adjust right
 * @value horz
 * @option Vertical - Actors adjust Up, Enemies adjust down
 * @value vert
 * @option Both - Applies both Horizontal and Vertical
 * @value horz + vert
 * @desc Makes adjustments to offset values to determine
 * which direction to adjust the destination by.
 * @default horz
 * 
 * @arg OffsetX:eval
 * @text Offset: X
 * @parent OffsetAdjust:str
 * @desc Horizontal offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg OffsetY:eval
 * @text Offset: Y
 * @parent OffsetAdjust:str
 * @desc Vertical offset to move.
 * You may use JavaScript code.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for total movement amount.
 * @default 12
 * 
 * @arg FaceDirection:eval
 * @text Face Destination?
 * @type boolean
 * @on Turn
 * @off Don't
 * @desc Turn and face the destination?
 * @default true
 *
 * @arg EasingType:str
 * @text Movement Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 *
 * @arg MotionType:str
 * @text Movement Motion
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Play this motion for the unit(s).
 * @default walk
 * 
 * @arg WaitForMovement:eval
 * @text Wait For Movement?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for movement to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Opacity
 * @text MOVE: Opacity
 * @desc Causes the unit(s) to change opacity.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change opacity.
 * @default ["user"]
 * 
 * @arg Opacity:eval
 * @text Desired Opacity
 * @desc Change to this opacity value.
 * You may use JavaScript code.
 * @default 255
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames for opacity change.
 * @default 12
 *
 * @arg EasingType:str
 * @text Opacity Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForOpacity:eval
 * @text Wait For Opacity?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for opacity changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Scale
 * @text MOVE: Scale/Grow/Shrink
 * @desc Causes the unit(s) to scale, grow, or shrink?.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to change the scale of.
 * @default ["user"]
 * 
 * @arg ScaleX:eval
 * @text Scale X
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg ScaleY:eval
 * @text Scale Y
 * @desc What target scale value do you want?
 * 1.0 is normal size.
 * @default 1.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to scale for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Scale Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForScale:eval
 * @text Wait For Scale?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for scaling to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Skew
 * @text MOVE: Skew/Distort
 * @desc Causes the unit(s) to skew.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to skew.
 * @default ["user"]
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc X variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Y variance to skew?
 * Use small values for the best results.
 * @default 0.00
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to skew for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_Spin
 * @text MOVE: Spin/Rotate
 * @desc Causes the unit(s) to spin.
 * Sideview-only!
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to spin.
 * @default ["user"]
 * 
 * @arg Angle:eval
 * @text Angle
 * @desc How many degrees to spin?
 * @default 360
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to spin for.
 * @default 12
 *
 * @arg EasingType:str
 * @text Spin Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default Linear
 * 
 * @arg RevertAngle:eval
 * @text Revert Angle on Finish
 * @type boolean
 * @on Revert
 * @off Don't
 * @desc Revert angle after spinning?
 * @default true
 * 
 * @arg WaitForSpin:eval
 * @text Wait For Spin?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for spin to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForFloat
 * @text MOVE: Wait For Float
 * @desc Waits for floating to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForJump
 * @text MOVE: Wait For Jump
 * @desc Waits for jumping to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForMovement
 * @text MOVE: Wait For Movement
 * @desc Waits for movement to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForOpacity
 * @text MOVE: Wait For Opacity
 * @desc Waits for opacity changes to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForScale
 * @text MOVE: Wait For Scale
 * @desc Waits for scaling to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSkew
 * @text MOVE: Wait For Skew
 * @desc Waits for skewing to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Movement_WaitForSpin
 * @text MOVE: Wait For Spin
 * @desc Waits for spinning to complete before performing next command.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceProjectile
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakProjectile
 * @text Action Sequences - Projectiles
 * @desc Create projectiles on the screen and fire them off at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Animation
 * @text PROJECTILE: Animation
 * @desc Create an animation projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg AnimationID:num
 * @text Animation ID
 * @parent Settings
 * @type animation
 * @desc Determine which animation to use as a projectile.
 * @default 77
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg WaitForAnimation:eval
 * @text Wait For Animation?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for animation to finish before going to the next command?
 * @default false
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExAni>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","EasingType:str":"Linear","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Icon
 * @text PROJECTILE: Icon
 * @desc Create an icon projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Icon:eval
 * @text Icon Index
 * @parent Settings
 * @desc Determine which icon to use as a projectile.
 * You may use JavaScript code.
 * @default 118
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Projectile_Picture
 * @text PROJECTILE: Picture
 * @desc Create a picture projectile and fire it at a target.
 * Requires VisuMZ_3_ActSeqProjectiles!
 * 
 * @arg Coordinates
 *
 * @arg Start:struct
 * @text Start Location
 * @parent Coordinates
 * @type struct<ProjectileStart>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"user\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 *
 * @arg Goal:struct
 * @text Goal Location
 * @parent Coordinates
 * @type struct<ProjectileGoal>
 * @desc Settings to determine where the projectile(s) start from.
 * @default {"Type:str":"target","Targets:arraystr":"[\"all targets\"]","TargetCenter:eval":"false","PointX:eval":"Graphics.width / 2","PointY:eval":"Graphics.height / 2","OffsetX:eval":"+0","OffsetY:eval":"+0"}
 * 
 * @arg Settings
 *
 * @arg Picture:str
 * @text Picture Filename
 * @parent Settings
 * @type file
 * @dir img/pictures/
 * @desc Determine which picture to use as a projectile.
 * @default Untitled
 * 
 * @arg Duration:eval
 * @text Duration
 * @parent Settings
 * @desc Duration for the projectile(s) to travel.
 * @default 20
 * 
 * @arg WaitForProjectile:eval
 * @text Wait For Projectile?
 * @parent Settings
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for projectile(s) to reach their destination before
 * going onto the next command?
 * @default true
 * 
 * @arg Extra:struct
 * @text Extra Settings
 * @type struct<ProjectileExtra>
 * @desc Add extra settings to the projectile?
 * @default {"AutoAngle:eval":"true","AngleOffset:eval":"+0","Arc:eval":"0","BlendMode:num":"0","EasingType:str":"Linear","Hue:eval":"0","Scale:eval":"1.0","Spin:eval":"+0.0"}
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceSkew
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakSkew
 * @text Action Sequences - Skew
 * @desc Allows you to have control over the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_ChangeSkew
 * @text SKEW: Change Skew
 * @desc Changes the camera skew.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg SkewX:eval
 * @text Skew X
 * @desc Change the camera skew X to this value.
 * @default 0
 * 
 * @arg SkewY:eval
 * @text Skew Y
 * @desc Change the camera skew Y to this value.
 * @default 0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_Reset
 * @text SKEW: Reset Skew
 * @desc Reset any skew settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset camera skew.
 * @default 60
 *
 * @arg EasingType:str
 * @text Skew Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForSkew:eval
 * @text Wait For Skew?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for skew changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Skew_WaitForSkew
 * @text SKEW: Wait For Skew
 * @desc Waits for skew changes to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceTarget
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakTarget
 * @text Action Sequences - Target
 * @desc If using a manual target by target Action Sequence,
 * these commands will give you full control over its usage.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_CurrentIndex
 * @text TARGET: Current Index
 * @desc Sets the current index to this value.
 * Then decide to jump to a label (optional).
 * 
 * @arg Index:eval
 * @text Set Index To
 * @desc Sets current targeting index to this value.
 * 0 is the starting index of a target group.
 * @default 0
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_NextTarget
 * @text TARGET: Next Target
 * @desc Moves index forward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_PrevTarget
 * @text TARGET: Previous Target
 * @desc Moves index backward by 1 to select a new current target.
 * Then decide to jump to a label (optional).
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Target_RandTarget
 * @text TARGET: Random Target
 * @desc Sets index randomly to determine new currernt target.
 * Then decide to jump to a label (optional).
 * 
 * @arg ForceRandom:eval
 * @text Force Random?
 * @type boolean
 * @on On
 * @off Off
 * @desc Index cannot be its previous index amount after random.
 * @default false
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a target is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceWeapon
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakWeapon
 * @text Action Sequences - Weapon
 * @desc Allows for finer control over Dual/Multi Wielding actors.
 * Only works for Actors.
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_ClearActiveWeapon
 * @text WEAPON: Clear Weapon Slot
 * @desc Clears the active weapon slot (making others valid again).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to clear the active weapon slot for.
 * @default ["user"]
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_NextActiveWeapon
 * @text WEAPON: Next Weapon Slot
 * @desc Goes to next active weapon slot (making others invalid).
 * If next slot is weaponless, don't label jump.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the next active weapon slot for.
 * @default ["user"]
 * 
 * @arg JumpToLabel:str
 * @text Jump To Label
 * @desc If a weapon is found after the index change,
 * jump to this label in the Common Event.
 * @default Untitled
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Weapon_SetActiveWeapon
 * @text WEAPON: Set Weapon Slot
 * @desc Sets the active weapon slot (making others invalid).
 * Only works for Actors.
 * 
 * @arg Targets:arraystr
 * @text Targets
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @desc Select unit(s) to change the active weapon slot for.
 * @default ["user"]
 * 
 * @arg SlotID:eval
 * @text Weapon Slot ID
 * @desc Select weapon slot to make active (making others invalid).
 * Use 0 to clear and normalize. You may use JavaScript code.
 * @default 1
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceZoom
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceBreakZoom
 * @text Action Sequences - Zoom
 * @desc Allows you to have control over the screen zoom.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Scale
 * @text ZOOM: Change Scale
 * @desc Changes the zoom scale.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Scale:eval
 * @text Scale
 * @desc The zoom scale to change to.
 * @default 1.0
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to change battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_Reset
 * @text ZOOM: Reset Zoom
 * @desc Reset any zoom settings.
 * Requires VisuMZ_3_ActSeqCamera!
 * 
 * @arg Duration:eval
 * @text Duration
 * @desc Duration in frames to reset battle zoom.
 * @default 60
 *
 * @arg EasingType:str
 * @text Zoom Easing
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type you wish to apply.
 * Requires VisuMZ_0_CoreEngine.
 * @default InOutSine
 * 
 * @arg WaitForZoom:eval
 * @text Wait For Zoom?
 * @type boolean
 * @on On
 * @off Off
 * @desc Wait for zoom changes to complete before performing next command?
 * @default true
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActSeq_Zoom_WaitForZoom
 * @text ZOOM: Wait For Zoom
 * @desc Waits for zoom to complete before performing next command.
 * Requires VisuMZ_3_ActSeqCamera!
 *
 * @ --------------------------------------------------------------------------
 *
 * @command ActionSequenceSpaceEnd
 * @text -
 * @desc -
 *
 * @ --------------------------------------------------------------------------
 *
 * @ ==========================================================================
 * @ Plugin Parameters
 * @ ==========================================================================
 *
 * @param BreakHead
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleCore
 * @default Plugin Parameters
 *
 * @param ATTENTION
 * @default READ THE HELP FILE
 *
 * @param BreakSettings
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param AutoBattle:struct
 * @text Auto Battle Settings
 * @type struct<AutoBattle>
 * @desc Settings pertaining to Auto Battle.
 * @default {"BattleDisplay":"","AutoBattleMsg:str":"Press %1 or %2 to stop Auto Battle","AutoBattleOK:str":"OK","AutoBattleCancel:str":"Cancel","AutoBattleBgType:num":"1","AutoBattleRect:func":"\"const width = Graphics.width;\\nconst height = this.calcWindowHeight(1, false);\\nconst x = 0;\\nconst y = (Graphics.height - height) / 2;\\nreturn new Rectangle(x, y, width, height);\"","Options":"","AddOption:eval":"true","AdjustRect:eval":"true","StartName:str":"Auto Battle Start","StyleName:str":"Auto Battle Style","StyleOFF:str":"Attack","StyleON:str":"Skills"}
 *
 * @param Damage:struct
 * @text Damage Settings
 * @type struct<Damage>
 * @desc Settings pertaining to damage calculations.
 * @default {"DamageStyles":"","DefaultDamageStyle:str":"Standard","DamageStyleList:arraystruct":"[\"{\\\"Name:str\\\":\\\"Standard\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"Armor Scaling\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Declare Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Replace Formula\\\\\\\\nlet formula = item.damage.formula;\\\\\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = Math.max(eval(formula), 0);\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"return this.getItemDamageAmountTextOriginal();\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"CT\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\\\\\nvalue = attackStat * 4;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"D4\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nlet stat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n    armor = 0;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n    armor = 0;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"DQ\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Get Primary Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Check for Recovery\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    let value = stat * multiplier * sign;\\\\\\\\n    return isNaN(value) ? 0 : value;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nlet value = 0;\\\\\\\\nif (stat < ((2 + armor) / 2)) {\\\\\\\\n    // Plink Damage\\\\\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\\\\\n    value = baseline / 3;\\\\\\\\n} else {\\\\\\\\n    // Normal Damage\\\\\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\\\\\n    value = baseline / 2;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF7\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare base Damage\\\\\\\\nlet baseDamage = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    baseDamage = 6 * (a.mat + level);\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.def + level);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    baseDamage = 6 * (a.mdf + level);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Final Damage\\\\\\\\nlet value = baseDamage;\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isRecover()) {\\\\\\\\n    value += 22 * power;\\\\\\\\n} else {\\\\\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF8\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Damage\\\\\\\\nlet Value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\\\\\n    value *= power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = a.mat + power;\\\\\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\\\\\n    value *= power / 256;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = (power + a.def) * power / 2;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = (power + a.mdf) * power / 2;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF9\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Main Stats\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(b, armor);\\\\\\\\nlet stat = 1;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    stat = a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    stat = a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    stat = a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Base Damage\\\\\\\\nlet baseDamage = power;\\\\\\\\nif (this.isPhysical()) {\\\\\\\\n    baseDamage += stat;\\\\\\\\n}\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    baseDamage -= armor;\\\\\\\\n    baseDamage = Math.max(1, baseDamage);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Declare Bonus Damage\\\\\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\\\\\n\\\\\\\\n// Declare Final Damage\\\\\\\\nlet value = baseDamage * bonusDamage * sign;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"FF10\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Constant\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\nif (this.isCertainHit()) {\\\\\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Create Damage Offense Value\\\\\\\\nlet value = power;\\\\\\\\n\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.def + power) / 2);\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = power * ((a.mdf + power) / 2);\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Damage Defense Value\\\\\\\\nif (this.isDamage() || this.isDrain()) {\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\\\\\n    armor = Math.max(armor, 1);\\\\\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\\\\\n} else if (this.isRecover()) {\\\\\\\\n    value *= -1;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MK\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Multiplier\\\\\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = this.applyArmorModifiers(target, armor);\\\\\\\\nconst denominator = Math.max(200 + armor, 1);\\\\\\\\n\\\\\\\\n// Calculate Damage \\\\\\\\nlet value = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.atk / denominator;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value = 200 * a.mat / denominator;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.def / 200;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value = 200 * a.mdf / 200;\\\\\\\\n}\\\\\\\\nvalue *= multiplier;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"MOBA\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Damage Value\\\\\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\\\\\n\\\\\\\\n// Apply Attacker's Offense Parameter\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    value *= a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    value *= a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    value *= a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Apply Defender's Defense Parameter\\\\\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\\\\\n\\\\\\\\n    // Calculate Base Armor\\\\\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\\\\\n\\\\\\\\n    // Apply Armor to Damage\\\\\\\\n    if (armor >= 0) {\\\\\\\\n        value *= 100 / (100 + armor);\\\\\\\\n    } else {\\\\\\\\n        value *= 2 - (100 / (100 - armor));\\\\\\\\n    }\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn isNaN(value) ? 0 : value;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Multiplier\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Multiplier\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Multiplier\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    const value = Math.max(eval(formula), 0);\\\\\\\\n    return '%1%'.format(Math.round(value * 100));\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\",\"{\\\"Name:str\\\":\\\"PKMN\\\",\\\"Formula:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst user = this.subject();\\\\\\\\nconst target = arguments[0];\\\\\\\\nconst item = this.item();\\\\\\\\nconst a = this.subject();\\\\\\\\nconst b = target;\\\\\\\\nconst v = $gameVariables._data;\\\\\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\\\\\n\\\\\\\\n// Create Power\\\\\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\\\\\n\\\\\\\\n// Declare Values\\\\\\\\nlet value = 0;\\\\\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\\\\\nlet attackStat = 0;\\\\\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat = a.atk;\\\\\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\\\\\n    attackStat =  a.mat;\\\\\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.def;\\\\\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\\\\\n    attackStat =  a.mdf;\\\\\\\\n}\\\\\\\\n\\\\\\\\n// Calculate Damage\\\\\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\\\\\"\\\",\\\"ItemsEquipsCore\\\":\\\"\\\",\\\"DamageType\\\":\\\"\\\",\\\"DamageType1:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType2:str\\\":\\\"%1 Damage Power\\\",\\\"DamageType3:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType4:str\\\":\\\"%1 Recovery Power\\\",\\\"DamageType5:str\\\":\\\"%1 Drain Power\\\",\\\"DamageType6:str\\\":\\\"%1 Drain Power\\\",\\\"DamageDisplay:func\\\":\\\"\\\\\\\"// Define Constants\\\\\\\\nconst item = this._item;\\\\\\\\nconst formula = item.damage.formula;\\\\\\\\nconst a = this._tempActorA;\\\\\\\\nconst b = this._tempActorB;\\\\\\\\nconst user = a;\\\\\\\\nconst target = b;\\\\\\\\n\\\\\\\\n// Return Value\\\\\\\\ntry {\\\\\\\\n    return formula;\\\\\\\\n} catch (e) {\\\\\\\\n    if ($gameTemp.isPlaytest()) {\\\\\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\\\\\n    }\\\\\\\\n    return '?????';\\\\\\\\n}\\\\\\\"\\\"}\"]","Cap":"","EnableDamageCap:eval":"false","DefaultHardCap:num":"9999","EnableSoftCap:eval":"false","DefaultSoftCap:num":"0.80","DefaultSoftScaler:num":"0.1275","Popups":"","PopupDuration:num":"128","NewPopupBottom:eval":"true","PopupPosition:str":"base","PopupOffsetX:num":"0","PopupOffsetY:num":"0","PopupShiftX:num":"8","PopupShiftY:num":"-28","hpDamageFmt:str":"-%1","hpHealingFmt:str":"+%1","mpDamageFmt:str":"-%1 %2","mpHealingFmt:str":"+%1 %2","CriticalColor:eval":"[255, 0, 0, 160]","CriticalDuration:num":"128","Formulas":"","OverallFormulaJS:func":"\"// Declare Constants\\nconst target = arguments[0];\\nconst critical = arguments[1];\\nconst item = this.item();\\n\\n// Get Base Damage\\nconst baseValue = this.evalDamageFormula(target);\\n\\n// Calculate Element Modifiers\\nlet value = baseValue * this.calcElementRate(target);\\n\\n// Calculate Physical and Magical Modifiers\\nif (this.isPhysical()) {\\n    value *= target.pdr;\\n}\\nif (this.isMagical()) {\\n    value *= target.mdr;\\n}\\n\\n// Apply Healing Modifiers\\nif (baseValue < 0) {\\n    value *= target.rec;\\n}\\n\\n// Apply Critical Modifiers\\nif (critical) {\\n    value = this.applyCritical(value);\\n}\\n\\n// Apply Variance and Guard Modifiers\\nvalue = this.applyVariance(value, item.damage.variance);\\nvalue = this.applyGuard(value, target);\\n\\n// Finalize Damage\\nvalue = Math.round(value);\\nreturn value;\"","VarianceFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst variance = arguments[1];\\n\\n// Calculate Variance\\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\\n\\n// Return Damage\\nreturn damage >= 0 ? damage + v : damage - v;\"","GuardFormulaJS:func":"\"// Declare Constants\\nconst damage = arguments[0];\\nconst target = arguments[1];\\n\\n// Return Damage Early\\nconst note = this.item().note;\\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\\nif (!target.isGuard()) return damage;\\nif (damage < 0) return damage;\\n\\n// Declare Guard Rate\\nlet guardRate = 0.5;\\nguardRate /= target.grd;\\n\\n// Return Damage\\nreturn damage * guardRate;\"","Critical":"","CriticalHitRateJS:func":"\"// Declare Constants\\nconst user = this.subject();\\nconst target = arguments[0];\\n\\n// Create Base Critical Rate\\nlet rate = this.subject().cri * (1 - target.cev);\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<ALWAYS CRITICAL>/i)) {\\n    return 1;\\n}\\nif (note.match(/<SET CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    return Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\\\d+)([%％])>/i)) {\\n    rate *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    rate += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL RATE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL RATE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Apply LUK Buffs/Debuffs\\nconst lukStack = this.subject().buff(7);\\nrate *= 2 ** lukStack;\\n\\n// Return Rate\\nreturn rate;\"","CriticalHitMultiplier:func":"\"// Declare Constants\\nconst user = this.subject();\\nlet damage = arguments[0];\\nlet multiplier = 2.0;\\nlet bonusDamage = this.subject().luk * this.subject().cri;\\nif (this.isHpRecover() || this.isMpRecover()) {\\n    bonusDamage *= -1;\\n}\\n\\n// Apply Notetags\\nconst note = this.item().note;\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\\\d+)([%％])>/i)) {\\n    multiplier = Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    multiplier += Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\\\d+)([%％])>/i)) {\\n    bonusDamage *= Number(RegExp.$1) / 100;\\n}\\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\\\+\\\\-]\\\\d+)([%％])>/i)) {\\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\\n}\\nif (note.match(/<JS CRITICAL DAMAGE>\\\\s*([\\\\s\\\\S]*)\\\\s*<\\\\/JS CRITICAL DAMAGE>/i)) {\\n    const code = String(RegExp.$1);\\n    try {\\n        eval(code);\\n    } catch (e) {\\n        if ($gameTemp.isPlaytest()) console.log(e);\\n    }\\n}\\n\\n// Return Damage\\nreturn damage * multiplier + bonusDamage;\""}
 *
 * @param Mechanics:struct
 * @text Mechanics Settings
 * @type struct<Mechanics>
 * @desc Settings pertaining to various game mechanics.
 * @default {"ActionSpeed":"","AllowRandomSpeed:eval":"false","CalcActionSpeedJS:func":"\"// Declare Constants\\nconst agi = this.subject().agi;\\n\\n// Create Speed\\nlet speed = agi;\\nif (this.allowRandomSpeed()) {\\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\\n}\\nif (this.item()) {\\n    speed += this.item().speed;\\n}\\nif (this.isAttack()) {\\n    speed += this.subject().attackSpeed();\\n}\\n\\n// Return Speed\\nreturn speed;\"","BaseTroop":"","BaseTroopIDs:arraynum":"[\"1\"]","CommonEvents":"","BattleStartEvent:num":"0","BattleEndEvent:num":"0","VictoryEvent:num":"0","DefeatEvent:num":"0","EscapeSuccessEvent:num":"0","EscapeFailEvent:num":"0","Escape":"","CalcEscapeRatioJS:func":"\"// Calculate Escape Ratio\\nlet ratio = 0.5;\\nratio *= $gameParty.agility();\\nratio /= $gameTroop.agility();\\n\\n// Return Ratio\\nreturn ratio;\"","CalcEscapeRaiseJS:func":"\"// Calculate Escape Ratio\\nlet value = 0.1;\\nvalue += $gameParty.aliveMembers().length;\\n\\n// Return Value\\nreturn value;\"","BattleJS":"","PreStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleVictoryJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeSuccessJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","EscapeFailureJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","BattleDefeatJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndBattleJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","TurnJS":"","PreStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostStartTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostEndTurnJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PreRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","PostRegenerateJS:func":"\"// Declare Constants\\nconst user = this;\\nconst target = user;\\nconst a = user;\\nconst b = user;\\n\\n// Perform Actions\\n\"","ActionJS":"","PreStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostStartActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PreApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostDamageJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PostApplyJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst target = arguments[1];\\nconst user = this.subject();\\nconst a = user;\\nconst b = target;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\\n// Return Value\\nreturn value;\"","PreEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\"","PostEndActionJS:func":"\"// Declare Constants\\nconst value = arguments[0];\\nconst user = this.subject();\\nconst target = user;\\nconst a = user;\\nconst b = user;\\nconst action = this;\\nconst item = this.item();\\nconst skill = this.item();\\n\\n// Perform Actions\\n\""}
 *
 * @param CmdWindows
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param BattleLayout:struct
 * @text Battle Layout Settings
 * @type struct<BattleLayout>
 * @desc Settings that adjust how the battle layout appears.
 * @default {"Style:str":"default","ListStyle":"","ShowFacesListStyle:eval":"true","CommandWidth:num":"192","XPStyle":"","XPActorCommandLines:num":"4","XPActorDefaultHeight:num":"64","XPSpriteYLocation:str":"name","PotraitStyle":"","ShowPortraits:eval":"true","PortraitScale:num":"0.5","BorderStyle":"","SkillItemBorderCols:num":"1","ShowPortraitsBorderStyle:eval":"true","PortraitScaleBorderStyle:num":"1.25","SkillItemWindows":"","SkillItemMiddleLayout:eval":"false","SkillItemStandardCols:num":"2"}
 *
 * @param BattleLog:struct
 * @text Battle Log Settings
 * @type struct<BattleLog>
 * @desc Settings that adjust how Window_BattleLog behaves.
 * @default {"General":"","BackColor:str":"#000000","MaxLines:num":"10","MessageWait:num":"16","TextAlign:str":"center","BattleLogRectJS:func":"\"const wx = 0;\\nconst wy = 0;\\nconst ww = Graphics.boxWidth;\\nconst wh = this.calcWindowHeight(10, false);\\nreturn new Rectangle(wx, wy, ww, wh);\"","StartTurn":"","StartTurnShow:eval":"true","StartTurnMsg:str":"Turn %1","StartTurnWait:num":"40","DisplayAction":"","ActionCenteredName:eval":"true","ActionSkillMsg1:eval":"false","ActionSkillMsg2:eval":"true","ActionItemMsg:eval":"false","ActionChanges":"","ShowCounter:eval":"true","ShowReflect:eval":"true","ShowSubstitute:eval":"true","ActionResults":"","ShowFailure:eval":"false","ShowCritical:eval":"false","ShowMissEvasion:eval":"false","ShowHpDmg:eval":"false","ShowMpDmg:eval":"false","ShowTpDmg:eval":"false","DisplayStates":"","ShowAddedState:eval":"false","ShowRemovedState:eval":"false","ShowCurrentState:eval":"false","ShowAddedBuff:eval":"false","ShowAddedDebuff:eval":"false","ShowRemovedBuff:eval":"false"}
 *
 * @param Battleback:struct
 * @text Battleback Scaling
 * @type struct<Battleback>
 * @desc Settings that adjust how battlebacks scale.
 * @default {"DefaultStyle:str":"MZ","jsOneForOne:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst scale = 1.0;\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = 0;\\nthis.y = 0;\"","jsScaleToFit:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = this.width / this.bitmap.width;\\nconst ratioY = this.height / this.bitmap.height;\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScaleDown:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\"","jsScale Up:func":"\"// Adjust Size\\nthis.width = Graphics.width;\\nthis.height = Graphics.height;\\n\\n// Adjust Scale\\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\\nconst scale = Math.max(ratioX, ratioY);\\nthis.scale.x = scale;\\nthis.scale.y = scale;\\n\\n// Adjust Coordinates\\nthis.x = (Graphics.width - this.width) / 2;\\nthis.y = Graphics.height - this.height;\""}
 *
 * @param PartyCmd:struct
 * @text Party Command Window
 * @type struct<PartyCmd>
 * @desc Settings that alter the Party Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconFight:num":"76","CommandAddAutoBattle:eval":"true","CmdIconAutoBattle:num":"78","CmdTextAutoBattle:str":"Auto","CommandAddOptions:eval":"true","CmdIconOptions:num":"83","ActiveTpbOptionsMessage:str":"Options Menu queued after action is complete.","CmdIconEscape:num":"82","Access":"","SkipPartyCmd:eval":"true","DisablePartyCmd:eval":"false","HelpWindow":"","HelpFight:str":"Select actions to fight.","HelpAutoBattle:str":"Sets party to Auto Battle mode.","HelpOptions:str":"Opens up the Options Menu.","HelpEscape:str":"Attempt to escape the battle."}
 *
 * @param ActorCmd:struct
 * @text Actor Command Window
 * @type struct<ActorCmd>
 * @desc Settings that alter the Actor Command Window in battle.
 * @default {"Cmd":"","CmdStyle:str":"auto","CmdTextAlign:str":"left","CmdIconItem:num":"176","IconStypeNorm:num":"78","IconStypeMagic:num":"79","BattleCmd":"","BattleCmdList:arraystr":"[\"attack\",\"skills\",\"guard\",\"item\",\"escape\"]","HelpWindow":"","HelpSkillType:str":"Opens up a list of skills under the \\C[16]%1\\C[0] category.","HelpItem:str":"Opens up a list of items that you can use.","HelpEscape:str":"Attempt to escape the battle.","HelpAutoBattle:str":"Automatically choose an action suitable for combat."}
 *
 * @param VisualBreak
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param Actor:struct
 * @text Actor Battler Settings
 * @type struct<Actor>
 * @desc Settings that alter various properties for actors.
 * @default {"Flinch":"","FlinchDistanceX:num":"12","FlinchDistanceY:num":"0","FlinchDuration:num":"6","SvBattlers":"","AnchorX:num":"0.5","AnchorY:num":"1.0","ChantStyle:eval":"true","OffsetX:num":"0","OffsetY:num":"0","MotionSpeed:num":"12","PrioritySortActive:eval":"true","PrioritySortActors:eval":"false","Shadow:eval":"true","SmoothImage:eval":"true","HomePosJS:func":"\"// Declare Constants\\nconst sprite = this;\\nconst actor = this._actor;\\nconst index = arguments[0];\\n\\n// Make Calculations\\nlet x = Math.round((Graphics.width / 2) + 192)\\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\\nx += index * 32;\\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\\ny += index * 48;\\n\\n// Home Position Offsets\\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\\\+\\\\-]\\\\d+),[ ]([\\\\+\\\\-]\\\\d+)>/i;\\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\\nx = xOffsets.reduce((r, offset) => r + offset, x);\\ny = yOffsets.reduce((r, offset) => r + offset, y);\\n\\n// Set Home Position\\nthis.setHome(x, y);\""}
 *
 * @param Enemy:struct
 * @text Enemy Battler Settings
 * @type struct<Enemy>
 * @desc Settings that alter various properties for enemies.
 * @default {"Visual":"","AttackAnimation:num":"1","EmergeText:eval":"false","OffsetX:num":"0","OffsetY:num":"0","SmoothImage:eval":"true","SelectWindow":"","FrontViewSelect:eval":"false","SideviewSelect:eval":"true","NameFontSize:num":"22","SvBattlers":"","AllowCollapse:eval":"false","AnchorX:num":"0.5","AnchorY:num":"1.0","MotionIdle:str":"walk","Shadow:eval":"true","Width:num":"64","Height:num":"64","WtypeId:num":"0"}
 *
 * @param HpGauge:struct
 * @text HP Gauge Settings
 * @type struct<HpGauge>
 * @desc Settings that adjust the visual HP Gauge displayed in battle.
 * @default {"Display":"","ShowActorGauge:eval":"false","ShowEnemyGauge:eval":"true","RequiresDefeat:eval":"false","BTestBypass:eval":"true","Settings":"","AnchorX:num":"0.5","AnchorY:num":"1.0","Scale:num":"0.5","OffsetX:num":"0","OffsetY:num":"-3","Options":"","AddHpGaugeOption:eval":"true","AdjustRect:eval":"true","Name:str":"Show HP Gauge"}
 *
 * @param ActionSequence:struct
 * @text Action Sequence Settings
 * @type struct<ActionSequence>
 * @desc Settings that adjust how certain Action Sequences work.
 * @default {"AutoSequences":"","AutoMeleeSolo:eval":"true","AutoMeleeAoE:eval":"true","CastAnimations":"","CastCertain:num":"120","CastPhysical:num":"52","CastMagical:num":"51","CounterReflection":"","CounterPlayback:eval":"true","ReflectAnimation:num":"53","ReflectPlayback:eval":"true","Stepping":"","MeleeDistance:num":"24","StepDistanceX:num":"48","StepDistanceY:num":"0","StepDuration:num":"12"}
 *
 * @param BreakEnd1
 * @text --------------------------
 * @default ----------------------------------
 *
 * @param End Of
 * @default Plugin Parameters
 *
 * @param BreakEnd2
 * @text --------------------------
 * @default ----------------------------------
 *
 */
/* ----------------------------------------------------------------------------
 * Auto Battle Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~AutoBattle:
 *
 * @param BattleDisplay
 * @text Battle Display
 *
 * @param AutoBattleMsg:str
 * @text Message
 * @parent BattleDisplay
 * @desc Message that's displayed when Auto Battle is on.
 * Text codes allowed. %1 - OK button, %2 - Cancel button
 * @default Press %1 or %2 to stop Auto Battle
 *
 * @param AutoBattleOK:str
 * @text OK Button
 * @parent BattleDisplay
 * @desc Text used to represent the OK button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default OK
 *
 * @param AutoBattleCancel:str
 * @text Cancel Button
 * @parent BattleDisplay
 * @desc Text used to represent the Cancel button.
 * If VisuMZ_0_CoreEngine is present, ignore this.
 * @default Cancel
 *
 * @param AutoBattleBgType:num
 * @text Background Type
 * @parent BattleDisplay
 * @type select
 * @option 0 - Window
 * @value 0
 * @option 1 - Dim
 * @value 1
 * @option 2 - Transparent
 * @value 2
 * @desc Select background type for Auto Battle window.
 * @default 1
 *
 * @param AutoBattleRect:func
 * @text JS: X, Y, W, H
 * @parent BattleDisplay
 * @type note
 * @desc Code used to determine the dimensions for this window.
 * @default "const width = Graphics.width;\nconst height = this.calcWindowHeight(1, false);\nconst x = 0;\nconst y = (Graphics.height - height) / 2;\nreturn new Rectangle(x, y, width, height);"
 *
 * @param Options
 *
 * @param AddOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the Auto Battle options to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param StartName:str
 * @text Startup Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Start
 *
 * @param StyleName:str
 * @text Style Name
 * @parent Options
 * @desc Command name of the option.
 * @default Auto Battle Style
 *
 * @param StyleOFF:str
 * @text OFF
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is OFF.
 * @default Attack
 *
 * @param StyleON:str
 * @text ON
 * @parent StyleName:str
 * @desc Text displayed when Auto Battle Style is ON.
 * @default Skills
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Damage:
 *
 * @param DamageStyles
 * @text Damage Styles
 *
 * @param DefaultDamageStyle:str
 * @text Default Style
 * @parent DamageStyles
 * @desc Which Damage Style do you want to set as default?
 * Use 'Manual' to not use any styles at all.
 * @default Standard
 *
 * @param DamageStyleList:arraystruct
 * @text Style List
 * @parent DamageStyles
 * @type struct<DamageStyle>[]
 * @desc A list of the damage styles available.
 * These are used to calculate base damage.
 * @default ["{\"Name:str\":\"Standard\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 0)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"Armor Scaling\",\"Formula:func\":\"\\\"// Declare Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Replace Formula\\\\nlet formula = item.damage.formula;\\\\nif (SceneManager.isSceneBattle() && !this.isCertainHit()) {\\\\n    const fmt = 'Math.max(this.applyArmorModifiers(b, %1), 1)';\\\\n    formula = formula.replace(/b.def/g, fmt.format('b.def'));\\\\n    formula = formula.replace(/b.mdf/g, fmt.format('b.mdf'));\\\\n    formula = formula.replace(/b.agi/g, fmt.format('b.agi'));\\\\n    formula = formula.replace(/b.luk/g, fmt.format('b.luk'));\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = Math.max(eval(formula), 0);\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"return this.getItemDamageAmountTextOriginal();\\\"\"}","{\"Name:str\":\"CT\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nattackStat = (attackStat * 1.75) + (level ** 2 / 45.5);\\\\nvalue = attackStat * 4;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(256 - armor, 0) / 256;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= Math.max(102.4 - armor, 0) / 128;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"D4\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nlet stat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n    armor = 0;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n    armor = 0;\\\\n}\\\\n\\\\n// Calculate Damage \\\\nlet value = 1.5 * Math.max(2 * stat * multiplier - armor, 1) * multiplier / 5;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"DQ\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nlet multiplier = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    let value = multiplier * Math.max(a.atk, a.mat);\\\\n    return (isNaN(value) ? 0 : value) * sign;\\\\n}\\\\n\\\\n// Get Primary Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Check for Recovery\\\\nif (this.isRecover()) {\\\\n    let value = stat * multiplier * sign;\\\\n    return isNaN(value) ? 0 : value;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nlet value = 0;\\\\nif (stat < ((2 + armor) / 2)) {\\\\n    // Plink Damage\\\\n    let baseline = Math.max(stat - ((12 * (armor - stat + 1)) / stat), 5);\\\\n    value = baseline / 3;\\\\n} else {\\\\n    // Normal Damage\\\\n    let baseline = Math.max(stat - (armor / 2), 1);\\\\n    value = baseline / 2;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF7\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare base Damage\\\\nlet baseDamage = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = a.atk + ((a.atk + level) / 32) * ((a.atk * level) / 32);\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    baseDamage = 6 * (a.mat + level);\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.def + level);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    baseDamage = 6 * (a.mdf + level);\\\\n}\\\\n\\\\n// Calculate Final Damage\\\\nlet value = baseDamage;\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isRecover()) {\\\\n    value += 22 * power;\\\\n} else {\\\\n    value = (power * Math.max(512 - armor, 1) * baseDamage) / (16 * 512);\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF8\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Damage\\\\nlet Value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.atk ** 2 / 16 + a.atk;\\\\n    value *= Math.max(265 - armor, 1) / 256;\\\\n    value *= power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = a.mat + power;\\\\n    value *= Math.max(265 - armor, 1) / 4;\\\\n    value *= power / 256;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = (power + a.def) * power / 2;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = (power + a.mdf) * power / 2;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF9\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Declare Main Stats\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(b, armor);\\\\nlet stat = 1;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    stat = a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    stat = a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    stat = a.mdf;\\\\n}\\\\n\\\\n// Declare Base Damage\\\\nlet baseDamage = power;\\\\nif (this.isPhysical()) {\\\\n    baseDamage += stat;\\\\n}\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    baseDamage -= armor;\\\\n    baseDamage = Math.max(1, baseDamage);\\\\n}\\\\n\\\\n// Declare Bonus Damage\\\\nlet bonusDamage = stat + (((a.level || a.luk) + stat) / 8);\\\\n\\\\n// Declare Final Damage\\\\nlet value = baseDamage * bonusDamage * sign;\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"FF10\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Constant\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\nif (this.isCertainHit()) {\\\\n    return (isNaN(power) ? 0 : power) * sign;\\\\n}\\\\n\\\\n// Create Damage Offense Value\\\\nlet value = power;\\\\n\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = (((a.atk ** 3) / 32) + 32) * power / 16;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = power * ((a.mat ** 2 / 6) + power) / 4;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = power * ((a.def + power) / 2);\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = power * ((a.mdf + power) / 2);\\\\n}\\\\n\\\\n// Apply Damage Defense Value\\\\nif (this.isDamage() || this.isDrain()) {\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(b, armor);\\\\n    armor = Math.max(armor, 1);\\\\n    value *= ((((armor - 280.4) ** 2) / 110) / 16) / 730;\\\\n    value *= (730 - (armor * 51 - (armor ** 2) / 11) / 10) / 730;\\\\n} else if (this.isRecover()) {\\\\n    value *= -1;\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MK\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Multiplier\\\\nconst multiplier = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = this.applyArmorModifiers(target, armor);\\\\nconst denominator = Math.max(200 + armor, 1);\\\\n\\\\n// Calculate Damage \\\\nlet value = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.atk / denominator;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value = 200 * a.mat / denominator;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value = 200 * a.def / 200;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value = 200 * a.mdf / 200;\\\\n}\\\\nvalue *= multiplier;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"MOBA\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Damage Value\\\\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\\\\n\\\\n// Apply Attacker's Offense Parameter\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    value *= a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    value *= a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    value *= a.mdf;\\\\n}\\\\n\\\\n// Apply Defender's Defense Parameter\\\\nif (this.isDamage() && !this.isCertainHit()) {\\\\n\\\\n    // Calculate Base Armor\\\\n    let armor = this.isPhysical() ? b.def : b.mdf;\\\\n    armor = this.applyArmorModifiers(target, armor);\\\\n\\\\n    // Apply Armor to Damage\\\\n    if (armor >= 0) {\\\\n        value *= 100 / (100 + armor);\\\\n    } else {\\\\n        value *= 2 - (100 / (100 - armor));\\\\n    }\\\\n}\\\\n\\\\n// Return Value\\\\nreturn isNaN(value) ? 0 : value;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Multiplier\",\"DamageType2:str\":\"%1 Damage Multiplier\",\"DamageType3:str\":\"%1 Recovery Multiplier\",\"DamageType4:str\":\"%1 Recovery Multiplier\",\"DamageType5:str\":\"%1 Drain Multiplier\",\"DamageType6:str\":\"%1 Drain Multiplier\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    const value = Math.max(eval(formula), 0);\\\\n    return '%1%'.format(Math.round(value * 100));\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}","{\"Name:str\":\"PKMN\",\"Formula:func\":\"\\\"// Define Constants\\\\nconst user = this.subject();\\\\nconst target = arguments[0];\\\\nconst item = this.item();\\\\nconst a = this.subject();\\\\nconst b = target;\\\\nconst v = $gameVariables._data;\\\\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\\\\n\\\\n// Create Power\\\\nconst power = Math.max(eval(item.damage.formula), 0);\\\\n\\\\n// Declare Values\\\\nlet value = 0;\\\\nlet level = Math.max(a.level || a.luk, 1);\\\\nlet armor = this.isPhysical() ? b.def : b.mdf;\\\\narmor = Math.max(this.applyArmorModifiers(target, armor), 0);\\\\nlet attackStat = 0;\\\\nif (this.isPhysical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat = a.atk;\\\\n} else if (this.isMagical() && (this.isDamage() || this.isDrain())) {\\\\n    attackStat =  a.mat;\\\\n} else if (this.isPhysical() && this.isRecover()) {\\\\n    attackStat =  a.def;\\\\n} else if (this.isMagical() && this.isRecover()) {\\\\n    attackStat =  a.mdf;\\\\n}\\\\n\\\\n// Calculate Damage\\\\nvalue = (((((2 * level) / 5) + 2) * power * (attackStat / armor)) / 50) + 2;\\\\n\\\\n// Return Value\\\\nreturn (isNaN(value) ? 0 : value) * sign;\\\"\",\"ItemsEquipsCore\":\"\",\"DamageType\":\"\",\"DamageType1:str\":\"%1 Damage Power\",\"DamageType2:str\":\"%1 Damage Power\",\"DamageType3:str\":\"%1 Recovery Power\",\"DamageType4:str\":\"%1 Recovery Power\",\"DamageType5:str\":\"%1 Drain Power\",\"DamageType6:str\":\"%1 Drain Power\",\"DamageDisplay:func\":\"\\\"// Define Constants\\\\nconst item = this._item;\\\\nconst formula = item.damage.formula;\\\\nconst a = this._tempActorA;\\\\nconst b = this._tempActorB;\\\\nconst user = a;\\\\nconst target = b;\\\\n\\\\n// Return Value\\\\ntry {\\\\n    return formula;\\\\n} catch (e) {\\\\n    if ($gameTemp.isPlaytest()) {\\\\n        console.log('Damage Formula Error for %1'.format(this._item.name));\\\\n    }\\\\n    return '?????';\\\\n}\\\"\"}"]
 *
 * @param Cap
 * @text Damage Cap
 *
 * @param EnableDamageCap:eval
 * @text Enable Damage Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Put a maximum hard damage cap on how far damage can go?
 * This can be broken through the usage of notetags.
 * @default false
 *
 * @param DefaultHardCap:num
 * @text Default Hard Cap
 * @parent EnableDamageCap:eval
 * @type number
 * @min 1
 * @desc The default hard damage cap used before applying damage.
 * @default 9999
 *
 * @param EnableSoftCap:eval
 * @text Enable Soft Cap?
 * @parent Cap
 * @type boolean
 * @on Enable
 * @off Disable
 * @desc Soft caps ease in the damage values leading up to the 
 * hard damage cap. Requires hard Damage Cap enabled.
 * @default false
 *
 * @param DefaultSoftCap:num
 * @text Base Soft Cap Rate
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.80
 *
 * @param DefaultSoftScaler:num
 * @text Soft Scale Constant
 * @parent EnableSoftCap:eval
 * @desc The default soft damage cap used before applying damage.
 * @default 0.1275
 *
 * @param Popups
 *
 * @param PopupDuration:num
 * @text Popup Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a popup stays visible.
 * @default 128
 *
 * @param NewPopupBottom:eval
 * @text Newest Popups Bottom
 * @parent Popups
 * @type boolean
 * @on Bottom
 * @off Top
 * @desc Puts the newest popups at the bottom.
 * @default true
 *
 * @param PopupPosition:str
 * @text Appear Position
 * @parent Popups
 * @type select
 * @option Head - At the top of the battler.
 * @value head
 * @option Center - At the center of the battler.
 * @value center
 * @option Base - At the foot of the battler.
 * @value base
 * @desc Selects where you want popups to appear relative to the battler.
 * @default base
 *
 * @param PopupOffsetX:num
 * @text Offset X
 * @parent Popups
 * @desc Sets how much to offset the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param PopupOffsetY:num
 * @text Offset Y
 * @parent Popups
 * @desc Sets how much to offset the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param PopupShiftX:num
 * @text Shift X
 * @parent Popups
 * @desc Sets how much to shift the sprites by horizontally.
 * Negative values go left. Positive values go right.
 * @default 8
 *
 * @param PopupShiftY:num
 * @text Shift Y
 * @parent Popups
 * @desc Sets how much to shift the sprites by vertically.
 * Negative values go up. Positive values go down.
 * @default -28
 *
 * @param hpDamageFmt:str
 * @text HP Damage Format
 * @parent Popups
 * @desc Determines HP damage format for popup.
 * %1 - Value, %2 - HP Text
 * @default -%1
 *
 * @param hpHealingFmt:str
 * @text HP Healing Format
 * @parent Popups
 * @desc Determines HP healing format for popup.
 * %1 - Value, %2 - HP Text
 * @default +%1
 *
 * @param mpDamageFmt:str
 * @text MP Damage Format
 * @parent Popups
 * @desc Determines MP damage format for popup.
 * %1 - Value, %2 - MP Text
 * @default -%1 %2
 *
 * @param mpHealingFmt:str
 * @text MP Healing Format
 * @parent Popups
 * @desc Determines MP healing format for popup.
 * %1 - Value, %2 - MP Text
 * @default +%1 %2
 *
 * @param CriticalColor:eval
 * @text Critical Flash Color
 * @parent Popups
 * @desc Adjust the popup's flash color.
 * Format: [red, green, blue, alpha]
 * @default [255, 0, 0, 160]
 *
 * @param CriticalDuration:num
 * @text Critical Duration
 * @parent Popups
 * @type number
 * @min 1
 * @desc Adjusts how many frames a the flash lasts.
 * @default 128
 *
 * @param Formulas
 *
 * @param OverallFormulaJS:func
 * @text JS: Overall Formula
 * @parent Formulas
 * @type note
 * @desc The overall formula used when calculating damage.
 * @default "// Declare Constants\nconst target = arguments[0];\nconst critical = arguments[1];\nconst item = this.item();\n\n// Get Base Damage\nconst baseValue = this.evalDamageFormula(target);\n\n// Calculate Element Modifiers\nlet value = baseValue * this.calcElementRate(target);\n\n// Calculate Physical and Magical Modifiers\nif (this.isPhysical()) {\n    value *= target.pdr;\n}\nif (this.isMagical()) {\n    value *= target.mdr;\n}\n\n// Apply Healing Modifiers\nif (baseValue < 0) {\n    value *= target.rec;\n}\n\n// Apply Critical Modifiers\nif (critical) {\n    value = this.applyCritical(value);\n}\n\n// Apply Variance and Guard Modifiers\nvalue = this.applyVariance(value, item.damage.variance);\nvalue = this.applyGuard(value, target);\n\n// Finalize Damage\nvalue = Math.round(value);\nreturn value;"
 *
 * @param VarianceFormulaJS:func
 * @text JS: Variance Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage variance.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst variance = arguments[1];\n\n// Calculate Variance\nconst amp = Math.floor(Math.max((Math.abs(damage) * variance) / 100, 0));\nconst v = Math.randomInt(amp + 1) + Math.randomInt(amp + 1) - amp;\n\n// Return Damage\nreturn damage >= 0 ? damage + v : damage - v;"
 *
 * @param GuardFormulaJS:func
 * @text JS: Guard Formula
 * @parent Formulas
 * @type note
 * @desc The formula used when damage is guarded.
 * @default "// Declare Constants\nconst damage = arguments[0];\nconst target = arguments[1];\n\n// Return Damage Early\nconst note = this.item().note;\nif (note.match(/<UNBLOCKABLE>/i)) return damage;\nif (!target.isGuard()) return damage;\nif (damage < 0) return damage;\n\n// Declare Guard Rate\nlet guardRate = 0.5;\nguardRate /= target.grd;\n\n// Return Damage\nreturn damage * guardRate;"
 *
 * @param Critical
 * @text Critical Hits
 *
 * @param CriticalHitRateJS:func
 * @text JS: Rate Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Rates.
 * @default "// Declare Constants\nconst user = this.subject();\nconst target = arguments[0];\n\n// Create Base Critical Rate\nlet rate = this.subject().cri * (1 - target.cev);\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<ALWAYS CRITICAL>/i)) {\n    return 1;\n}\nif (note.match(/<SET CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    return Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ](\\d+)([%％])>/i)) {\n    rate *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL RATE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    rate += Number(RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL RATE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL RATE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Apply LUK Buffs/Debuffs\nconst lukStack = this.subject().buff(7);\nrate *= 2 ** lukStack;\n\n// Return Rate\nreturn rate;"
 *
 * @param CriticalHitMultiplier:func
 * @text JS: Damage Formula
 * @parent Critical
 * @type note
 * @desc The formula used to calculate Critical Hit Damage modification.
 * @default "// Declare Constants\nconst user = this.subject();\nlet damage = arguments[0];\nlet multiplier = 2.0;\nlet bonusDamage = this.subject().luk * this.subject().cri;\n\n// Apply Notetags\nconst note = this.item().note;\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ](\\d+)([%％])>/i)) {\n    multiplier = Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL MULTIPLIER:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    multiplier += Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ](\\d+)([%％])>/i)) {\n    bonusDamage *= Number(RegExp.$1) / 100;\n}\nif (note.match(/<MODIFY CRITICAL BONUS DAMAGE:[ ]([\\+\\-]\\d+)([%％])>/i)) {\n    bonusDamage += bonusDamage * (RegExp.$1) / 100;\n}\nif (note.match(/<JS CRITICAL DAMAGE>\\s*([\\s\\S]*)\\s*<\\/JS CRITICAL DAMAGE>/i)) {\n    const code = String(RegExp.$1);\n    try {\n        eval(code);\n    } catch (e) {\n        if ($gameTemp.isPlaytest()) console.log(e);\n    }\n}\n\n// Return Damage\nreturn damage * multiplier + bonusDamage;"
 *
 */
/* ----------------------------------------------------------------------------
 * Damage Formula Style
 * ----------------------------------------------------------------------------
 */
/*~struct~DamageStyle:
 *
 * @param Name:str
 * @text Name
 * @desc Name of this Damage Style.
 * Used for notetags and such.
 * @default Untitled
 *
 * @param Formula:func
 * @text JS: Formula
 * @parent Name:str
 * @type note
 * @desc The base formula for this Damage Style.
 * @default "// Define Constants\nconst item = this.item();\nconst a = this.subject();\nconst b = target;\nconst sign = [3, 4].includes(item.damage.type) ? -1 : 1;\n\n// Create Damage Value\nlet value = Math.max(eval(item.damage.formula), 0) * sign;\n\n// Return Value\nreturn isNaN(value) ? 0 : value;"
 *
 * @param ItemsEquipsCore
 * @text Items & Equips Core
 *
 * @param DamageType
 * @text Damage Label
 * @parent ItemsEquipsCore
 *
 * @param DamageType1:str
 * @text HP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType2:str
 * @text MP Damage
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Damage Multiplier
 *
 * @param DamageType3:str
 * @text HP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType4:str
 * @text MP Recovery
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Recovery Multiplier
 *
 * @param DamageType5:str
 * @text HP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageType6:str
 * @text MP Drain
 * @parent DamageType
 * @desc Vocabulary used for this data entry.
 * @default %1 Drain Multiplier
 *
 * @param DamageDisplay:func
 * @text JS: Damage Display
 * @parent ItemsEquipsCore
 * @type note
 * @desc Code used the data displayed for this category.
 * @default "// Define Constants\nconst item = this._item;\nconst formula = item.damage.formula;\nconst a = this._tempActorA;\nconst b = this._tempActorB;\nconst user = a;\nconst target = b;\n\n// Return Value\ntry {\n    const value = Math.max(eval(formula), 0);\n    return '%1%'.format(Math.round(value * 100));\n} catch (e) {\n    if ($gameTemp.isPlaytest()) {\n        console.log('Damage Formula Error for %1'.format(this._item.name));\n    }\n    return '?????';\n}"
 *
 */
/* ----------------------------------------------------------------------------
 * Mechanics Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Mechanics:
 *
 * @param ActionSpeed
 * @text Action Speed
 *
 * @param AllowRandomSpeed:eval
 * @text Allow Random Speed?
 * @parent ActionSpeed
 * @type boolean
 * @on Allow
 * @off Disable
 * @desc Allow speed to be randomized base off the user's AGI?
 * @default false
 *
 * @param CalcActionSpeedJS:func
 * @text JS: Calculate
 * @parent ActionSpeed
 * @type note
 * @desc Code used to calculate action speed.
 * @default "// Declare Constants\nconst agi = this.subject().agi;\n\n// Create Speed\nlet speed = agi;\nif (this.allowRandomSpeed()) {\n    speed += Math.randomInt(Math.floor(5 + agi / 4));\n}\nif (this.item()) {\n    speed += this.item().speed;\n}\nif (this.isAttack()) {\n    speed += this.subject().attackSpeed();\n}\n\n// Return Speed\nreturn speed;"
 *
 * @param BaseTroop
 * @text Base Troop
 *
 * @param BaseTroopIDs:arraynum
 * @text Base Troop ID's
 * @parent BaseTroop
 * @type troop[]
 * @desc Select the Troop ID(s) to duplicate page events from for all other troops.
 * @default ["1"]
 *
 * @param CommonEvents
 * @text Common Events (on Map)
 *
 * @param BattleStartEvent:num
 * @text Pre-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Common Event to run before each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param BattleEndEvent:num
 * @text Post-Battle Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run after each battle on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param VictoryEvent:num
 * @text Victory Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon victory on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param DefeatEvent:num
 * @text Defeat Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon defeat on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeSuccessEvent:num
 * @text Escape Success Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape success on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param EscapeFailEvent:num
 * @text Escape Fail Event
 * @parent CommonEvents
 * @type common_event
 * @desc Queued Common Event to run upon escape failure on map.
 * Use to 0 to not run any Common Event at all.
 * @default 0
 *
 * @param Escape
 *
 * @param CalcEscapeRatioJS:func
 * @text JS: Calc Escape Ratio
 * @parent Escape
 * @type note
 * @desc Code used to calculate the escape success ratio.
 * @default "// Calculate Escape Ratio\nlet ratio = 0.5;\nratio *= $gameParty.agility();\nratio /= $gameTroop.agility();\n\n// Return Ratio\nreturn ratio;"
 *
 * @param CalcEscapeRaiseJS:func
 * @text JS: Calc Escape Raise
 * @parent Escape
 * @type note
 * @desc Code used to calculate how much the escape success ratio raises upon each failure.
 * @default "// Calculate Escape Ratio\nlet value = 0.1;\nvalue += $gameParty.aliveMembers().length;\n\n// Return Value\nreturn value;"
 *
 * @param Switches
 *
 * @param SwitchCritical:num
 * @text Switch: Critical
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action performs a critical hit.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param SwitchMissEvade:num
 * @text Switch: Miss/Evade
 * @parent Switches
 * @type switch
 * @desc Turns switch ON if the action misses/is evaded.
 * Switch reverts to OFF whenever an action starts.
 * @default 0
 *
 * @param Variables
 *
 * @param VariableDmg:num
 * @text Variable: Damage
 * @parent Variables
 * @type variable
 * @desc Variable records target damage during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param VariableHeal:num
 * @text Variable: Healing
 * @parent Variables
 * @type variable
 * @desc Variable records target healing during action.
 * Variable reverts to 0 whenever an action starts.
 * @default 0
 *
 * @param BattleJS
 * @text JS: Battle-Related
 * 
 * @param PreStartBattleJS:func
 * @text JS: Pre-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartBattleJS:func
 * @text JS: Post-Start Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.startBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleVictoryJS:func
 * @text JS: Battle Victory
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processVictory()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeSuccessJS:func
 * @text JS: Escape Success
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeSuccess()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param EscapeFailureJS:func
 * @text JS: Escape Failure
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.onEscapeFailure()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param BattleDefeatJS:func
 * @text JS: Battle Defeat
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.processDefeat()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 * 
 * @param PreEndBattleJS:func
 * @text JS: Pre-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndBattleJS:func
 * @text JS: Post-End Battle
 * @parent BattleJS
 * @type note
 * @desc Target function: BattleManager.endBattle()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param TurnJS
 * @text JS: Turn-Related
 *
 * @param PreStartTurnJS:func
 * @text JS: Pre-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostStartTurnJS:func
 * @text JS: Post-Start Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: BattleManager.startTurn()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreEndTurnJS:func
 * @text JS: Pre-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostEndTurnJS:func
 * @text JS: Post-End Turn
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.onTurnEnd()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PreRegenerateJS:func
 * @text JS: Pre-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param PostRegenerateJS:func
 * @text JS: Post-Regenerate
 * @parent TurnJS
 * @type note
 * @desc Target function: Game_Battler.prototype.regenerateAll()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst user = this;\nconst target = user;\nconst a = user;\nconst b = user;\n\n// Perform Actions\n"
 *
 * @param ActionJS
 * @text JS: Action-Related
 *
 * @param PreStartActionJS:func
 * @text JS: Pre-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostStartActionJS:func
 * @text JS: Post-Start Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.startAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PreApplyJS:func
 * @text JS: Pre-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreDamageJS:func
 * @text JS: Pre-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostDamageJS:func
 * @text JS: Post-Damage
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.executeDamage()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PostApplyJS:func
 * @text JS: Post-Apply
 * @parent ActionJS
 * @type note
 * @desc Target function: Game_Action.prototype.apply()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst target = arguments[1];\nconst user = this.subject();\nconst a = user;\nconst b = target;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n\n// Return Value\nreturn value;"
 *
 * @param PreEndActionJS:func
 * @text JS: Pre-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs before function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 * @param PostEndActionJS:func
 * @text JS: Post-End Action
 * @parent ActionJS
 * @type note
 * @desc Target function: BattleManager.endAction()
 * JavaScript code occurs after function is run.
 * @default "// Declare Constants\nconst value = arguments[0];\nconst user = this.subject();\nconst target = user;\nconst a = user;\nconst b = user;\nconst action = this;\nconst item = this.item();\nconst skill = this.item();\n\n// Perform Actions\n"
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Layout Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLayout:
 *
 * @param Style:str
 * @text Battle Layout Style
 * @type select
 * @option Default - Shows actor faces in Battle Status.
 * @value default
 * @option List - Lists actors in Battle Status.
 * @value list
 * @option XP - Shows actor battlers in a stretched Battle Status.
 * @value xp
 * @option Portrait - Shows portraits in a stretched Battle Status.
 * @value portrait
 * @option Border - Displays windows around the screen border.
 * @value border
 * @option Sideview Battle UI - Requires VisuMZ_3_SideviewBattleUI
 * @value sideview_ui
 * @desc The style used for the battle layout.
 * @default default
 *
 * @param ListStyle
 * @text List Style
 * @parent Style:str
 *
 * @param ShowFacesListStyle:eval
 * @text Show Faces
 * @parent ListStyle
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Shows faces in List Style?
 * @default true
 *
 * @param CommandWidth:num
 * @text Command Window Width
 * @parent ListStyle
 * @type number
 * @min 1
 * @desc Determine the window width for the Party and Actor Command
 * Windows. Affects Default and List Battle Layout styles.
 * @default 192
 *
 * @param XPStyle
 * @text XP Style
 * @parent Style:str
 *
 * @param XPActorCommandLines:num
 * @text Command Lines
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Number of action lines in the Actor Command Window for the XP Style.
 * @default 4
 *
 * @param XPActorDefaultHeight:num
 * @text Sprite Height
 * @parent XPStyle
 * @type number
 * @min 1
 * @desc Default sprite height used when if the sprite's height has not been determined yet.
 * @default 64
 *
 * @param XPSpriteYLocation:str
 * @text Sprite Base Location
 * @parent XPStyle
 * @type select
 * @option Above Name - Sprite is located above the name.
 * @value name
 * @option Bottom - Sprite is located at the bottom of the window.
 * @value bottom
 * @option Centered - Sprite is centered in the window.
 * @value center
 * @option Top - Sprite is located at the top of the window.
 * @value top
 * @desc Determine where the sprite is located on the Battle Status Window.
 * @default name
 *
 * @param PotraitStyle
 * @text Portrait Style
 * @parent Style:str
 *
 * @param ShowPortraits:eval
 * @text Show Portraits?
 * @parent PotraitStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait instead of a face.
 * @default true
 *
 * @param PortraitScale:num
 * @text Portrait Scaling
 * @parent PotraitStyle
 * @desc If portraits are used, scale them by this much.
 * @default 0.5
 *
 * @param BorderStyle
 * @text Border Style
 * @parent Style:str
 *
 * @param SkillItemBorderCols:num
 * @text Columns
 * @parent BorderStyle
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 1
 *
 * @param ShowPortraitsBorderStyle:eval
 * @text Show Portraits?
 * @parent BorderStyle
 * @type boolean
 * @on Portraits
 * @off Faces
 * @desc Requires VisuMZ_1_MainMenuCore.
 * Shows the actor's portrait at the edge of the screen.
 * @default true
 *
 * @param PortraitScaleBorderStyle:num
 * @text Portrait Scaling
 * @parent BorderStyle
 * @desc If portraits are used, scale them by this much.
 * @default 1.0
 *
 * @param SkillItemWindows
 * @text Skill & Item Windows
 *
 * @param SkillItemMiddleLayout:eval
 * @text Middle Layout
 * @parent SkillItemWindows
 * @type boolean
 * @on Middle
 * @off Bottom
 * @desc Shows the Skill & Item Windows in mid-screen?
 * @default false
 *
 * @param SkillItemStandardCols:num
 * @text Columns
 * @parent SkillItemWindows
 * @type number
 * @min 1
 * @desc The total number of columns for Skill & Item Windows
 * in the battle scene.
 * @default 2
 *
 * @param StatusWindow
 * @text Status Window Elements
 *
 * @param StatusWindowName
 * @text Battler Name
 * @parent StatusWindow
 *
 * @param NameOffsetX:num
 * @text Offset: X
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param NameOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowName
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowHpGauge
 * @text Gauge 1 (HP)
 * @parent StatusWindow
 *
 * @param HpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param HpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowHpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowMpGauge
 * @text Gauge 2 (MP)
 * @parent StatusWindow
 *
 * @param MpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param MpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowMpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpGauge
 * @text Gauge 3 (TP)
 * @parent StatusWindow
 *
 * @param TpGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowStateIcon
 * @text State Icon
 * @parent StatusWindow
 *
 * @param StateIconOffsetX:num
 * @text Offset: X
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StateIconOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowStateIcon
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowTpbGauge
 * @text TPB/ATB Gauge
 * @parent StatusWindow
 *
 * @param TpbGaugeOffsetX:num
 * @text Offset: X
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param TpbGaugeOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowTpbGauge
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowSkin
 * @text Window Skin
 * @parent StatusWindow
 *
 * @param StatusWindowSkinFilename:str
 * @text Filename
 * @parent StatusWindowSkin
 * @type file
 * @dir img/system/
 * @desc Filename used for the Battle Status Window skin.
 * Leave this empty to use the default window skin.
 * @default 
 *
 * @param StatusWindowSkinHide:eval
 * @text Hide Window Skin?
 * @parent StatusWindowSkin
 * @type boolean
 * @on No Window Skin
 * @off Default Skin
 * @desc Show/Hide the window skin for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowSelectBack
 * @text Selectable Background
 * @parent StatusWindow
 *
 * @param StatusWindowSelectableBackHide:eval
 * @text Hide Selectable BG?
 * @parent StatusWindowSelectBack
 * @type boolean
 * @on No Selectable BG
 * @off Default Selectable BG
 * @desc Show/Hide the selectable background box for the Battle Status Window?
 * @default false
 *
 * @param StatusWindowAttachments
 * @text Attachments
 * @parent StatusWindow
 *
 * @param StatusWindowBackAttachment
 * @text Back Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentBack:str
 * @text Filename
 * @parent StatusWindowBackAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the back of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentBackOffsetX:num
 * @text Offset: X
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentBackOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowBackAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param StatusWindowFrontAttachment
 * @text Front Attachment
 * @parent StatusWindowAttachments
 *
 * @param StatusWindowAttachmentFront:str
 * @text Filename
 * @parent StatusWindowFrontAttachment
 * @type file
 * @dir img/system/
 * @desc Filename used for an image to attach to the front of the
 * Battle Status Window. Leave empty for none.
 * @default 
 *
 * @param StatusWindowAttachmentFrontOffsetX:num
 * @text Offset: X
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's X.
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param StatusWindowAttachmentFrontOffsetY:num
 * @text Offset: Y
 * @parent StatusWindowFrontAttachment
 * @desc Offset this Battle Status Window element's Y.
 * Negative goes up. Positive goes down.
 * @default +0
 *
 * @param UiElements
 * @text UI Elements
 *
 * @param AntiTintUiElements:eval
 * @text Anti-Tint UI?
 * @parent UiElements
 * @type boolean
 * @on Prevent Tint
 * @off Allow Tint
 * @desc Prevent UI Elements from being tinted?
 * @default true
 *
 */
/* ----------------------------------------------------------------------------
 * Battle Log Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~BattleLog:
 *
 * @param General
 *
 * @param BackColor:str
 * @text Back Color
 * @parent General
 * @desc Use #rrggbb for a hex color.
 * @default #000000
 *
 * @param MaxLines:num
 * @text Max Lines
 * @parent General
 * @type number
 * @min 1
 * @desc Maximum number of lines to be displayed.
 * @default 10
 *
 * @param MessageWait:num
 * @text Message Wait
 * @parent General
 * @type number
 * @min 1
 * @desc Number of frames for a usual message wait.
 * @default 16
 *
 * @param TextAlign:str
 * @text Text Align
 * @parent General
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Window_BattleLog.
 * @default center
 *
 * @param BattleLogRectJS:func
 * @text JS: X, Y, W, H
 * @parent General
 * @type note
 * @desc Code used to determine the dimensions for the battle log.
 * @default "const wx = 0;\nconst wy = 0;\nconst ww = Graphics.boxWidth;\nconst wh = this.calcWindowHeight(10, false);\nreturn new Rectangle(wx, wy, ww, wh);"
 *
 * @param StartTurn
 * @text Start Turn
 *
 * @param StartTurnShow:eval
 * @text Show Start Turn?
 * @parent StartTurn
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display turn changes at the start of the turn?
 * @default false
 *
 * @param StartTurnMsg:str
 * @text Start Turn Message
 * @parent StartTurn
 * @desc Message displayed at turn start.
 * %1 - Turn Count
 * @default Turn %1
 *
 * @param StartTurnWait:num
 * @text Start Turn Wait
 * @parent StartTurn
 * @type number
 * @min 1
 * @desc Number of frames to wait after a turn started.
 * @default 40
 *
 * @param DisplayAction
 * @text Display Action
 *
 * @param ActionCenteredName:eval
 * @text Show Centered Action?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display a centered text of the action name?
 * @default true
 *
 * @param ActionSkillMsg1:eval
 * @text Show Skill Message 1?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 1st skill message?
 * @default false
 *
 * @param ActionSkillMsg2:eval
 * @text Show Skill Message 2?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the 2nd skill message?
 * @default true
 *
 * @param ActionItemMsg:eval
 * @text Show Item Message?
 * @parent DisplayAction
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the item use message?
 * @default false
 *
 * @param ActionChanges
 * @text Action Changes
 *
 * @param ShowCounter:eval
 * @text Show Counter?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display counter text?
 * @default true
 *
 * @param ShowReflect:eval
 * @text Show Reflect?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display magic reflection text?
 * @default true
 *
 * @param ShowSubstitute:eval
 * @text Show Substitute?
 * @parent ActionChanges
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display substitute text?
 * @default true
 *
 * @param ActionResults
 * @text Action Results
 *
 * @param ShowFailure:eval
 * @text Show No Effect?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display no effect text?
 * @default false
 *
 * @param ShowCritical:eval
 * @text Show Critical?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display critical text?
 * @default false
 *
 * @param ShowMissEvasion:eval
 * @text Show Miss/Evasion?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display miss/evasion text?
 * @default false
 *
 * @param ShowHpDmg:eval
 * @text Show HP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display HP Damage text?
 * @default false
 *
 * @param ShowMpDmg:eval
 * @text Show MP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display MP Damage text?
 * @default false
 *
 * @param ShowTpDmg:eval
 * @text Show TP Damage?
 * @parent ActionResults
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display TP Damage text?
 * @default false
 *
 * @param DisplayStates
 * @text Display States
 *
 * @param ShowAddedState:eval
 * @text Show Added States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added states text?
 * @default false
 *
 * @param ShowRemovedState:eval
 * @text Show Removed States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed states text?
 * @default false
 *
 * @param ShowCurrentState:eval
 * @text Show Current States?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display the currently affected state text?
 * @default false
 *
 * @param ShowAddedBuff:eval
 * @text Show Added Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added buffs text?
 * @default false
 *
 * @param ShowAddedDebuff:eval
 * @text Show Added Debuffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display added debuffs text?
 * @default false
 *
 * @param ShowRemovedBuff:eval
 * @text Show Removed Buffs?
 * @parent DisplayStates
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Display removed de/buffs text?
 * @default false
 *
 */
/* ----------------------------------------------------------------------------
 * Battleback Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Battleback:
 *
 * @param DefaultStyle:str
 * @text Default Style
 * @type select
 * @option MZ (MZ's default style)
 * @value MZ
 * @option 1:1 (No Scaling)
 * @value 1:1
 * @option Scale To Fit (Scale to screen size)
 * @value ScaleToFit
 * @option Scale Down (Scale Downward if Larger than Screen)
 * @value ScaleDown
 * @option Scale Up (Scale Upward if Smaller than Screen)
 * @value ScaleUp
 * @desc The default scaling style used for battlebacks.
 * @default MZ
 *
 * @param jsOneForOne:func
 * @text JS: 1:1
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst scale = 1.0;\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = 0;\nthis.y = 0;"
 *
 * @param jsScaleToFit:func
 * @text JS: Scale To Fit
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = this.width / this.bitmap.width;\nconst ratioY = this.height / this.bitmap.height;\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScaleDown:func
 * @text JS: Scale Down
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.min(1, this.width / this.bitmap.width);\nconst ratioY = Math.min(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 * @param jsScale Up:func
 * @text JS: Scale Up
 * @type note
 * @desc This code gives you control over the scaling for this style.
 * @default "// Adjust Size\nthis.width = Graphics.width;\nthis.height = Graphics.height;\n\n// Adjust Scale\nconst ratioX = Math.max(1, this.width / this.bitmap.width);\nconst ratioY = Math.max(1, this.height / this.bitmap.height);\nconst scale = Math.max(ratioX, ratioY);\nthis.scale.x = scale;\nthis.scale.y = scale;\n\n// Adjust Coordinates\nthis.x = (Graphics.width - this.width) / 2;\nthis.y = Graphics.height - this.height;"
 *
 */
/* ----------------------------------------------------------------------------
 * Party Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~PartyCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Party Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Party Command Window.
 * @default left
 *
 * @param CmdIconFight:num
 * @text Fight Icon
 * @parent Cmd
 * @desc The icon used for the Fight command.
 * @default 76
 *
 * @param CommandAddAutoBattle:eval
 * @text Add Auto Battle?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Auto Battle" command to the Command Window?
 * @default true
 *
 * @param CmdIconAutoBattle:num
 * @text Auto Battle Icon
 * @parent CommandAddAutoBattle:eval
 * @desc The icon used for the Auto Battle command.
 * @default 78
 *
 * @param CmdTextAutoBattle:str
 * @text Auto Battle Text
 * @parent CommandAddAutoBattle:eval
 * @desc The text used for the Auto Battle command.
 * @default Auto
 *
 * @param CommandAddOptions:eval
 * @text Add Options?
 * @parent Cmd
 * @type boolean
 * @on Add
 * @off Don't
 * @desc Add the "Options" command to the Command Window?
 * @default true
 *
 * @param CmdIconOptions:num
 * @text Options Icon
 * @parent CommandAddOptions:eval
 * @desc The icon used for the Options command.
 * @default 83
 *
 * @param ActiveTpbOptionsMessage:str
 * @text Active TPB Message
 * @parent CommandAddOptions:eval
 * @desc Message that will be displayed when selecting options during the middle of an action.
 * @default Options Menu queued after action is complete.
 *
 * @param CmdIconEscape:num
 * @text Escape Icon
 * @parent Cmd
 * @desc The icon used for the Escape command.
 * @default 82
 *
 * @param Access
 *
 * @param SkipPartyCmd:eval
 * @text Skip Party Command
 * @parent Access
 * @type boolean
 * @on Skip
 * @off Don't
 * @desc DTB: Skip Party Command selection on turn start.
 * TPB: Skip Party Command selection at battle start.
 * @default true
 *
 * @param DisablePartyCmd:eval
 * @text Disable Party Command
 * @parent Access
 * @type boolean
 * @on Disable
 * @off Don't
 * @desc Disable the Party Command Window entirely?
 * @default false
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpFight:str
 * @text Fight
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Select actions to fight.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Sets party to Auto Battle mode.
 *
 * @param HelpOptions:str
 * @text Options
 * @parent HelpWindow
 * @desc Text displayed when selecting the Options command.
 * @default Opens up the Options Menu.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Command Window Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActorCmd:
 *
 * @param Cmd
 * @text Command Window
 *
 * @param CmdStyle:str
 * @text Style
 * @parent Cmd
 * @type select
 * @option Text Only
 * @value text
 * @option Icon Only
 * @value icon
 * @option Icon + Text
 * @value iconText
 * @option Automatic
 * @value auto
 * @desc How do you wish to draw commands in the Actor Command Window?
 * @default auto
 *
 * @param CmdTextAlign:str
 * @text Text Align
 * @parent Cmd
 * @type combo
 * @option left
 * @option center
 * @option right
 * @desc Text alignment for the Actor Command Window.
 * @default left
 *
 * @param CmdIconItem:num
 * @text Item Icon
 * @parent Cmd
 * @desc The icon used for the Item command.
 * @default 176
 *
 * @param IconStypeNorm:num
 * @text Normal SType Icon
 * @parent Cmd
 * @desc Icon used for normal skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 78
 *
 * @param IconStypeMagic:num
 * @text Magic SType Icon
 * @parent Cmd
 * @desc Icon used for magic skill types that aren't assigned any
 * icons. Ignore if VisuMZ_1_SkillsStatesCore is installed.
 * @default 79
 *
 * @param BattleCmd
 * @text Battle Commands
 *
 * @param BattleCmdList:arraystr
 * @text Command List
 * @parent BattleCmd
 * @type combo[]
 * @option attack
 * @option skills
 * @option guard
 * @option item
 * @option party
 * @option escape
 * @option auto battle
 * @option stypes
 * @option stype: x
 * @option stype: name
 * @option all skills
 * @option skill: x
 * @option skill: name
 * @option combat log
 * @option talk
 * @option weapon swap
 * @desc List of battle commands that appear by default
 * if the <Battle Commands> notetag isn't present.
 * @default ["attack","skills","guard","party","item"]
 *
 * @param ShowCosts:eval
 * @text Show Command Costs
 * @parent BattleCmd
 * @type boolean
 * @on Show Costs
 * @off Hide Costs
 * @desc If a battle command has a resource cost, show it?
 * @default true
 *
 * @param HelpWindow
 * @text Help Window
 *
 * @param HelpSkillType:str
 * @text Skill Types
 * @parent HelpWindow
 * @desc Text displayed when selecting a skill type.
 * %1 - Skill Type Name
 * @default Opens up a list of skills under the \C[16]%1\C[0] category.
 *
 * @param HelpItem:str
 * @text Items
 * @parent HelpWindow
 * @desc Text displayed when selecting the item command.
 * @default Opens up a list of items that you can use.
 *
 * @param HelpEscape:str
 * @text Escape
 * @parent HelpWindow
 * @desc Text displayed when selecting the escape command.
 * @default Attempt to escape the battle.
 *
 * @param HelpAutoBattle:str
 * @text Auto Battle
 * @parent HelpWindow
 * @desc Text displayed when selecting the Auto Battle command.
 * @default Automatically choose an action suitable for combat.
 *
 * @param HelpParty:str
 * @text Party
 * @parent HelpWindow
 * @desc Text displayed when selecting the Party command.
 * Requires 
 * @default Automatically choose an action suitable for combat.
 *
 */
/* ----------------------------------------------------------------------------
 * Actor Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Actor:
 *
 * @param Flinch
 *
 * @param FlinchDistanceX:num
 * @text Flinch Distance X
 * @parent Flinch
 * @desc The normal X distance when flinching.
 * @default 12
 *
 * @param FlinchDistanceY:num
 * @text Flinch Distance Y
 * @parent Flinch
 * @desc The normal Y distance when flinching.
 * @default 0
 *
 * @param FlinchDuration:num
 * @text Flinch Duration
 * @parent Flinch
 * @desc The number of frames for a flinch to complete.
 * @default 6
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param ChantStyle:eval
 * @text Chant Style
 * @parent SvBattlers
 * @type boolean
 * @on Magical Hit Type
 * @off Magical Skill Type
 * @desc What determines the chant motion?
 * Hit type or skill type?
 * @default true
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent SvBattlers
 * @desc Offsets X position where actor is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent SvBattlers
 * @desc Offsets Y position where actor is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param MotionSpeed:num
 * @text Motion Speed
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc The number of frames in between each motion.
 * @default 12
 *
 * @param PrioritySortActive:eval
 * @text Priority: Active
 * @parent SvBattlers
 * @type boolean
 * @on Active Actor over All Else
 * @off Active Actor is Sorted Normally
 * @desc Place the active actor on top of actor and enemy sprites.
 * @default false
 *
 * @param PrioritySortActors:eval
 * @text Priority: Actors
 * @parent SvBattlers
 * @type boolean
 * @on Actors over Enemies
 * @off Sort by Y Position
 * @desc Prioritize actors over enemies when placing sprites on top
 * of each other.
 * @default true
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent SvBattlers
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default false
 *
 * @param HomePosJS:func
 * @text JS: Home Position
 * @parent SvBattlers
 * @type note
 * @desc Code used to calculate the home position of actors.
 * @default "// Declare Constants\nconst sprite = this;\nconst actor = this._actor;\nconst index = arguments[0];\n\n// Make Calculations\nlet x = Math.round((Graphics.width / 2) + 192)\nx -= Math.floor((Graphics.width - Graphics.boxWidth) / 2);\nx += index * 32;\nlet y = (Graphics.height - 200) - ($gameParty.maxBattleMembers() * 48);\ny -= Math.floor((Graphics.height - Graphics.boxHeight) / 2);\ny += index * 48;\n\n// Home Position Offsets\nconst offsetNote = /<SIDEVIEW HOME OFFSET:[ ]([\\+\\-]\\d+),[ ]([\\+\\-]\\d+)>/i;\nconst xOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$1) : 0));\nconst yOffsets = actor.traitObjects().map((obj) => (obj && obj.note.match(offsetNote) ? Number(RegExp.$2) : 0));\nx = xOffsets.reduce((r, offset) => r + offset, x);\ny = yOffsets.reduce((r, offset) => r + offset, y);\n\n// Set Home Position\nthis.setHome(x, y);"
 *
 */
/* ----------------------------------------------------------------------------
 * Enemy Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~Enemy:
 *
 * @param Visual
 *
 * @param AttackAnimation:num
 * @text Attack Animation
 * @parent Visual
 * @type animation
 * @desc Default attack animation used for enemies.
 * Use <Attack Animation: x> for custom animations.
 * @default 1
 *
 * @param EmergeText:eval
 * @text Emerge Text
 * @parent Visual
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show or hide the 'Enemy emerges!' text at the start of battle.
 * @default false
 *
 * @param OffsetX:num
 * @text Offset: X
 * @parent Visual
 * @desc Offsets X position where enemy is positioned.
 * Negative values go left. Positive values go right.
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset: Y
 * @parent Visual
 * @desc Offsets Y position where enemy is positioned.
 * Negative values go up. Positive values go down.
 * @default 0
 *
 * @param SmoothImage:eval
 * @text Smooth Image
 * @parent Visual
 * @type boolean
 * @on Smooth
 * @off Pixelated
 * @desc Smooth out the battler images or pixelate them?
 * @default true
 *
 * @param SelectWindow
 * @text Select Window
 *
 * @param LastSelected:eval
 * @text Any: Last Selected
 * @parent SelectWindow
 * @type boolean
 * @on Last Selected
 * @off FV/SV Priority
 * @desc Prioritize last selected enemy over front view or sideview settings?
 * @default true
 *
 * @param FrontViewSelect:eval
 * @text FV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using frontview, auto select the enemy furthest right.
 * @default false
 *
 * @param SideviewSelect:eval
 * @text SV: Right Priority
 * @parent SelectWindow
 * @type boolean
 * @on Right
 * @off Normal
 * @desc If using sideview, auto select the enemy furthest right.
 * @default true
 * 
 * @param Name
 *
 * @param NameLegacy:eval
 * @text Legacy Option
 * @parent Name
 * @type boolean
 * @on Legacy Version
 * @off New Version (Sprite)
 * @desc Use the legacy version (window) or new version (sprite).
 * WARNING: Legacy version is no longer supported for bugs.
 * @default false
 *
 * @param NameFontSize:num
 * @text Font Size
 * @parent Name
 * @desc Font size used for enemy names.
 * @default 22
 * 
 * @param NamePosition
 * @text Name Position
 * @parent Name
 *
 * @param NameOffsetX:num
 * @text Offset X
 * @parent NamePosition
 * @desc Offset the enemy name's X position by this much.
 * Negative goes left. Positive goes right.
 * @default 0
 *
 * @param NameOffsetY:num
 * @text Offset Y
 * @parent NamePosition
 * @desc Offset the enemy name's Y position by this much.
 * Negative goes up. Positive goes down.
 * @default 0
 *
 * @param NameAttachStateIcon:eval
 * @text Attach States
 * @parent Name
 * @type boolean
 * @on Attach
 * @off Normal Position
 * @desc Attach the enemy's state icon to the enemy name?
 * @default false
 *
 * @param AttachStateOffsetX:num
 * @text Attach: Offset X
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's X position by?
 * Negative goes left. Positive goes right.
 * @default +0
 *
 * @param AttachStateOffsetY:num
 * @text Attach: Offset Y
 * @parent NameAttachStateIcon:eval
 * @desc How much to offset the attached icon's Y position by?
 * Negative goes up. Positive goes down.
 * @default +0
 * 
 * @param NameVisibility
 * @text Name Visibility
 * @parent Name
 *
 * @param NameAlwaysHidden:eval
 * @text Always Hidden
 * @parent NameVisibility
 * @type boolean
 * @on Always Hidden
 * @off No Priority
 * @desc Determines if the enemy name will always be visible.
 * Highest priority.
 * @default false
 *
 * @param NameAlwaysVisible:eval
 * @text Always Visible
 * @parent NameVisibility
 * @type boolean
 * @on Always Visible
 * @off Hide when Unselected
 * @desc Determines if the enemy name will always be visible.
 * Medium priority.
 * @default false
 *
 * @param NameAlwaysSelectOnly:eval
 * @text By Selection?
 * @parent NameVisibility
 * @type boolean
 * @on Visible when Selected
 * @off Visible when Targeting
 * @desc Determines the conditions for enemy name visibility.
 * Lowest priority.
 * @default false
 *
 * @param SvBattlers
 * @text Sideview Battlers
 *
 * @param AllowCollapse:eval
 * @text Allow Collapse
 * @parent SvBattlers
 * @type boolean
 * @on Allow
 * @off Don't
 * @desc Causes defeated enemies with SV Battler graphics
 * to "fade away" when defeated?
 * @default false
 *
 * @param AnchorX:num
 * @text Anchor: X
 * @parent SvBattlers
 * @desc Default X anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor: Y
 * @parent SvBattlers
 * @desc Default Y anchor for Sideview Battlers.
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param MotionIdle:str
 * @text Motion: Idle
 * @parent SvBattlers
 * @type combo
 * @option walk
 * @option wait
 * @option chant
 * @option guard
 * @option damage
 * @option evade
 * @option thrust
 * @option swing
 * @option missile
 * @option skill
 * @option spell
 * @option item
 * @option escape
 * @option victory
 * @option dying
 * @option abnormal
 * @option sleep
 * @option dead
 * @desc Sets default idle animation used by Sideview Battlers.
 * @default walk
 *
 * @param Shadow:eval
 * @text Shadow Visible
 * @parent SvBattlers
 * @type boolean
 * @on Visible
 * @off Hidden
 * @desc Show or hide the shadow for Sideview Battlers.
 * @default true
 *
 * @param Width:num
 * @text Size: Width
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default width for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param Height:num
 * @text Size: Height
 * @parent SvBattlers
 * @type number
 * @min 1
 * @desc Default height for enemies that use Sideview Battlers.
 * @default 64
 *
 * @param WtypeId:num
 * @text Weapon Type
 * @parent SvBattlers
 * @type number
 * @min 0
 * @desc Sets default weapon type used by Sideview Battlers.
 * Use 0 for Bare Hands.
 * @default 0
 *
 */
/* ----------------------------------------------------------------------------
 * HP Gauge Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~HpGauge:
 *
 * @param Display
 * @text Show Gauges For
 *
 * @param ShowActorGauge:eval
 * @text Actors
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the actor sprites' heads?
 * Requires SV Actors to be visible.
 * @default true
 *
 * @param ShowEnemyGauge:eval
 * @text Enemies
 * @parent Display
 * @type boolean
 * @on Show
 * @off Hide
 * @desc Show HP Gauges over the enemy sprites' heads?
 * Can be bypassed with <Hide HP Gauge> notetag.
 * @default true
 *
 * @param RequiresDefeat:eval
 * @text Requires Defeat?
 * @parent ShowEnemyGauge:eval
 * @type boolean
 * @on Require Defeat First
 * @off No Requirement
 * @desc Requires defeating the enemy once to show HP Gauge?
 * Can be bypassed with <Show HP Gauge> notetag.
 * @default true
 *
 * @param BTestBypass:eval
 * @text Battle Test Bypass?
 * @parent RequiresDefeat:eval
 * @type boolean
 * @on Bypass
 * @off Don't Bypass
 * @desc Bypass the defeat requirement in battle test?
 * @default true
 *
 * @param Settings
 *
 * @param AnchorX:num
 * @text Anchor X
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor X to be?
 * Use values between 0 and 1 to be safe.
 * @default 0.5
 *
 * @param AnchorY:num
 * @text Anchor Y
 * @parent Settings
 * @desc Where do you want the HP Gauge sprite's anchor Y to be?
 * Use values between 0 and 1 to be safe.
 * @default 1.0
 *
 * @param Scale:num
 * @text Scale
 * @parent Settings
 * @desc How large/small do you want the HP Gauge to be scaled?
 * @default 0.5
 *
 * @param OffsetX:num
 * @text Offset X
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's X by?
 * @default 0
 *
 * @param OffsetY:num
 * @text Offset Y
 * @parent Settings
 * @desc How many pixels to offset the HP Gauge's Y by?
 * @default -3
 *
 * @param Options
 * @text Options
 *
 * @param AddHpGaugeOption:eval
 * @text Add Option?
 * @parent Options
 * @type boolean
 * @on Add
 * @off Don't Add
 * @desc Add the 'Show HP Gauge' option to the Options menu?
 * @default true
 *
 * @param AdjustRect:eval
 * @text Adjust Window Height
 * @parent Options
 * @type boolean
 * @on Adjust
 * @off Don't
 * @desc Automatically adjust the options window height?
 * @default true
 *
 * @param Name:str
 * @text Option Name
 * @parent Options
 * @desc Command name of the option.
 * @default Show HP Gauge
 *
 */
/* ----------------------------------------------------------------------------
 * Action Sequence Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ActionSequence:
 *
 * @param AutoSequences
 * @text Automatic Sequences
 *
 * @param AutoMeleeSolo:eval
 * @text Melee Single Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, single target actions?
 * @default true
 *
 * @param AutoMeleeAoE:eval
 * @text Melee Multi Target
 * @parent AutoSequences
 * @type boolean
 * @on Allow
 * @off Ignore
 * @desc Allow this auto sequence for physical, multi-target actions?
 * @default true
 *
 * @param QoL
 * @text Quality of Life
 *
 * @param AutoNotetag:eval
 * @text Auto Notetag
 * @parent QoL
 * @type boolean
 * @on Automatic
 * @off Manual
 * @desc Automatically apply the <Custom Action Sequence> notetag
 * effect to any item or skill that has a Common Event?
 * @default false
 *
 * @param CastAnimations
 * @text Cast Animations
 *
 * @param CastCertain:num
 * @text Certain Hit
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Certain Hit skills.
 * @default 120
 *
 * @param CastPhysical:num
 * @text Physical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Physical skills.
 * @default 52
 *
 * @param CastMagical:num
 * @text Magical
 * @parent CastAnimations
 * @type animation
 * @desc Cast animation for Magical skills.
 * @default 51
 *
 * @param CounterReflection
 * @text Counter/Reflect
 *
 * @param CounterPlayback:eval
 * @text Counter Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param ReflectAnimation:num
 * @text Reflect Animation
 * @parent CounterReflection
 * @type animation
 * @desc Animation played when an action is reflected.
 * @default 53
 *
 * @param ReflectPlayback:eval
 * @text Reflect Back
 * @parent CounterReflection
 * @type boolean
 * @on Play Back
 * @off Ignore
 * @desc Play back the attack animation used?
 * @default true
 *
 * @param Stepping
 *
 * @param MeleeDistance:num
 * @text Melee Distance
 * @parent Stepping
 * @desc Minimum distance in pixels for Movement Action Sequences.
 * @default 24
 *
 * @param StepDistanceX:num
 * @text Step Distance X
 * @parent Stepping
 * @desc The normal X distance when stepping forward.
 * @default 48
 *
 * @param StepDistanceY:num
 * @text Step Distance Y
 * @parent Stepping
 * @desc The normal Y distance when stepping forward.
 * @default 0
 *
 * @param StepDuration:num
 * @text Step Duration
 * @parent Stepping
 * @desc The number of frames for a stepping action to complete.
 * @default 12
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Start Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileStart:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Start from battler target(s)
 * @value target
 * @option Point - Start from a point on the screen
 * @value point
 * @desc Select where the projectile should start from.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) to start the projectile from.
 * @default ["user"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Create one projectile at the center of the targets?
 * Or create a projectile for each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile from.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to start the projectile at.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Goal Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileGoal:
 * 
 * @param Type:str
 * @text Type
 * @type select
 * @option Target - Goal is battler target(s)
 * @value target
 * @option Point - Goal is a point on the screen
 * @value point
 * @desc Select where the projectile should go to.
 * @default target
 * 
 * @param Targets:arraystr
 * @text Target(s)
 * @parent Type:str
 * @type combo[]
 * @option user
 * @option current target
 * @option prev target
 * @option next target
 * @option all targets
 * @option focus
 * @option not focus
 * @option 
 * @option alive friends
 * @option alive friends not user
 * @option alive friends not target
 * @option dead friends
 * @option friend index x
 * @option 
 * @option alive opponents
 * @option alive opponents not target
 * @option dead opponents
 * @option opponent index x
 * @option 
 * @option alive actors
 * @option alive actors not user
 * @option alive actors not target
 * @option dead actors
 * @option actor index x
 * @option actor ID x
 * @option 
 * @option alive enemies
 * @option alive enemies not user
 * @option alive enemies not target
 * @option dead enemies
 * @option enemy index x
 * @option enemy ID x
 * @option 
 * @option alive battlers
 * @option alive battlers not user
 * @option alive battlers not target
 * @option dead battlers
 * @option 
 * @desc Select which unit(s) for projectile to go to.
 * @default ["all targets"]
 * 
 * @param TargetCenter:eval
 * @text Centralize
 * @parent Targets:arraystr
 * @type boolean
 * @on Center Projectile
 * @off Create Each
 * @desc Set goal in the center of targets?
 * Or create a projectile to go to each target?
 * @default false
 * 
 * @param TargetLocation:str
 * @text Target Location
 * @parent Targets:arraystr
 * @type combo
 * @option front head
 * @option front center
 * @option front base
 * @option middle head
 * @option middle center
 * @option middle base
 * @option back head
 * @option back center
 * @option back base
 * @desc Select which part of the target to send the projectile at.
 * @default middle center
 * 
 * @param PointX:eval
 * @text Point X
 * @parent Type:str
 * @desc Insert the X coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.width / 2
 * 
 * @param PointY:eval
 * @text Point Y
 * @parent Type:str
 * @desc Insert the Y coordinate to send the projectile to.
 * You may use JavaScript code.
 * @default Graphics.height / 2
 * 
 * @param OffsetX:eval
 * @text Offset X
 * @desc Insert how many pixels to offset the X coordinate by.
 * You may use JavaScript code.
 * @default +0
 * 
 * @param OffsetY:eval
 * @text Offset Y
 * @desc Insert how many pixels to offset the Y coordinate by.
 * You may use JavaScript code.
 * @default +0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Animation Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExAni:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
/* ----------------------------------------------------------------------------
 * Projectile Extra Settings
 * ----------------------------------------------------------------------------
 */
/*~struct~ProjectileExtra:
 * 
 * @param AutoAngle:eval
 * @text Auto Angle?
 * @parent Settings
 * @type boolean
 * @on Automatically Angle
 * @off Normal
 * @desc Automatically angle the projectile to tilt the direction it's moving?
 * @default true
 * 
 * @param AngleOffset:eval
 * @text Angle Offset
 * @desc Alter the projectile's tilt by this many degrees.
 * @default +0
 * 
 * @param Arc:eval
 * @text Arc Peak
 * @parent Settings
 * @desc This is the height of the project's trajectory arc
 * in pixels.
 * @default 0
 *
 * @param BlendMode:num
 * @text Blend Mode
 * @type select
 * @option 0 - Normal
 * @value 0
 * @option 1 - Additive
 * @value 1
 * @option 2 - Multiply
 * @value 2
 * @option 3 - Screen
 * @value 3
 * @desc What kind of blend mode do you wish to apply to the projectile?
 * @default 0
 *
 * @param EasingType:str
 * @text Easing
 * @parent Settings
 * @type combo
 * @option Linear
 * @option InSine
 * @option OutSine
 * @option InOutSine
 * @option InQuad
 * @option OutQuad
 * @option InOutQuad
 * @option InCubic
 * @option OutCubic
 * @option InOutCubic
 * @option InQuart
 * @option OutQuart
 * @option InOutQuart
 * @option InQuint
 * @option OutQuint
 * @option InOutQuint
 * @option InExpo
 * @option OutExpo
 * @option InOutExpo
 * @option InCirc
 * @option OutCirc
 * @option InOutCirc
 * @option InBack
 * @option OutBack
 * @option InOutBack
 * @option InElastic
 * @option OutElastic
 * @option InOutElastic
 * @option InBounce
 * @option OutBounce
 * @option InOutBounce
 * @desc Select which easing type to apply to the projectile's trajectory.
 * @default Linear
 * 
 * @param Hue:eval
 * @text Hue
 * @parent Settings
 * @desc Adjust the hue of the projectile.
 * Insert a number between 0 and 360.
 * @default 0
 * 
 * @param Scale:eval
 * @text Scale
 * @parent Settings
 * @desc Adjust the size scaling of the projectile.
 * Use decimals for exact control.
 * @default 1.0
 * 
 * @param Spin:eval
 * @text Spin Speed
 * @parent Settings
 * @desc Determine how much angle the projectile spins per frame.
 * Does not work well with "Auto Angle".
 * @default +0.0
 *
 */
//=============================================================================

const _0x3ffb9d=_0x2630;(function(_0x1b0c74,_0x4b9626){const _0x389c05=_0x2630,_0x56d1f9=_0x1b0c74();while(!![]){try{const _0x4a1d68=parseInt(_0x389c05(0x7f8))/0x1*(-parseInt(_0x389c05(0xa32))/0x2)+-parseInt(_0x389c05(0x718))/0x3+parseInt(_0x389c05(0x438))/0x4+parseInt(_0x389c05(0x36f))/0x5*(parseInt(_0x389c05(0x697))/0x6)+-parseInt(_0x389c05(0x9a8))/0x7+-parseInt(_0x389c05(0x854))/0x8+parseInt(_0x389c05(0x6f5))/0x9*(parseInt(_0x389c05(0x3bc))/0xa);if(_0x4a1d68===_0x4b9626)break;else _0x56d1f9['push'](_0x56d1f9['shift']());}catch(_0x1cd2d4){_0x56d1f9['push'](_0x56d1f9['shift']());}}}(_0xbbda,0x3defa));var label=_0x3ffb9d(0x80e),tier=tier||0x0,dependencies=[],pluginData=$plugins[_0x3ffb9d(0xae9)](function(_0x52f862){const _0x455403=_0x3ffb9d;return _0x52f862[_0x455403(0x75b)]&&_0x52f862['description'][_0x455403(0x802)]('['+label+']');})[0x0];VisuMZ[label][_0x3ffb9d(0x901)]=VisuMZ[label]['Settings']||{},VisuMZ['ConvertParams']=function(_0x5650a4,_0x2277c6){const _0x4fe148=_0x3ffb9d;for(const _0x10af80 in _0x2277c6){if(_0x10af80['match'](/(.*):(.*)/i)){const _0x3ed48c=String(RegExp['$1']),_0x11f8e7=String(RegExp['$2'])['toUpperCase']()['trim']();let _0x4d8c25,_0x3fe98e,_0x235404;switch(_0x11f8e7){case _0x4fe148(0xab7):_0x4d8c25=_0x2277c6[_0x10af80]!==''?Number(_0x2277c6[_0x10af80]):0x0;break;case _0x4fe148(0x2af):_0x3fe98e=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):[],_0x4d8c25=_0x3fe98e['map'](_0x55bba8=>Number(_0x55bba8));break;case _0x4fe148(0x563):_0x4d8c25=_0x2277c6[_0x10af80]!==''?eval(_0x2277c6[_0x10af80]):null;break;case _0x4fe148(0xaaa):_0x3fe98e=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):[],_0x4d8c25=_0x3fe98e[_0x4fe148(0x2e9)](_0x9e240f=>eval(_0x9e240f));break;case _0x4fe148(0xb86):_0x4d8c25=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):'';break;case _0x4fe148(0x387):_0x3fe98e=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):[],_0x4d8c25=_0x3fe98e[_0x4fe148(0x2e9)](_0x460c0d=>JSON[_0x4fe148(0x8dc)](_0x460c0d));break;case'FUNC':_0x4d8c25=_0x2277c6[_0x10af80]!==''?new Function(JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80])):new Function('return\x200');break;case _0x4fe148(0xc08):_0x3fe98e=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):[],_0x4d8c25=_0x3fe98e[_0x4fe148(0x2e9)](_0x22373b=>new Function(JSON[_0x4fe148(0x8dc)](_0x22373b)));break;case _0x4fe148(0xc2c):_0x4d8c25=_0x2277c6[_0x10af80]!==''?String(_0x2277c6[_0x10af80]):'';break;case'ARRAYSTR':_0x3fe98e=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):[],_0x4d8c25=_0x3fe98e[_0x4fe148(0x2e9)](_0x1aeb16=>String(_0x1aeb16));break;case _0x4fe148(0x972):_0x235404=_0x2277c6[_0x10af80]!==''?JSON[_0x4fe148(0x8dc)](_0x2277c6[_0x10af80]):{},_0x5650a4[_0x3ed48c]={},VisuMZ['ConvertParams'](_0x5650a4[_0x3ed48c],_0x235404);continue;case _0x4fe148(0x6da):_0x3fe98e=_0x2277c6[_0x10af80]!==''?JSON['parse'](_0x2277c6[_0x10af80]):[],_0x4d8c25=_0x3fe98e[_0x4fe148(0x2e9)](_0x49b49f=>VisuMZ[_0x4fe148(0xb83)]({},JSON['parse'](_0x49b49f)));break;default:continue;}_0x5650a4[_0x3ed48c]=_0x4d8c25;}}return _0x5650a4;},(_0x59a1ce=>{const _0x246c4c=_0x3ffb9d,_0xda20cf=_0x59a1ce[_0x246c4c(0x453)];for(const _0x2d06b9 of dependencies){if(!Imported[_0x2d06b9]){alert(_0x246c4c(0xb8f)[_0x246c4c(0x4a7)](_0xda20cf,_0x2d06b9)),SceneManager[_0x246c4c(0x6b5)]();break;}}const _0x164e0b=_0x59a1ce[_0x246c4c(0x670)];if(_0x164e0b[_0x246c4c(0x1b7)](/\[Version[ ](.*?)\]/i)){const _0x47a015=Number(RegExp['$1']);_0x47a015!==VisuMZ[label][_0x246c4c(0x3c3)]&&(alert('%1\x27s\x20version\x20does\x20not\x20match\x20plugin\x27s.\x20Please\x20update\x20it\x20in\x20the\x20Plugin\x20Manager.'[_0x246c4c(0x4a7)](_0xda20cf,_0x47a015)),SceneManager[_0x246c4c(0x6b5)]());}if(_0x164e0b[_0x246c4c(0x1b7)](/\[Tier[ ](\d+)\]/i)){if(_0x246c4c(0x8a5)!==_0x246c4c(0x984)){const _0x2dba8b=Number(RegExp['$1']);_0x2dba8b<tier?_0x246c4c(0x6f7)===_0x246c4c(0x6f7)?(alert('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x246c4c(0x4a7)](_0xda20cf,_0x2dba8b,tier)),SceneManager[_0x246c4c(0x6b5)]()):(this['isNonSubmenuCancel']()?(this[_0x246c4c(0x1bb)]['show'](),this[_0x246c4c(0x7ef)][_0x246c4c(0x18d)](),this[_0x246c4c(0x3ce)][_0x246c4c(0x6d2)]()):_0x143d75[_0x246c4c(0x80e)][_0x246c4c(0x4a1)][_0x246c4c(0x73d)](this),this[_0x246c4c(0x2d9)]()):tier=Math['max'](_0x2dba8b,tier);}else this[_0x246c4c(0x4aa)][_0x246c4c(0x530)]['x']=0x1/(this[_0x246c4c(0x530)]['x']||0.001),this[_0x246c4c(0x4aa)][_0x246c4c(0x530)]['y']=0x1/(this['scale']['y']||0.001);}VisuMZ[_0x246c4c(0xb83)](VisuMZ[label]['Settings'],_0x59a1ce['parameters']);})(pluginData),VisuMZ['CreateActionSequenceTargets']=function(_0x1a5bb3){const _0x193980=_0x3ffb9d;let _0x121f6a=[];for(const _0x4ea894 of _0x1a5bb3){_0x121f6a=_0x121f6a[_0x193980(0x416)](VisuMZ[_0x193980(0x92f)](_0x4ea894));}return _0x121f6a[_0x193980(0xae9)](_0x12f886=>_0x12f886);},VisuMZ[_0x3ffb9d(0x92f)]=function(_0x40e35b){const _0x5680d8=_0x3ffb9d,_0x45f6b4=BattleManager['allBattleMembers']()['filter'](_0x2319a7=>_0x2319a7&&_0x2319a7[_0x5680d8(0xc10)]()),_0x36871d=BattleManager[_0x5680d8(0xa98)],_0x577c1c=BattleManager['_target'],_0x5661e8=BattleManager[_0x5680d8(0x4ff)]?BattleManager[_0x5680d8(0x4ff)]['slice'](0x0):_0x45f6b4;_0x40e35b=_0x40e35b[_0x5680d8(0x456)]()[_0x5680d8(0x33a)]();if(_0x40e35b===_0x5680d8(0xc25)){if('ApJjA'==='bEhQL')this[_0x5680d8(0x4f7)]();else return[_0x36871d];}else{if(_0x40e35b===_0x5680d8(0x1bf))return[_0x577c1c];else{if(_0x40e35b===_0x5680d8(0x744)){if(_0x577c1c){const _0x1309c7=_0x5661e8[_0x5680d8(0x76b)](_0x577c1c);return _0x1309c7>=0x0?[_0x5661e8[_0x1309c7-0x1]||_0x577c1c]:[_0x577c1c];}}else{if(_0x40e35b===_0x5680d8(0xa1b)){if(_0x577c1c){if(_0x5680d8(0x18f)===_0x5680d8(0x18f)){const _0x4b731f=_0x5661e8[_0x5680d8(0x76b)](_0x577c1c);return _0x4b731f>=0x0?[_0x5661e8[_0x4b731f+0x1]||_0x577c1c]:[_0x577c1c];}else return this[_0x5680d8(0x9cd)]();}}else{if(_0x40e35b==='all\x20targets'){if(_0x5680d8(0x899)==='kHpOY')return _0x5661e8;else _0x500a11[_0x5680d8(0x365)]+=_0x5680d8(0x433);}else{if(_0x40e35b===_0x5680d8(0x8e7)){if(_0x5680d8(0x389)===_0x5680d8(0x389))return[_0x36871d][_0x5680d8(0x416)](_0x5661e8);else _0x3d75f2['command119']([_0x3da0f1]);}else{if(_0x40e35b==='not\x20focus')return _0x45f6b4[_0x5680d8(0xae9)](_0x19bd64=>_0x19bd64!==_0x36871d&&!_0x5661e8[_0x5680d8(0x802)](_0x19bd64)&&_0x19bd64[_0x5680d8(0x514)]());}}}}}}if(_0x36871d){if(_0x5680d8(0x6ba)!==_0x5680d8(0x6ba))this[_0x5680d8(0xa85)]=null;else{if(_0x40e35b===_0x5680d8(0xaac)){if(_0x5680d8(0x8e9)==='kpNOW')_0x2d9651=this[_0x5680d8(0x3d7)]();else return _0x36871d[_0x5680d8(0x432)]()[_0x5680d8(0x735)]();}else{if(_0x40e35b===_0x5680d8(0x76e))return _0x36871d[_0x5680d8(0x432)]()[_0x5680d8(0x735)]()['filter'](_0x1632ad=>_0x1632ad!==_0x36871d);else{if(_0x40e35b==='alive\x20friends\x20not\x20target')return _0x36871d[_0x5680d8(0x432)]()[_0x5680d8(0x735)]()[_0x5680d8(0xae9)](_0x2f98a1=>_0x2f98a1!==_0x577c1c);else{if(_0x40e35b===_0x5680d8(0x7e6)){if(_0x5680d8(0x80b)!==_0x5680d8(0x80b)){if(!this[_0x5680d8(0xc11)]())return![];const _0x10370d=this[_0x5680d8(0x491)]();if(!_0x10370d)return![];const _0x181778=_0x10370d[_0x5680d8(0x4c1)];if(!_0x181778)return![];const _0x22c67d=_0x181778[_0x5680d8(0x83a)];return _0x22c67d&&!_0x22c67d[_0x5680d8(0x1ce)];}else return _0x36871d[_0x5680d8(0x432)]()['deadMembers']();}else{if(_0x40e35b[_0x5680d8(0x1b7)](/FRIEND INDEX (\d+)/i)){if(_0x5680d8(0x8b3)===_0x5680d8(0x226))this[_0x5680d8(0x3ff)][_0x5680d8(0x289)](_0x2dcf57);else{const _0x15da3f=Number(RegExp['$1']);return[_0x36871d[_0x5680d8(0x432)]()[_0x5680d8(0x794)]()[_0x15da3f]];}}}}}}if(_0x40e35b===_0x5680d8(0x4a9))return _0x36871d[_0x5680d8(0x943)]()[_0x5680d8(0x735)]();else{if(_0x40e35b===_0x5680d8(0x8f1)){if('kKFek'===_0x5680d8(0xa99))return _0x36871d[_0x5680d8(0x943)]()[_0x5680d8(0x735)]()[_0x5680d8(0xae9)](_0x28bc97=>_0x28bc97!==_0x577c1c);else _0x594144[_0x5680d8(0x73f)]();}else{if(_0x40e35b===_0x5680d8(0xc36))return _0x36871d['opponentsUnit']()[_0x5680d8(0x829)]();else{if(_0x40e35b[_0x5680d8(0x1b7)](/OPPONENT INDEX (\d+)/i)){if(_0x5680d8(0xbd7)===_0x5680d8(0xc22))_0x19e92d=_0x209705[_0x5680d8(0xb55)](_0x134e75);else{const _0x41bf0b=Number(RegExp['$1']);return[_0x36871d[_0x5680d8(0x943)]()['members']()[_0x41bf0b]];}}}}}}}if(_0x40e35b===_0x5680d8(0x419))return $gameParty[_0x5680d8(0x735)]();else{if(_0x40e35b===_0x5680d8(0x52c))return $gameParty['aliveMembers']()['filter'](_0x1c7bb8=>_0x1c7bb8!==_0x36871d);else{if(_0x40e35b===_0x5680d8(0x53a)){if(_0x5680d8(0x29d)!=='wELdR')return $gameParty[_0x5680d8(0x735)]()[_0x5680d8(0xae9)](_0x581c9b=>_0x581c9b!==_0x577c1c);else this[_0x5680d8(0x601)][_0x5680d8(0x452)](0x0,0x0,0x0,0x0);}else{if(_0x40e35b==='dead\x20actors')return $gameParty[_0x5680d8(0x829)]();else{if(_0x40e35b[_0x5680d8(0x1b7)](/ACTOR INDEX (\d+)/i)){const _0x2384e9=Number(RegExp['$1']);return[$gameParty[_0x5680d8(0x794)]()[_0x2384e9]];}else{if(_0x40e35b[_0x5680d8(0x1b7)](/ACTOR ID (\d+)/i)){const _0x1d94b1=Number(RegExp['$1']);return[$gameActors[_0x5680d8(0x6aa)](_0x1d94b1)];}}}}}}if(_0x40e35b===_0x5680d8(0x28e))return $gameTroop[_0x5680d8(0x735)]();else{if(_0x40e35b===_0x5680d8(0x9af)){if('oYYvl'!==_0x5680d8(0x8c8))_0x83d233[_0x5680d8(0x80e)][_0x5680d8(0x67e)]['call'](this),this[_0x5680d8(0xa71)]();else return $gameTroop[_0x5680d8(0x735)]()['filter'](_0x2b6f5e=>_0x2b6f5e!==_0x36871d);}else{if(_0x40e35b===_0x5680d8(0xae2))return $gameTroop[_0x5680d8(0x735)]()[_0x5680d8(0xae9)](_0xc5517c=>_0xc5517c!==_0x577c1c);else{if(_0x40e35b===_0x5680d8(0x6b4))return $gameTroop[_0x5680d8(0x829)]();else{if(_0x40e35b[_0x5680d8(0x1b7)](/ENEMY INDEX (\d+)/i)){const _0x2b990c=Number(RegExp['$1']);return[$gameTroop[_0x5680d8(0x794)]()[_0x2b990c]];}else{if(_0x40e35b[_0x5680d8(0x1b7)](/ENEMY ID (\d+)/i)){if(_0x5680d8(0x77e)==='tdlxq'){const _0x2b141d=Number(RegExp['$1']);return $gameTroop[_0x5680d8(0x735)]()[_0x5680d8(0xae9)](_0x4a2a12=>_0x4a2a12['enemyId']()===_0x2b141d);}else return this[_0x5680d8(0x52b)]||0x0;}}}}}}if(_0x40e35b===_0x5680d8(0x49c))return _0x45f6b4['filter'](_0x1ebf77=>_0x1ebf77[_0x5680d8(0x3ad)]());else{if(_0x40e35b===_0x5680d8(0x8c1))return _0x45f6b4[_0x5680d8(0xae9)](_0x541384=>_0x541384['isAlive']()&&_0x541384!==_0x36871d);else{if(_0x40e35b===_0x5680d8(0x54e))return _0x45f6b4[_0x5680d8(0xae9)](_0x37f76c=>_0x37f76c[_0x5680d8(0x3ad)]()&&_0x37f76c!==_0x577c1c);else{if(_0x40e35b===_0x5680d8(0x63d))return _0x45f6b4[_0x5680d8(0xae9)](_0x33fe30=>_0x33fe30[_0x5680d8(0xb78)]());}}}return[];},PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x5a7),_0x442222=>{const _0x183047=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x183047(0xb83)](_0x442222,_0x442222);const _0x480aa7=$gameTemp[_0x183047(0x292)](),_0x57d79a=BattleManager[_0x183047(0x58b)],_0xbf950f=BattleManager[_0x183047(0xa98)],_0x57660c=BattleManager[_0x183047(0x4ff)]?BattleManager[_0x183047(0x4ff)][_0x183047(0xa39)](0x0):[],_0x39e8b5=BattleManager[_0x183047(0x492)];if(!_0x480aa7||!_0x57d79a||!_0xbf950f)return;if(!_0x57d79a['item']())return;if(_0x442222[_0x183047(0x831)])_0x39e8b5[_0x183047(0x941)](_0xbf950f,_0x57d79a[_0x183047(0x33b)]());_0x442222['ApplyImmortal']&&_0x39e8b5[_0x183047(0x7dd)](_0x183047(0x80f),_0xbf950f,_0x57660c,!![]);if(_0x442222['ActionStart'])_0x39e8b5[_0x183047(0x7dd)]('performActionStart',_0xbf950f,_0x57d79a);if(_0x442222[_0x183047(0x6dc)])_0x39e8b5['push'](_0x183047(0x361));if(_0x442222[_0x183047(0x8d9)])_0x39e8b5['push'](_0x183047(0x680),_0xbf950f,_0x57d79a);if(_0x442222[_0x183047(0xb15)])_0x39e8b5[_0x183047(0x7dd)]('waitForAnimation');_0x480aa7[_0x183047(0x27b)](_0x183047(0x725));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x32b),_0x68aaaa=>{const _0x1d6a50=_0x3ffb9d;if(!SceneManager[_0x1d6a50(0x341)]())return;VisuMZ[_0x1d6a50(0xb83)](_0x68aaaa,_0x68aaaa);const _0x40e8fa=$gameTemp[_0x1d6a50(0x292)](),_0x1e57da=BattleManager[_0x1d6a50(0x58b)],_0x154b86=BattleManager['_subject'],_0x700403=BattleManager[_0x1d6a50(0x4ff)]?BattleManager[_0x1d6a50(0x4ff)][_0x1d6a50(0xa39)](0x0):[],_0x1fa484=BattleManager[_0x1d6a50(0x492)],_0x28b342=_0x68aaaa[_0x1d6a50(0x931)]??![];if(!_0x40e8fa||!_0x1e57da||!_0x154b86)return;if(!_0x1e57da['item']())return;let _0xd9875d=_0x28b342?_0x1fa484[_0x1d6a50(0x1c9)](_0x154b86):0x1;for(let _0x5807b2=0x0;_0x5807b2<_0xd9875d;_0x5807b2++){if('zEscV'!==_0x1d6a50(0x6a7)){if(_0x28b342&&_0x154b86[_0x1d6a50(0x2bb)]()){if(_0x1d6a50(0x9e1)!=='qaIOC')return _0x5a0a8c['BattleCore'][_0x1d6a50(0x901)][_0x1d6a50(0x6c4)][_0x1d6a50(0x53c)][_0x1d6a50(0x73d)](this);else _0x1fa484[_0x1d6a50(0x7dd)](_0x1d6a50(0x348),_0x154b86,_0x5807b2);}if(_0x68aaaa[_0x1d6a50(0x38e)])_0x1fa484[_0x1d6a50(0x7dd)](_0x1d6a50(0x8f9),_0x154b86,_0x1e57da);if(_0x68aaaa['WaitCount']>0x0)_0x1fa484['push'](_0x1d6a50(0x327),_0x68aaaa[_0x1d6a50(0x2e7)]);if(_0x68aaaa['ActionAnimation'])_0x1fa484[_0x1d6a50(0x7dd)]('showAnimation',_0x154b86,_0x700403,_0x1e57da[_0x1d6a50(0x33b)]()[_0x1d6a50(0xacf)]);if(_0x68aaaa[_0x1d6a50(0xb15)])_0x1fa484[_0x1d6a50(0x7dd)](_0x1d6a50(0x785));for(const _0x3b44aa of _0x700403){if('GOebU'===_0x1d6a50(0xb2e)){if(!_0x3b44aa)continue;if(_0x68aaaa[_0x1d6a50(0x64a)])_0x1fa484['push'](_0x1d6a50(0x3a9),_0x154b86,_0x3b44aa);}else{const _0x203e76=_0x25d69a[_0x1d6a50(0x2bb)]()?_0x48d0c1[_0x1d6a50(0x871)]:_0x460529[_0x1d6a50(0x275)];_0x203e76&&_0x21aa1d['BattleCore'][_0x1d6a50(0x901)]['BattleLog'][_0x1d6a50(0x37b)]&&(this['push']('fnordAddedStates'),this['push'](_0x1d6a50(0x234)),this[_0x1d6a50(0x7dd)](_0x1d6a50(0x664)),this['push']('addText',_0x203e76[_0x1d6a50(0x4a7)](_0xe4ae05[_0x1d6a50(0x453)]())),this[_0x1d6a50(0x7dd)]('wait')),_0x2d678c['id']===_0x44b21b[_0x1d6a50(0x597)]()&&this[_0x1d6a50(0x7dd)]('performCollapse',_0x509a9f);}}}else _0x25f65c['BattleCore'][_0x1d6a50(0xb35)][_0x1d6a50(0x73d)](this),this[_0x1d6a50(0x8d7)]();}if(_0x28b342&&_0x154b86[_0x1d6a50(0x2bb)]()){if(_0x1d6a50(0xb82)!==_0x1d6a50(0x34a))_0x1fa484[_0x1d6a50(0x7dd)](_0x1d6a50(0x5de),_0x154b86);else return _0x18d4e9[_0x1d6a50(0x735)]();}if(_0x68aaaa[_0x1d6a50(0x8a1)])_0x1fa484['push'](_0x1d6a50(0x80f),_0x154b86,_0x700403,![]);_0x40e8fa[_0x1d6a50(0x27b)](_0x1d6a50(0x725));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Set_TargetActionSet',_0x468c60=>{const _0x21d0d1=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x21d0d1(0xb83)](_0x468c60,_0x468c60);const _0x58ae33=$gameTemp['getLastPluginCommandInterpreter'](),_0x297fe1=BattleManager[_0x21d0d1(0x58b)],_0x25e977=BattleManager['_subject'],_0x9f7326=BattleManager['_allTargets']?BattleManager[_0x21d0d1(0x4ff)][_0x21d0d1(0xa39)](0x0):[],_0x1762f8=BattleManager['_logWindow'],_0x23049b=_0x468c60[_0x21d0d1(0x931)]??![];if(!_0x58ae33||!_0x297fe1||!_0x25e977)return;if(!_0x297fe1[_0x21d0d1(0x33b)]())return;let _0x15c190=_0x23049b?_0x1762f8[_0x21d0d1(0x1c9)](_0x25e977):0x1;for(let _0x246c7e=0x0;_0x246c7e<_0x15c190;_0x246c7e++){if(_0x21d0d1(0x8e3)==='hhbRj')return!![];else for(const _0x3fd298 of _0x9f7326){if(!_0x3fd298)continue;_0x23049b&&_0x25e977[_0x21d0d1(0x2bb)]()&&_0x1762f8[_0x21d0d1(0x7dd)](_0x21d0d1(0x348),_0x25e977,_0x246c7e);if(_0x468c60['PerformAction'])_0x1762f8[_0x21d0d1(0x7dd)]('performAction',_0x25e977,_0x297fe1);if(_0x468c60[_0x21d0d1(0x88c)]>0x0)_0x1762f8['push']('waitCount',_0x468c60['WaitCount1']);if(_0x468c60[_0x21d0d1(0x6ed)])_0x1762f8[_0x21d0d1(0x7dd)](_0x21d0d1(0xb5c),_0x25e977,[_0x3fd298],_0x297fe1[_0x21d0d1(0x33b)]()[_0x21d0d1(0xacf)]);if(_0x468c60[_0x21d0d1(0x3c6)]>0x0)_0x1762f8[_0x21d0d1(0x7dd)]('waitCount',_0x468c60['WaitCount2']);if(_0x468c60[_0x21d0d1(0x64a)])_0x1762f8[_0x21d0d1(0x7dd)](_0x21d0d1(0x3a9),_0x25e977,_0x3fd298);}}_0x23049b&&_0x25e977['isActor']()&&_0x1762f8['push'](_0x21d0d1(0x5de),_0x25e977);if(_0x468c60[_0x21d0d1(0x8a1)])_0x1762f8[_0x21d0d1(0x7dd)](_0x21d0d1(0x80f),_0x25e977,_0x9f7326,![]);_0x58ae33[_0x21d0d1(0x27b)](_0x21d0d1(0x725));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Set_FinishAction',_0xb10714=>{const _0x10a9a6=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x10a9a6(0xb83)](_0xb10714,_0xb10714);const _0x47a17a=$gameTemp[_0x10a9a6(0x292)](),_0x1175e9=BattleManager['_action'],_0x4c241b=BattleManager[_0x10a9a6(0xa98)],_0x2d1b39=BattleManager[_0x10a9a6(0x4ff)]?BattleManager[_0x10a9a6(0x4ff)][_0x10a9a6(0xa39)](0x0):[],_0x1b0af8=BattleManager['_logWindow'];if(!_0x47a17a||!_0x1175e9||!_0x4c241b)return;if(!_0x1175e9[_0x10a9a6(0x33b)]())return;if(_0xb10714[_0x10a9a6(0x8a1)])_0x1b0af8[_0x10a9a6(0x7dd)]('applyImmortal',_0x4c241b,_0x2d1b39,![]);if(_0xb10714[_0x10a9a6(0x930)])_0x1b0af8[_0x10a9a6(0x7dd)](_0x10a9a6(0x1c4));if(_0xb10714[_0x10a9a6(0x537)])_0x1b0af8[_0x10a9a6(0x7dd)]('waitForEffect');if(_0xb10714['ClearBattleLog'])_0x1b0af8['push']('clear');if(_0xb10714[_0x10a9a6(0xac9)])_0x1b0af8[_0x10a9a6(0x7dd)](_0x10a9a6(0xb93),_0x4c241b);if(_0xb10714[_0x10a9a6(0x6dc)])_0x1b0af8[_0x10a9a6(0x7dd)]('waitForMovement');_0x47a17a[_0x10a9a6(0x27b)](_0x10a9a6(0x725));}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_ChangeAngle',_0x5014e5=>{const _0x4369f2=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4369f2(0xb83)](_0x5014e5,_0x5014e5);const _0x45152b=$gameTemp[_0x4369f2(0x292)](),_0x4abba5=_0x5014e5[_0x4369f2(0x501)];if(!_0x45152b)return;$gameScreen['setBattleAngle'](_0x5014e5[_0x4369f2(0xae3)],_0x5014e5[_0x4369f2(0x20d)],_0x5014e5[_0x4369f2(0xa3f)]);if(_0x4abba5)_0x45152b[_0x4369f2(0x27b)]('battleAngle');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x811),_0x1fefc8=>{const _0x440959=_0x3ffb9d;if(!SceneManager[_0x440959(0x341)]())return;if(!Imported[_0x440959(0x8ba)])return;VisuMZ[_0x440959(0xb83)](_0x1fefc8,_0x1fefc8);const _0xfc0f63=$gameTemp[_0x440959(0x292)](),_0xa530b0=_0x1fefc8[_0x440959(0x501)];if(!_0xfc0f63)return;$gameScreen[_0x440959(0x95b)](0x0,_0x1fefc8[_0x440959(0x20d)],_0x1fefc8[_0x440959(0xa3f)]);if(_0xa530b0)_0xfc0f63[_0x440959(0x27b)](_0x440959(0x8e1));}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x78c),_0x4d9c29=>{const _0x2c8471=_0x3ffb9d;if(!SceneManager[_0x2c8471(0x341)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;const _0x4423df=$gameTemp[_0x2c8471(0x292)]();if(!_0x4423df)return;_0x4423df['setWaitMode'](_0x2c8471(0x8e1));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x323),_0x9b6d1f=>{const _0x557591=_0x3ffb9d;if(!SceneManager[_0x557591(0x341)]())return;VisuMZ[_0x557591(0xb83)](_0x9b6d1f,_0x9b6d1f);const _0xbcc2cc=$gameTemp[_0x557591(0x292)](),_0x303390=BattleManager[_0x557591(0x58b)],_0x2d705f=BattleManager['_subject'],_0x59d591=VisuMZ[_0x557591(0xb89)](_0x9b6d1f[_0x557591(0x692)]),_0x283619=_0x9b6d1f[_0x557591(0x1df)],_0x59ef32=BattleManager[_0x557591(0x492)];if(!_0xbcc2cc||!_0x303390||!_0x2d705f)return;if(!_0x303390[_0x557591(0x33b)]())return;let _0x42d1bb=_0x303390[_0x557591(0x33b)]()['animationId'];if(_0x42d1bb<0x0)_0x42d1bb=_0x2d705f[_0x557591(0x93f)]();$gameTemp['requestAnimation'](_0x59d591,_0x42d1bb,_0x283619);if(_0x9b6d1f[_0x557591(0xb15)]){if(_0x557591(0x8d0)===_0x557591(0x8d0))_0xbcc2cc[_0x557591(0x27b)](_0x557591(0x73c));else{if(_0x550f56[_0x557591(0x4e4)]()&&this[_0x557591(0xa3b)]==='casting')return this[_0x557591(0x677)]()?this[_0x557591(0x33f)]()&&this[_0x557591(0x33f)]()['item']()&&!this['currentAction']()['isMagical']():this[_0x557591(0x33f)]()&&this[_0x557591(0x33f)]()['item']()&&!this[_0x557591(0x33f)]()[_0x557591(0xa93)]();return![];}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x3cf),_0x1dcadd=>{const _0x5e7ca3=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e7ca3(0xb83)](_0x1dcadd,_0x1dcadd);const _0x5b7a50=$gameTemp[_0x5e7ca3(0x292)](),_0x4397d3=BattleManager[_0x5e7ca3(0xa98)],_0x4aa416=VisuMZ[_0x5e7ca3(0xb89)](_0x1dcadd['Targets']),_0x5b7653=_0x1dcadd[_0x5e7ca3(0x1df)],_0x39c559=BattleManager['_logWindow'];if(!_0x5b7a50||!_0x4397d3)return;const _0x463ec6=_0x4397d3[_0x5e7ca3(0x93f)]();$gameTemp[_0x5e7ca3(0x418)](_0x4aa416,_0x463ec6,_0x5b7653);if(_0x1dcadd[_0x5e7ca3(0xb15)]){if(_0x5e7ca3(0xb23)!==_0x5e7ca3(0xa37))_0x5b7a50['setWaitMode'](_0x5e7ca3(0x73c));else{if(!_0x56a5ee['isSideView']())return;const _0x1b61af=this[_0x5e7ca3(0x491)]();if(!_0x1b61af)return;_0x1b61af[_0x5e7ca3(0x64e)](_0x11855c,_0xa470c,_0x2ef1f6);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x94b),_0x3073f1=>{const _0x34660b=_0x3ffb9d;if(!SceneManager[_0x34660b(0x341)]())return;VisuMZ['ConvertParams'](_0x3073f1,_0x3073f1);const _0x2d72bc=_0x8fce59[_0x34660b(0x67d)](_0x3073f1[_0x34660b(0xbbe)]);if(_0x2d72bc<=0x0)return;const _0x2259bb=$gameTemp['getLastPluginCommandInterpreter'](),_0x8fce59=BattleManager[_0x34660b(0xa98)],_0x80ffb=VisuMZ[_0x34660b(0xb89)](_0x3073f1[_0x34660b(0x692)]),_0x13d339=_0x3073f1[_0x34660b(0x1df)],_0x1c83ca=BattleManager[_0x34660b(0x492)];if(!_0x2259bb||!_0x8fce59)return;$gameTemp[_0x34660b(0x418)](_0x80ffb,_0x2d72bc,_0x13d339),_0x3073f1['WaitForAnimation']&&_0x2259bb['setWaitMode'](_0x34660b(0x73c));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x29f),_0x1917e2=>{const _0x5621b6=_0x3ffb9d;if(!SceneManager[_0x5621b6(0x341)]())return;VisuMZ[_0x5621b6(0xb83)](_0x1917e2,_0x1917e2);const _0x502cff=$gameTemp['getLastPluginCommandInterpreter'](),_0x3e0cd2=BattleManager[_0x5621b6(0x58b)],_0x9a2d6c=_0x1917e2[_0x5621b6(0x1df)],_0x248b6e=VisuMZ['CreateActionSequenceTargets'](_0x1917e2[_0x5621b6(0x692)]);if(!_0x502cff||!_0x3e0cd2)return;if(!_0x3e0cd2[_0x5621b6(0x33b)]())return;for(const _0x77a147 of _0x248b6e){if(_0x5621b6(0x696)==='ihvxs'){if(!_0x77a147)continue;_0x77a147[_0x5621b6(0x680)](_0x3e0cd2,_0x9a2d6c);}else{const _0x33fef3=new _0x299249();_0x33fef3[_0x5621b6(0x6a0)]=_0x1fc02c['loadSystem'](_0x357a53[_0x5621b6(0x257)]),_0x33fef3['x']=_0xe1ed68[_0x5621b6(0xbab)]||0x0,_0x33fef3['y']=_0x38ec5e[_0x5621b6(0x7f0)]||0x0,this[_0x5621b6(0xaff)](_0x33fef3),this[_0x5621b6(0x9db)]=_0x33fef3;}}if(_0x1917e2[_0x5621b6(0xb15)])_0x502cff[_0x5621b6(0x27b)](_0x5621b6(0x73c));}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Animation_ChangeBattlePortrait',_0x13d322=>{const _0x375bbc=_0x3ffb9d;VisuMZ[_0x375bbc(0xb83)](_0x13d322,_0x13d322);const _0x30b907=$gameTemp[_0x375bbc(0x292)](),_0x3d0d7a=VisuMZ[_0x375bbc(0xb89)](_0x13d322[_0x375bbc(0x692)]),_0x2cd667=_0x13d322[_0x375bbc(0x3a1)];if(!_0x2cd667)return;for(const _0x279f5c of _0x3d0d7a){if(_0x375bbc(0x907)==='tbreg'){if(!_0x279f5c)continue;if(!_0x279f5c[_0x375bbc(0x2bb)]())continue;_0x279f5c[_0x375bbc(0x70b)](_0x2cd667);}else{if(!this['canMove']())return;if(!this['_distortionSprite'])return;if(this[_0x375bbc(0xc18)]===_0x2459d4&&this[_0x375bbc(0x9c8)]===_0x6a80aa)return;this['_targetGrowX']=_0x49a8e6,this[_0x375bbc(0x9c8)]=_0x2c1828,this['_growDuration']=_0x3626d1,this[_0x375bbc(0x7ed)]=_0x2bf642,this[_0x375bbc(0xa1e)]=_0x7b323b||_0x375bbc(0xb45),_0x1aee3d<=0x0&&(this['_growX']=this[_0x375bbc(0xc18)],this[_0x375bbc(0x7d7)]=this[_0x375bbc(0x9c8)]);}}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x3c5),_0x3a3497=>{const _0xe8fcc2=_0x3ffb9d;if(!SceneManager[_0xe8fcc2(0x947)])return;if(!SceneManager[_0xe8fcc2(0x947)][_0xe8fcc2(0x9da)])return;if(!Imported[_0xe8fcc2(0x820)])return;VisuMZ[_0xe8fcc2(0xb83)](_0x3a3497,_0x3a3497);const _0x288541=$gameTemp[_0xe8fcc2(0x292)](),_0x591b70=Math['round'](_0x3a3497[_0xe8fcc2(0x649)]),_0x501ceb=Math[_0xe8fcc2(0x68f)](_0x3a3497[_0xe8fcc2(0x446)]);$gameTemp['requestPointAnimation'](_0x591b70,_0x501ceb,_0x3a3497[_0xe8fcc2(0x20e)],_0x3a3497['Mirror'],_0x3a3497[_0xe8fcc2(0x645)]),_0x3a3497['WaitComplete']&&_0x288541&&(SceneManager[_0xe8fcc2(0x947)]['_spriteset']['updatePointAnimations'](),_0x288541['setWaitMode'](_0xe8fcc2(0x73c)));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x569),_0x31e685=>{const _0x339dcb=_0x3ffb9d;if(!SceneManager[_0x339dcb(0x341)]())return;VisuMZ[_0x339dcb(0xb83)](_0x31e685,_0x31e685);const _0x14b1a4=$gameTemp[_0x339dcb(0x292)](),_0x254e82=VisuMZ[_0x339dcb(0xb89)](_0x31e685[_0x339dcb(0x692)]),_0x239ad9=_0x31e685[_0x339dcb(0x20e)],_0x258d91=_0x31e685['Mirror'];if(!_0x14b1a4)return;$gameTemp[_0x339dcb(0x418)](_0x254e82,_0x239ad9,_0x258d91);if(_0x31e685['WaitForAnimation'])_0x14b1a4['setWaitMode'](_0x339dcb(0x73c));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x4bd),_0x217a8a=>{const _0x107f66=_0x3ffb9d;if(!SceneManager[_0x107f66(0x341)]())return;const _0x3967ab=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x3967ab)return;_0x3967ab[_0x107f66(0x27b)](_0x107f66(0x73c));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x830),_0x31b4ed=>{const _0x46cc87=_0x3ffb9d;if(!SceneManager[_0x46cc87(0x341)]())return;VisuMZ['ConvertParams'](_0x31b4ed,_0x31b4ed);const _0x29605e=BattleManager[_0x46cc87(0x492)],_0x8b7f7f=_0x31b4ed[_0x46cc87(0x7de)]&&Imported['VisuMZ_4_CombatLog'];_0x29605e[_0x46cc87(0x7dc)](_0x31b4ed['Text']),_0x8b7f7f&&Imported[_0x46cc87(0x874)]&&$gameSystem[_0x46cc87(0x317)](_0x31b4ed[_0x46cc87(0x6e7)]||'',_0x31b4ed[_0x46cc87(0x2d8)]||0x0);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x57a),_0x2e6b56=>{const _0x464a12=_0x3ffb9d;if(!SceneManager[_0x464a12(0x341)]())return;const _0xd48616=BattleManager['_logWindow'];_0xd48616['clear']();}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0xa16),_0x598d2e=>{const _0x3be637=_0x3ffb9d;if(!SceneManager[_0x3be637(0x341)]())return;const _0x398bdf=$gameTemp[_0x3be637(0x292)](),_0x37869e=BattleManager[_0x3be637(0x58b)],_0x1b7edc=BattleManager['_subject'],_0x55bca6=BattleManager[_0x3be637(0x492)];if(!_0x398bdf||!_0x37869e||!_0x1b7edc)return;if(!_0x37869e[_0x3be637(0x33b)]())return;_0x55bca6[_0x3be637(0x941)](_0x1b7edc,_0x37869e[_0x3be637(0x33b)]()),_0x398bdf[_0x3be637(0x27b)]('battlelog');}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x2b3),_0x40e37c=>{const _0x54e726=_0x3ffb9d;if(!SceneManager[_0x54e726(0x341)]())return;const _0x24e6d5=BattleManager[_0x54e726(0x492)];_0x24e6d5[_0x54e726(0x234)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x7f6),_0xa44d80=>{const _0x47563b=_0x3ffb9d;if(!SceneManager[_0x47563b(0x341)]())return;const _0x33940b=BattleManager[_0x47563b(0x492)];_0x33940b[_0x47563b(0x664)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x35b),_0x502cb6=>{const _0x46f0e3=_0x3ffb9d;if(!SceneManager[_0x46f0e3(0x341)]())return;const _0x4286a9=BattleManager[_0x46f0e3(0x492)];_0x4286a9[_0x46f0e3(0x96b)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x516),_0x38defe=>{const _0x30ab51=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x30ab51(0xb83)](_0x38defe,_0x38defe),SceneManager['_scene'][_0x30ab51(0xaba)](_0x38defe['ShowHide']);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_BattleLog_WaitForBattleLog',_0x3415c0=>{const _0xad2bb1=_0x3ffb9d;if(!SceneManager[_0xad2bb1(0x341)]())return;const _0x2a1775=$gameTemp[_0xad2bb1(0x292)]();_0x2a1775[_0xad2bb1(0x27b)](_0xad2bb1(0x725));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x2ae),_0x5c8f01=>{const _0xfa3ec3=_0x3ffb9d;if(!SceneManager[_0xfa3ec3(0x341)]())return;const _0x42e562=$gameTemp[_0xfa3ec3(0x292)](),_0x1695e0=BattleManager[_0xfa3ec3(0x492)];_0x1695e0[_0xfa3ec3(0x1c4)](),_0x42e562[_0xfa3ec3(0x27b)]('battlelog');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x2c3),_0x3ad2ef=>{const _0x40c5e1=_0x3ffb9d;if(!SceneManager[_0x40c5e1(0x341)]())return;if(!Imported[_0x40c5e1(0x8ba)])return;VisuMZ[_0x40c5e1(0xb83)](_0x3ad2ef,_0x3ad2ef);const _0x2780fc=$gameScreen[_0x40c5e1(0x320)]();_0x2780fc['cameraClamp']=_0x3ad2ef[_0x40c5e1(0x1ef)];}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x9aa),_0x206107=>{const _0xf36885=_0x3ffb9d;if(!SceneManager[_0xf36885(0x341)]())return;if(!Imported[_0xf36885(0x8ba)])return;VisuMZ[_0xf36885(0xb83)](_0x206107,_0x206107);const _0x420c98=$gameTemp[_0xf36885(0x292)](),_0x294ddd=_0x206107[_0xf36885(0x998)];$gameScreen['setBattleCameraPoint'](_0x206107[_0xf36885(0x357)],_0x206107['FocusY'],_0x206107['Duration'],_0x206107['EasingType']);if(_0x294ddd)_0x420c98[_0xf36885(0x27b)]('battleCamera');}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x7e9),_0x474bcc=>{const _0x586d6a=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x586d6a(0x8ba)])return;VisuMZ['ConvertParams'](_0x474bcc,_0x474bcc);const _0x2499d2=$gameTemp[_0x586d6a(0x292)](),_0x139c9b=VisuMZ['CreateActionSequenceTargets'](_0x474bcc[_0x586d6a(0x692)]),_0x5eec6c=_0x474bcc[_0x586d6a(0x998)];$gameScreen[_0x586d6a(0xa5a)](_0x139c9b,_0x474bcc[_0x586d6a(0x20d)],_0x474bcc[_0x586d6a(0xa3f)]);if(_0x5eec6c)_0x2499d2['setWaitMode'](_0x586d6a(0xbf5));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x6ab),_0x7aac7c=>{const _0x500d85=_0x3ffb9d;if(!SceneManager[_0x500d85(0x341)]())return;if(!Imported[_0x500d85(0x8ba)])return;VisuMZ['ConvertParams'](_0x7aac7c,_0x7aac7c);const _0x42dad3=$gameTemp['getLastPluginCommandInterpreter'](),_0x5795c5=_0x7aac7c['WaitForCamera'];$gameScreen[_0x500d85(0x377)](_0x7aac7c['OffsetX'],_0x7aac7c['OffsetY'],_0x7aac7c[_0x500d85(0x20d)],_0x7aac7c[_0x500d85(0xa3f)]);if(_0x5795c5)_0x42dad3[_0x500d85(0x27b)](_0x500d85(0xbf5));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x228),_0x3377ba=>{const _0x620b80=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x620b80(0x8ba)])return;VisuMZ[_0x620b80(0xb83)](_0x3377ba,_0x3377ba);const _0x45ce40=$gameTemp['getLastPluginCommandInterpreter'](),_0x3bd28b=_0x3377ba['ResetFocus'],_0x48d304=_0x3377ba['ResetOffset'],_0x42118f=_0x3377ba[_0x620b80(0x998)];if(_0x3bd28b){if('kTchm'!=='RepmG'){const _0x1299e3=Math[_0x620b80(0x68f)](Graphics[_0x620b80(0x7d6)]/0x2),_0x7bfbbd=Math[_0x620b80(0x68f)](Graphics[_0x620b80(0x8a0)]/0x2);$gameScreen['setBattleCameraPoint'](_0x1299e3,_0x7bfbbd,_0x3377ba[_0x620b80(0x20d)],_0x3377ba[_0x620b80(0xa3f)]);}else return this[_0x620b80(0xc16)]();}_0x48d304&&$gameScreen[_0x620b80(0x377)](0x0,0x0,_0x3377ba[_0x620b80(0x20d)],_0x3377ba[_0x620b80(0xa3f)]);if(_0x42118f)_0x45ce40[_0x620b80(0x27b)](_0x620b80(0xbf5));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Camera_WaitForCamera',_0x131e2c=>{const _0x2c5b3c=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x2c5b3c(0x8ba)])return;const _0x4ef86f=$gameTemp[_0x2c5b3c(0x292)]();if(!_0x4ef86f)return;_0x4ef86f[_0x2c5b3c(0x27b)](_0x2c5b3c(0xbf5));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x7b8),_0x377b2f=>{const _0x353d95=_0x3ffb9d;if(!SceneManager[_0x353d95(0x341)]())return;if(!Imported[_0x353d95(0xa5e)])return;VisuMZ[_0x353d95(0xb83)](_0x377b2f,_0x377b2f);const _0x487c1c=VisuMZ[_0x353d95(0xb89)](_0x377b2f[_0x353d95(0x692)]),_0x461d0b=_0x377b2f[_0x353d95(0x511)][_0x353d95(0x456)]()[_0x353d95(0x33a)]();for(const _0x592265 of _0x487c1c){if(!_0x592265)continue;_0x592265[_0x353d95(0x90e)](_0x461d0b);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x5dc),_0x315718=>{const _0x596072=_0x3ffb9d;if(!SceneManager[_0x596072(0x341)]())return;if(!Imported[_0x596072(0xa5e)])return;VisuMZ[_0x596072(0xb83)](_0x315718,_0x315718);const _0x2170a5=VisuMZ['CreateActionSequenceTargets'](_0x315718['Targets']),_0x24852a=_0x315718[_0x596072(0xa6a)];for(const _0x2d4f62 of _0x2170a5){if(_0x596072(0x5e1)!==_0x596072(0x5e1)){if(!_0x1889fb[_0x596072(0x6de)]())return;const _0xeb36da=this['battler']();if(!_0xeb36da)return;this[_0x596072(0x2bb)]()&&(_0x16657a*=-0x1,_0x13d740*=-0x1),_0xeb36da[_0x596072(0x6c8)](_0x2a5cc3,_0x3f5843,_0x5196e4,_0x2c23ae);}else{if(!_0x2d4f62)continue;_0x2d4f62[_0x596072(0xbda)]()[_0x596072(0x773)]=_0x24852a;}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x551),_0x506d7b=>{const _0x1be40a=_0x3ffb9d;if(!SceneManager[_0x1be40a(0x341)]())return;if(!Imported[_0x1be40a(0x800)])return;VisuMZ['ConvertParams'](_0x506d7b,_0x506d7b);const _0x31933b=BattleManager[_0x1be40a(0x58b)],_0x30cda6=_0x506d7b[_0x1be40a(0x360)];if(!_0x31933b)return;_0x31933b['_battleCoreAddedElements']=_0x30cda6;}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xb8c),_0x207809=>{const _0x92a44b=_0x3ffb9d;if(!SceneManager[_0x92a44b(0x341)]())return;if(!Imported[_0x92a44b(0x800)])return;const _0x492860=BattleManager['_action'];if(!_0x492860)return;_0x492860[_0x92a44b(0xa70)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x383),_0x21edc0=>{const _0x198139=_0x3ffb9d;if(!SceneManager[_0x198139(0x341)]())return;if(!Imported['VisuMZ_1_ElementStatusCore'])return;VisuMZ[_0x198139(0xb83)](_0x21edc0,_0x21edc0);const _0x4a40f8=BattleManager[_0x198139(0x58b)],_0x4fcd32=_0x21edc0['Elements'];if(!_0x4a40f8)return;_0x4a40f8[_0x198139(0x2d6)]=_0x4fcd32;}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x3c8),_0x4df100=>{const _0x4e8b8f=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x4e8b8f(0x800)])return;const _0x3b88ba=BattleManager[_0x4e8b8f(0x58b)];if(!_0x3b88ba)return;_0x3b88ba['_battleCoreNoElement']=!![];}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x9f5),_0x486664=>{const _0x16672d=_0x3ffb9d;if(!Imported[_0x16672d(0x325)])return;if(!SceneManager[_0x16672d(0x341)]())return;VisuMZ[_0x16672d(0xb83)](_0x486664,_0x486664);const _0x3bb393=VisuMZ[_0x16672d(0xb89)](_0x486664['Targets']);for(const _0x183ca0 of _0x3bb393){if(!_0x183ca0)continue;_0x183ca0['removeHorrorEffect'](_0x16672d(0x72e)),_0x183ca0['removeHorrorEffect']('glitch'),_0x183ca0[_0x16672d(0x567)]('tv'),_0x183ca0[_0x16672d(0xa56)]();}$gamePlayer[_0x16672d(0x96b)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x4f9),_0x4a7072=>{const _0x1573d1=_0x3ffb9d;if(!Imported[_0x1573d1(0x325)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x1573d1(0xb83)](_0x4a7072,_0x4a7072);const _0x82a9c1=VisuMZ[_0x1573d1(0xb89)](_0x4a7072[_0x1573d1(0x692)]),_0x41b11d='glitch';_0x4a7072[_0x1573d1(0x9c5)]=Math[_0x1573d1(0x21e)](_0x4a7072[_0x1573d1(0xbe9)]/0x2),_0x4a7072[_0x1573d1(0xb31)]=_0x4a7072[_0x1573d1(0xbe9)],_0x4a7072[_0x1573d1(0x6e2)]=!![];for(const _0x575ad0 of _0x82a9c1){if(!_0x575ad0)continue;_0x575ad0[_0x1573d1(0x6b2)](_0x41b11d,_0x4a7072);}$gamePlayer[_0x1573d1(0x96b)]();}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xa9b),_0x4f8438=>{const _0x163899=_0x3ffb9d;if(!Imported[_0x163899(0x325)])return;if(!SceneManager[_0x163899(0x341)]())return;VisuMZ[_0x163899(0xb83)](_0x4f8438,_0x4f8438);const _0x153311=VisuMZ[_0x163899(0xb89)](_0x4f8438['Targets']);for(const _0x143c6e of _0x153311){if(!_0x143c6e)continue;_0x143c6e['removeHorrorEffect'](_0x163899(0x858));}$gamePlayer[_0x163899(0x96b)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Horror_NoiseCreate',_0x5f3d7f=>{const _0x79a3f2=_0x3ffb9d;if(!Imported[_0x79a3f2(0x325)])return;if(!SceneManager[_0x79a3f2(0x341)]())return;VisuMZ[_0x79a3f2(0xb83)](_0x5f3d7f,_0x5f3d7f);const _0xf60494=VisuMZ[_0x79a3f2(0xb89)](_0x5f3d7f[_0x79a3f2(0x692)]),_0x2cea8d=_0x79a3f2(0x72e);for(const _0x1d6c1c of _0xf60494){if('Kepiu'===_0x79a3f2(0xbbf))return![];else{if(!_0x1d6c1c)continue;_0x1d6c1c[_0x79a3f2(0x6b2)](_0x2cea8d,_0x5f3d7f);}}$gamePlayer['refresh']();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x480),_0x401ed9=>{const _0x172b2b=_0x3ffb9d;if(!Imported[_0x172b2b(0x325)])return;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x172b2b(0xb83)](_0x401ed9,_0x401ed9);const _0x1930e3=VisuMZ['CreateActionSequenceTargets'](_0x401ed9['Targets']);for(const _0x53b323 of _0x1930e3){if('uMTKp'!==_0x172b2b(0x35f)){if(!_0x53b323)continue;_0x53b323[_0x172b2b(0x567)](_0x172b2b(0x72e));}else this[_0x172b2b(0x20b)]&&this['addChild'](this['_frontAttachmentSprite']),this[_0x172b2b(0x9db)]&&this[_0x172b2b(0xaff)](this['_backAttachmentSprite']);}$gamePlayer[_0x172b2b(0x96b)]();}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xad6),_0x4c1d75=>{const _0x315d93=_0x3ffb9d;if(!Imported[_0x315d93(0x325)])return;if(!SceneManager[_0x315d93(0x341)]())return;VisuMZ['ConvertParams'](_0x4c1d75,_0x4c1d75);const _0x4a67da=VisuMZ['CreateActionSequenceTargets'](_0x4c1d75['Targets']),_0x41fa47='tv';for(const _0xd00de9 of _0x4a67da){if(!_0xd00de9)continue;_0xd00de9['setHorrorEffectSettings'](_0x41fa47,_0x4c1d75);}$gamePlayer[_0x315d93(0x96b)]();}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x35c),_0x5470df=>{const _0xaa8990=_0x3ffb9d;if(!Imported[_0xaa8990(0x325)])return;if(!SceneManager[_0xaa8990(0x341)]())return;VisuMZ[_0xaa8990(0xb83)](_0x5470df,_0x5470df);const _0x90b6da=VisuMZ[_0xaa8990(0xb89)](_0x5470df[_0xaa8990(0x692)]);for(const _0x4fb5c4 of _0x90b6da){if(!_0x4fb5c4)continue;_0x4fb5c4[_0xaa8990(0x567)]('tv');}$gamePlayer[_0xaa8990(0x96b)]();}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Impact_BlueRedInvert',_0x5f4c22=>{const _0x2f3ef4=_0x3ffb9d;if(!Imported[_0x2f3ef4(0x240)])return;const _0x905890=SceneManager['_scene']['_spriteset'];if(!_0x905890)return;if(VisuMZ[_0x2f3ef4(0x8bb)][_0x2f3ef4(0x3c3)]<=1.04){if(_0x2f3ef4(0x875)===_0x2f3ef4(0x875)){alert(_0x2f3ef4(0xa11)),SceneManager[_0x2f3ef4(0x6b5)]();return;}else{_0x513869[_0x2f3ef4(0x4ea)](_0x2251e2);if(_0x4a17b1)_0x34907f['atbInterrupt']();}}VisuMZ[_0x2f3ef4(0xb83)](_0x5f4c22,_0x5f4c22);const _0x316e5f=_0x5f4c22[_0x2f3ef4(0x557)];_0x905890[_0x2f3ef4(0x294)](_0x316e5f);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x628),_0x53d64a=>{const _0x1746e7=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1746e7(0x240)])return;const _0x3c52ef=SceneManager[_0x1746e7(0x947)][_0x1746e7(0x9da)];if(!_0x3c52ef)return;VisuMZ[_0x1746e7(0xb83)](_0x53d64a,_0x53d64a);const _0x493b99=_0x53d64a[_0x1746e7(0x894)]||0x1,_0x3f7cbc=_0x53d64a['Duration']||0x1,_0x5ad2fc=_0x53d64a[_0x1746e7(0xa3f)]||'Linear';_0x3c52ef[_0x1746e7(0xa6d)](_0x493b99,_0x3f7cbc,_0x5ad2fc);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xad2),_0x404341=>{const _0x4ffd78=_0x3ffb9d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x140c62=SceneManager[_0x4ffd78(0x947)][_0x4ffd78(0x9da)];if(!_0x140c62)return;if(VisuMZ['ActSeqImpact']['version']<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager['exit']();return;}VisuMZ[_0x4ffd78(0xb83)](_0x404341,_0x404341);const _0x522005=_0x404341['Enable'];_0x140c62['setupDesaturateImpactFilter'](_0x522005);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x395),_0x1139ef=>{const _0x1b49e0=_0x3ffb9d;if(!SceneManager[_0x1b49e0(0x341)]())return;if(!Imported[_0x1b49e0(0x240)])return;const _0x53a012=SceneManager[_0x1b49e0(0x947)]['_spriteset'];if(!_0x53a012)return;VisuMZ[_0x1b49e0(0xb83)](_0x1139ef,_0x1139ef);const _0x416082=Number(_0x1139ef[_0x1b49e0(0xae3)])||0x0,_0x72c9d0=Number(_0x1139ef[_0x1b49e0(0x780)]),_0x5f463a=_0x1139ef['Duration']||0x1,_0x3fea35=_0x1139ef[_0x1b49e0(0xa3f)]||'Linear';_0x53a012[_0x1b49e0(0x89b)](_0x416082,_0x72c9d0,_0x5f463a,_0x3fea35);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x5ad),_0x2c6f34=>{const _0x4075a0=_0x3ffb9d;if(!SceneManager[_0x4075a0(0x341)]())return;if(!Imported[_0x4075a0(0x240)])return;const _0x3969e5=SceneManager[_0x4075a0(0x947)]['_spriteset'];if(!_0x3969e5)return;VisuMZ[_0x4075a0(0xb83)](_0x2c6f34,_0x2c6f34);const _0x4c61ea=Number(_0x2c6f34[_0x4075a0(0xae3)])||0x0,_0x2801e9=Number(_0x2c6f34[_0x4075a0(0x780)]),_0x2bf385=_0x2c6f34[_0x4075a0(0x20d)]||0x1,_0x22910d=_0x2c6f34['EasingType']||'Linear',_0x31b59e=VisuMZ['CreateActionSequenceTargets'](_0x2c6f34['Targets']);for(const _0x159c39 of _0x31b59e){if('XEfFs'===_0x4075a0(0x808))_0x1db7e0=this[_0x4075a0(0x95e)][_0x4075a0(0xa2e)](),_0x3471b4=this[_0x4075a0(0x8b0)][_0x4075a0(0x9ca)]();else{if(!_0x159c39)continue;if(!_0x159c39['battler']())continue;_0x159c39[_0x4075a0(0x491)]()[_0x4075a0(0x89b)](_0x4c61ea,_0x2801e9,_0x2bf385,_0x22910d);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xa64),_0x3c1ad8=>{const _0xb3cbf3=_0x3ffb9d;if(!SceneManager[_0xb3cbf3(0x341)]())return;if(!Imported['VisuMZ_3_ActSeqImpact'])return;VisuMZ['ConvertParams'](_0x3c1ad8,_0x3c1ad8);const _0x45fa7d={'delay':_0x3c1ad8[_0xb3cbf3(0x1bc)],'duration':_0x3c1ad8['duration'],'hue':_0x3c1ad8[_0xb3cbf3(0x367)],'opacityStart':_0x3c1ad8[_0xb3cbf3(0x6ae)],'tone':_0x3c1ad8['tone'],'visible':!![]},_0x27b1fc=VisuMZ[_0xb3cbf3(0xb89)](_0x3c1ad8[_0xb3cbf3(0x692)]);for(const _0x1721b8 of _0x27b1fc){if(_0xb3cbf3(0x1c1)!==_0xb3cbf3(0x326)){if(!_0x1721b8)continue;_0x1721b8[_0xb3cbf3(0x63a)](_0x45fa7d);}else{const _0x10f1f2=_0x4ea7e8['item']();this[_0xb3cbf3(0x7dd)]('applyImmortal',_0x4fad62,_0x2721d0,![]),this['push']('waitForNewLine'),this[_0xb3cbf3(0x7dd)](_0xb3cbf3(0xb4e)),this['push'](_0xb3cbf3(0x75e)),this[_0xb3cbf3(0x7dd)](_0xb3cbf3(0xb93),_0x289d48),this[_0xb3cbf3(0x7dd)](_0xb3cbf3(0x361));}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Impact_MotionTrailRemove',_0x2cba66=>{const _0x2216d4=_0x3ffb9d;if(!SceneManager[_0x2216d4(0x341)]())return;if(!Imported[_0x2216d4(0x240)])return;VisuMZ['ConvertParams'](_0x2cba66,_0x2cba66);const _0x1f1501=VisuMZ['CreateActionSequenceTargets'](_0x2cba66[_0x2216d4(0x692)]);for(const _0x1f2e40 of _0x1f1501){if(!_0x1f2e40)continue;_0x1f2e40['clearBattlerMotionTrailData']();}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x8ca),_0x4ba78b=>{const _0x319a77=_0x3ffb9d;if(!Imported[_0x319a77(0x240)])return;const _0x3bb593=SceneManager['_scene'][_0x319a77(0x9da)];if(!_0x3bb593)return;if(VisuMZ[_0x319a77(0x8bb)][_0x319a77(0x3c3)]<=1.04){alert('Action\x20Sequence\x20Impact\x20needs\x20an\x20update!'),SceneManager[_0x319a77(0x6b5)]();return;}VisuMZ[_0x319a77(0xb83)](_0x4ba78b,_0x4ba78b);const _0x180b64=_0x4ba78b['Enable'];_0x3bb593[_0x319a77(0x4a6)](_0x180b64);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x1ab),_0x4c3533=>{const _0x50ffe3=_0x3ffb9d;if(!Imported[_0x50ffe3(0x240)])return;const _0x4a93ae=SceneManager['_scene']['_spriteset'];if(!_0x4a93ae)return;if(VisuMZ['ActSeqImpact'][_0x50ffe3(0x3c3)]<=1.04){alert(_0x50ffe3(0xa11)),SceneManager[_0x50ffe3(0x6b5)]();return;}VisuMZ[_0x50ffe3(0xb83)](_0x4c3533,_0x4c3533);const _0x5cdedc=_0x4c3533[_0x50ffe3(0x557)];_0x4a93ae[_0x50ffe3(0x54c)](_0x5cdedc);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Impact_ShockwavePoint',_0x43a63e=>{const _0x14dc9c=_0x3ffb9d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x45f8e9=SceneManager['_scene']['_spriteset'];if(!_0x45f8e9)return;VisuMZ[_0x14dc9c(0xb83)](_0x43a63e,_0x43a63e);const _0x4932f0=_0x43a63e['X']||0x0,_0x5c09b0=_0x43a63e['Y']||0x0,_0x2dba10=_0x43a63e[_0x14dc9c(0xb9f)]||0x0,_0x21179e=_0x43a63e[_0x14dc9c(0xb71)]||0x0,_0x46bfa2=_0x43a63e['Duration']||0x1;_0x45f8e9[_0x14dc9c(0xb02)](_0x4932f0,_0x5c09b0,_0x2dba10,_0x21179e,_0x46bfa2);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Impact_ShockwaveEachTargets',_0x187431=>{const _0x1688ab=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1688ab(0x240)])return;const _0x14f5cc=SceneManager[_0x1688ab(0x947)][_0x1688ab(0x9da)];if(!_0x14f5cc)return;VisuMZ[_0x1688ab(0xb83)](_0x187431,_0x187431);const _0x3c78f9=VisuMZ[_0x1688ab(0xb89)](_0x187431[_0x1688ab(0x692)]),_0x379ca2=_0x187431[_0x1688ab(0x351)],_0x2ab2f7=_0x187431['OffsetX']||0x0,_0x58dd11=_0x187431[_0x1688ab(0x622)]||0x0,_0x52c8a4=_0x187431[_0x1688ab(0xb9f)]||0x0,_0x5863cd=_0x187431[_0x1688ab(0xb71)]||0x0,_0x4308f2=_0x187431[_0x1688ab(0x20d)]||0x1;for(const _0x39f16a of _0x3c78f9){if(_0x1688ab(0x44d)!==_0x1688ab(0x982)){if(!_0x39f16a)continue;if(!_0x39f16a[_0x1688ab(0x491)]())continue;const _0x544c4=_0x39f16a['battler']();let _0x5de1ea=_0x544c4[_0x1688ab(0x904)],_0x317478=_0x544c4[_0x1688ab(0x531)];_0x5de1ea+=(Graphics[_0x1688ab(0x7d6)]-Graphics[_0x1688ab(0x8f0)])/0x2,_0x317478+=(Graphics['height']-Graphics[_0x1688ab(0xbd1)])/0x2;if(_0x379ca2[_0x1688ab(0x1b7)](/front/i))_0x5de1ea+=(_0x39f16a[_0x1688ab(0x2a7)]()?0x1:-0x1)*_0x544c4[_0x1688ab(0xc2d)]()/0x2;else _0x379ca2[_0x1688ab(0x1b7)](/back/i)&&(_0x1688ab(0x51e)!==_0x1688ab(0x7c3)?_0x5de1ea+=(_0x39f16a[_0x1688ab(0x2a7)]()?-0x1:0x1)*_0x544c4['mainSpriteWidth']()/0x2:(this['_colorType']=_0x59c659[_0x1688ab(0xa10)]>=0x0?0x0:0x1,this['createDigits'](_0xbf9967['hpDamage'])));if(_0x379ca2[_0x1688ab(0x1b7)](/head/i)){if('KaPTI'!==_0x1688ab(0x694)){if(!_0x1ddb5b[_0x1688ab(0x947)]['_uiContainer'])return;_0x9e2f87[_0x1688ab(0x947)][_0x1688ab(0xbca)][_0x1688ab(0x237)](_0xe0ad6c);}else _0x317478-=_0x544c4[_0x1688ab(0xba4)]();}else{if(_0x379ca2[_0x1688ab(0x1b7)](/center/i)){if(_0x1688ab(0x6dd)!=='feYJQ')return _0x3aca17[_0x1688ab(0x491)]()[_0x1688ab(0x904)]-_0x5549fc[_0x1688ab(0x491)]()[_0x1688ab(0x904)];else _0x317478-=_0x544c4[_0x1688ab(0xba4)]()/0x2;}}_0x5de1ea+=_0x2ab2f7,_0x317478+=_0x58dd11,_0x14f5cc[_0x1688ab(0xb02)](_0x5de1ea,_0x317478,_0x52c8a4,_0x5863cd,_0x4308f2);}else _0x51c57c['setValue'](_0x41a859['SwitchCritical'],![]);}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x957),_0xfac69d=>{const _0x4cccfb=_0x3ffb9d;if(!SceneManager[_0x4cccfb(0x341)]())return;if(!Imported[_0x4cccfb(0x240)])return;const _0x17ed84=SceneManager['_scene']['_spriteset'];if(!_0x17ed84)return;VisuMZ[_0x4cccfb(0xb83)](_0xfac69d,_0xfac69d);const _0x50b815=VisuMZ['CreateActionSequenceTargets'](_0xfac69d['Targets']),_0x237d8c=_0xfac69d[_0x4cccfb(0x351)],_0x2be214=_0xfac69d[_0x4cccfb(0x598)]||0x0,_0x3f7399=_0xfac69d[_0x4cccfb(0x622)]||0x0,_0xc14982=_0xfac69d[_0x4cccfb(0xb9f)]||0x0,_0x3c5dcc=_0xfac69d[_0x4cccfb(0xb71)]||0x0,_0x17fe7f=_0xfac69d[_0x4cccfb(0x20d)]||0x1,_0x4f46fb=Math[_0x4cccfb(0x775)](..._0x50b815[_0x4cccfb(0x2e9)](_0x5b0197=>_0x5b0197[_0x4cccfb(0x491)]()[_0x4cccfb(0x904)]-_0x5b0197[_0x4cccfb(0x491)]()[_0x4cccfb(0xc2d)]()/0x2)),_0x43fa4e=Math[_0x4cccfb(0x87e)](..._0x50b815['map'](_0x413d10=>_0x413d10[_0x4cccfb(0x491)]()[_0x4cccfb(0x904)]+_0x413d10[_0x4cccfb(0x491)]()[_0x4cccfb(0xc2d)]()/0x2)),_0x2d0553=Math[_0x4cccfb(0x775)](..._0x50b815[_0x4cccfb(0x2e9)](_0x3f2131=>_0x3f2131[_0x4cccfb(0x491)]()[_0x4cccfb(0x531)]-_0x3f2131[_0x4cccfb(0x491)]()[_0x4cccfb(0xba4)]())),_0x4baf0b=Math[_0x4cccfb(0x87e)](..._0x50b815['map'](_0x47f294=>_0x47f294[_0x4cccfb(0x491)]()[_0x4cccfb(0x531)])),_0x3284b3=_0x50b815['filter'](_0x58ab7b=>_0x58ab7b['isActor']())['length'],_0x3ecd6d=_0x50b815['filter'](_0x4aa898=>_0x4aa898[_0x4cccfb(0x2a7)]())[_0x4cccfb(0x205)];let _0x54f914=0x0,_0x5a1e3b=0x0;if(_0x237d8c[_0x4cccfb(0x1b7)](/front/i))_0x54f914=_0x3284b3>=_0x3ecd6d?_0x4f46fb:_0x43fa4e;else{if(_0x237d8c[_0x4cccfb(0x1b7)](/middle/i))_0x54f914=(_0x4f46fb+_0x43fa4e)/0x2,melee=-0x1;else _0x237d8c[_0x4cccfb(0x1b7)](/back/i)&&(_0x4cccfb(0x311)!=='UOFSA'?this['_forcedBattleLayout']=_0x4cccfb(0x232):_0x54f914=_0x3284b3>=_0x3ecd6d?_0x43fa4e:_0x4f46fb);}if(_0x237d8c['match'](/head/i))_0x4cccfb(0xba1)!==_0x4cccfb(0xba1)?(_0xba842b['BattleCore'][_0x4cccfb(0x7f4)][_0x4cccfb(0x73d)](this,_0x423198),this[_0x4cccfb(0x2d1)](_0x4c87b8)):_0x5a1e3b=_0x2d0553;else{if(_0x237d8c['match'](/center/i))_0x5a1e3b=(_0x2d0553+_0x4baf0b)/0x2;else _0x237d8c['match'](/base/i)&&(_0x5a1e3b=_0x4baf0b);}_0x54f914+=(Graphics[_0x4cccfb(0x7d6)]-Graphics['boxWidth'])/0x2,_0x5a1e3b+=(Graphics[_0x4cccfb(0x8a0)]-Graphics[_0x4cccfb(0xbd1)])/0x2,_0x54f914+=_0x2be214,_0x5a1e3b+=_0x3f7399,_0x17ed84['setupShockwaveImpactFilter'](_0x54f914,_0x5a1e3b,_0xc14982,_0x3c5dcc,_0x17fe7f);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x1c5),_0x404643=>{const _0xbe42dc=_0x3ffb9d;if(!Imported[_0xbe42dc(0x240)])return;const _0x55df67=SceneManager[_0xbe42dc(0x947)][_0xbe42dc(0x9da)];if(!_0x55df67)return;if(VisuMZ[_0xbe42dc(0x8bb)][_0xbe42dc(0x3c3)]<=1.04){alert(_0xbe42dc(0xa11)),SceneManager[_0xbe42dc(0x6b5)]();return;}VisuMZ[_0xbe42dc(0xb83)](_0x404643,_0x404643);const _0x4c4bb6=$gameTemp['getLastPluginCommandInterpreter'](),_0x37649e=Math['max'](0.01,_0x404643['Scale']);$gameTemp['setBattleImpactTimeScale'](_0x37649e,_0x4c4bb6);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xb99),_0x199445=>{const _0x27f672=_0x3ffb9d;if(!Imported['VisuMZ_3_ActSeqImpact'])return;const _0x2d79bb=SceneManager[_0x27f672(0x947)][_0x27f672(0x9da)];if(!_0x2d79bb)return;if(VisuMZ[_0x27f672(0x8bb)][_0x27f672(0x3c3)]<=1.04){if(_0x27f672(0x7a5)==='UNUGk'){const _0x55b7a8=this[_0x27f672(0x4c8)][_0x27f672(0xad9)]();for(const _0x526c0b of _0x55b7a8){this[_0x27f672(0x508)](_0x526c0b);}}else{alert(_0x27f672(0xa11)),SceneManager[_0x27f672(0x6b5)]();return;}}VisuMZ['ConvertParams'](_0x199445,_0x199445);const _0x45f69b=$gameTemp[_0x27f672(0x292)](),_0x468111=_0x199445['ms']||0x1;VisuMZ[_0x27f672(0x8bb)][_0x27f672(0xc1a)](_0x468111,_0x45f69b);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xa35),_0x3b46ce=>{const _0x63373=_0x3ffb9d;if(!Imported[_0x63373(0x240)])return;const _0x1dfbaf=SceneManager[_0x63373(0x947)]['_spriteset'];if(!_0x1dfbaf)return;VisuMZ[_0x63373(0xb83)](_0x3b46ce,_0x3b46ce);const _0x1de0ed=_0x3b46ce['X']||0x0,_0x3108bd=_0x3b46ce['Y']||0x0,_0x9a762e=_0x3b46ce[_0x63373(0x5a9)]||0x0,_0x1b44b1=_0x3b46ce[_0x63373(0x290)]||0x0,_0x4607ab=_0x3b46ce[_0x63373(0x20d)]||0x1,_0x5e5b5b=_0x3b46ce['EasingType']||'Linear';_0x1dfbaf[_0x63373(0x969)](_0x9a762e,_0x1de0ed,_0x3108bd,_0x1b44b1,_0x4607ab,_0x5e5b5b);}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x764),_0xd67e82=>{const _0x58baa4=_0x3ffb9d;if(!Imported[_0x58baa4(0x240)])return;const _0x14c647=SceneManager[_0x58baa4(0x947)]['_spriteset'];if(!_0x14c647)return;VisuMZ['ConvertParams'](_0xd67e82,_0xd67e82);const _0x5c86eb=VisuMZ[_0x58baa4(0xb89)](_0xd67e82[_0x58baa4(0x692)]),_0x59124b=_0xd67e82[_0x58baa4(0x351)],_0x1c6a63=_0xd67e82[_0x58baa4(0x598)]||0x0,_0x323fb7=_0xd67e82['OffsetY']||0x0,_0x59372d=_0xd67e82[_0x58baa4(0x5a9)]||0x0,_0x1e0b89=_0xd67e82[_0x58baa4(0x290)]||0x0,_0x3db7b9=_0xd67e82[_0x58baa4(0x20d)]||0x1,_0x3c8e15=_0xd67e82[_0x58baa4(0xa3f)]||'Linear',_0x3be7d8=Math[_0x58baa4(0x775)](..._0x5c86eb[_0x58baa4(0x2e9)](_0x3beea5=>_0x3beea5['battler']()[_0x58baa4(0x904)]-_0x3beea5[_0x58baa4(0x491)]()['mainSpriteWidth']()/0x2)),_0x1c5393=Math[_0x58baa4(0x87e)](..._0x5c86eb[_0x58baa4(0x2e9)](_0x1d2134=>_0x1d2134['battler']()[_0x58baa4(0x904)]+_0x1d2134[_0x58baa4(0x491)]()['mainSpriteWidth']()/0x2)),_0x87d339=Math[_0x58baa4(0x775)](..._0x5c86eb[_0x58baa4(0x2e9)](_0x207eb9=>_0x207eb9[_0x58baa4(0x491)]()[_0x58baa4(0x531)]-_0x207eb9[_0x58baa4(0x491)]()[_0x58baa4(0xba4)]())),_0x30654b=Math[_0x58baa4(0x87e)](..._0x5c86eb[_0x58baa4(0x2e9)](_0x309571=>_0x309571[_0x58baa4(0x491)]()[_0x58baa4(0x531)])),_0x5c7e32=_0x5c86eb[_0x58baa4(0xae9)](_0x47b493=>_0x47b493[_0x58baa4(0x2bb)]())[_0x58baa4(0x205)],_0x51767c=_0x5c86eb[_0x58baa4(0xae9)](_0x32b147=>_0x32b147[_0x58baa4(0x2a7)]())[_0x58baa4(0x205)];let _0x536097=0x0,_0x553e9c=0x0;if(_0x59124b[_0x58baa4(0x1b7)](/front/i))_0x536097=_0x5c7e32>=_0x51767c?_0x3be7d8:_0x1c5393;else{if(_0x59124b[_0x58baa4(0x1b7)](/middle/i))'gIdbA'===_0x58baa4(0x1c2)?(this[_0x58baa4(0xb85)]=![],_0x13aea1[_0x58baa4(0x80e)]['Window_BattleLog_refresh'][_0x58baa4(0x73d)](this)):(_0x536097=(_0x3be7d8+_0x1c5393)/0x2,melee=-0x1);else _0x59124b[_0x58baa4(0x1b7)](/back/i)&&(_0x536097=_0x5c7e32>=_0x51767c?_0x1c5393:_0x3be7d8);}if(_0x59124b[_0x58baa4(0x1b7)](/head/i))_0x553e9c=_0x87d339;else{if(_0x59124b[_0x58baa4(0x1b7)](/center/i))'qfnDr'!=='kvdrS'?_0x553e9c=(_0x87d339+_0x30654b)/0x2:this['opacity']=0x0;else _0x59124b['match'](/base/i)&&(_0x553e9c=_0x30654b);}_0x536097+=(Graphics[_0x58baa4(0x7d6)]-Graphics[_0x58baa4(0x8f0)])/0x2,_0x553e9c+=(Graphics['height']-Graphics[_0x58baa4(0xbd1)])/0x2,_0x536097+=_0x1c6a63,_0x553e9c+=_0x323fb7,_0x14c647[_0x58baa4(0x969)](_0x59372d,_0x536097,_0x553e9c,_0x1e0b89,_0x3db7b9,_0x3c8e15);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x2a4),_0x2c4634=>{const _0x1e84f3=_0x3ffb9d;if(!SceneManager[_0x1e84f3(0x341)]())return;VisuMZ['ConvertParams'](_0x2c4634,_0x2c4634);const _0x26500c=$gameTemp['getLastPluginCommandInterpreter'](),_0x38249e=BattleManager[_0x1e84f3(0x58b)],_0x2512bd=BattleManager[_0x1e84f3(0xa98)],_0x428a4d=BattleManager[_0x1e84f3(0x492)];if(!_0x26500c||!_0x38249e||!_0x2512bd)return;if(!_0x38249e[_0x1e84f3(0x33b)]())return;const _0x4cdb29=VisuMZ[_0x1e84f3(0xb89)](_0x2c4634['Targets']);for(const _0x4c7d7c of _0x4cdb29){if(!_0x4c7d7c)continue;_0x428a4d[_0x1e84f3(0x7dd)]('actionEffect',_0x2512bd,_0x4c7d7c);}_0x26500c[_0x1e84f3(0x27b)](_0x1e84f3(0x725));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Mechanics_AddBuffDebuff',_0x5f3497=>{const _0x34a8c3=_0x3ffb9d;if(!SceneManager[_0x34a8c3(0x341)]())return;VisuMZ['ConvertParams'](_0x5f3497,_0x5f3497);const _0x5487cc=[_0x34a8c3(0x1f4),_0x34a8c3(0x540),'ATK','DEF','MAT',_0x34a8c3(0x730),_0x34a8c3(0x9a0),'LUK'],_0x36fa2b=_0x5f3497[_0x34a8c3(0x343)],_0x204530=_0x5f3497['Debuffs'],_0x4cc607=_0x5f3497[_0x34a8c3(0x75c)],_0x46bdcb=VisuMZ[_0x34a8c3(0xb89)](_0x5f3497[_0x34a8c3(0x692)]);for(const _0x278d64 of _0x46bdcb){if(!_0x278d64)continue;for(const _0x15bcee of _0x36fa2b){const _0x526746=_0x5487cc[_0x34a8c3(0x76b)](_0x15bcee[_0x34a8c3(0x614)]()[_0x34a8c3(0x33a)]());_0x526746>=0x0&&_0x526746<=0x7&&_0x278d64[_0x34a8c3(0xa42)](_0x526746,_0x4cc607);}for(const _0x274b7f of _0x204530){const _0x4ac502=_0x5487cc[_0x34a8c3(0x76b)](_0x274b7f[_0x34a8c3(0x614)]()[_0x34a8c3(0x33a)]());_0x4ac502>=0x0&&_0x4ac502<=0x7&&_0x278d64['addDebuff'](_0x4ac502,_0x4cc607);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x54a),_0x309abd=>{const _0x5279bd=_0x3ffb9d;if(!SceneManager[_0x5279bd(0x341)]())return;VisuMZ[_0x5279bd(0xb83)](_0x309abd,_0x309abd);const _0x4dd0b6=_0x309abd['States'],_0x611901=VisuMZ[_0x5279bd(0xb89)](_0x309abd[_0x5279bd(0x692)]);for(const _0xe8ca83 of _0x611901){if(!_0xe8ca83)continue;for(const _0x45af5b of _0x4dd0b6){_0x5279bd(0xb01)!==_0x5279bd(0x8ff)?_0xe8ca83[_0x5279bd(0x78a)](_0x45af5b):_0x5b5d5d=_0x5279bd(0xc04);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x285),_0x5e69a8=>{const _0x496d74=_0x3ffb9d;if(!SceneManager[_0x496d74(0x341)]())return;VisuMZ[_0x496d74(0xb83)](_0x5e69a8,_0x5e69a8);const _0x13f456=BattleManager['_action'],_0x1f8228={'arPenRate':_0x5e69a8[_0x496d74(0x2b6)],'arPenFlat':_0x5e69a8['ArPenFlat'],'arRedRate':_0x5e69a8[_0x496d74(0xc01)],'arRedFlat':_0x5e69a8[_0x496d74(0x4c3)]};_0x13f456[_0x496d74(0xaee)]=_0x1f8228;}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_AnalyzeWeakness',_0x425492=>{const _0x67a149=_0x3ffb9d;if(!SceneManager[_0x67a149(0x341)]())return;if(!Imported[_0x67a149(0x412)])return;VisuMZ[_0x67a149(0xb83)](_0x425492,_0x425492);const _0x280793=VisuMZ[_0x67a149(0xb89)](_0x425492['Targets']),_0x46d6e1=_0x425492[_0x67a149(0x260)]||0x1;for(const _0x585413 of _0x280793){if(!_0x585413)continue;if(!_0x585413['isEnemy']())continue;_0x585413[_0x67a149(0x7bd)](_0x46d6e1);}}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x55b),_0x1ebe30=>{const _0x5bb8ca=_0x3ffb9d;if(!SceneManager[_0x5bb8ca(0x341)]())return;if(!Imported['VisuMZ_2_BattleSystemATB'])return;if(!BattleManager[_0x5bb8ca(0xc0e)]())return;VisuMZ[_0x5bb8ca(0xb83)](_0x1ebe30,_0x1ebe30);const _0x472fc8=VisuMZ[_0x5bb8ca(0xb89)](_0x1ebe30[_0x5bb8ca(0x692)]),_0x1838f1=_0x1ebe30[_0x5bb8ca(0xb4f)],_0x360a02=_0x1ebe30[_0x5bb8ca(0xb4f)],_0x3c23d1=_0x1ebe30['Interrupt'];for(const _0x180205 of _0x472fc8){if(!_0x180205)continue;if(_0x180205[_0x5bb8ca(0x82e)]())_0x180205[_0x5bb8ca(0x9ad)](_0x1838f1);else{if(_0x180205[_0x5bb8ca(0x39c)]()){_0x180205[_0x5bb8ca(0x4ea)](_0x360a02);if(_0x3c23d1)_0x180205['atbInterrupt']();}}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_BoostPointsChange',_0x50b1c5=>{const _0x722f1d=_0x3ffb9d;if(!SceneManager[_0x722f1d(0x341)]())return;if(!Imported[_0x722f1d(0x92b)])return;VisuMZ['ConvertParams'](_0x50b1c5,_0x50b1c5);const _0x446bfc=VisuMZ['CreateActionSequenceTargets'](_0x50b1c5[_0x722f1d(0x692)]),_0x1eb8ce=_0x50b1c5['BoostPoints'];for(const _0x10749e of _0x446bfc){if(!_0x10749e)continue;_0x10749e['gainStoredBoostPoints'](_0x1eb8ce);}}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x8c7),_0x398aee=>{const _0x145f54=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_BoostAction'])return;if(!BattleManager[_0x145f54(0xa98)])return;VisuMZ[_0x145f54(0xb83)](_0x398aee,_0x398aee);const _0x2f23e7=_0x398aee[_0x145f54(0x955)];$gameVariables[_0x145f54(0x458)](_0x2f23e7,BattleManager[_0x145f54(0xa98)]['toUseBoostPoints']());}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Mechanics_BreakShieldChange',_0x561997=>{const _0x1909ee=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x1909ee(0xa80)])return;VisuMZ['ConvertParams'](_0x561997,_0x561997);const _0x3ce2aa=VisuMZ['CreateActionSequenceTargets'](_0x561997[_0x1909ee(0x692)]),_0x3fefcf=_0x561997[_0x1909ee(0x201)];for(const _0x3068fd of _0x3ce2aa){if(!_0x3068fd)continue;if(_0x3068fd[_0x1909ee(0xad4)]())continue;if(!_0x3068fd[_0x1909ee(0x570)]())continue;_0x3068fd[_0x1909ee(0x986)](_0x3fefcf);}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xb12),_0x5de734=>{const _0x498c8d=_0x3ffb9d;if(!SceneManager[_0x498c8d(0x341)]())return;if(!Imported['VisuMZ_4_BreakShields'])return;VisuMZ[_0x498c8d(0xb83)](_0x5de734,_0x5de734);const _0x2be6a3=VisuMZ[_0x498c8d(0xb89)](_0x5de734[_0x498c8d(0x692)]);for(const _0x1e1794 of _0x2be6a3){if(!_0x1e1794)continue;if(_0x1e1794[_0x498c8d(0xad4)]())continue;if(!_0x1e1794[_0x498c8d(0x570)]())continue;_0x1e1794[_0x498c8d(0x920)]();}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x1f7),_0x422cec=>{const _0x8b192e=_0x3ffb9d;if(!SceneManager[_0x8b192e(0x341)]())return;if(!Imported[_0x8b192e(0x4ab)])return;if(!BattleManager[_0x8b192e(0xb49)]())return;VisuMZ['ConvertParams'](_0x422cec,_0x422cec);const _0x5b9a93=VisuMZ[_0x8b192e(0xb89)](_0x422cec['Targets']),_0x1f7fa2=_0x422cec['BravePoints'];for(const _0x1c799f of _0x5b9a93){if(!_0x1c799f)continue;_0x1c799f[_0x8b192e(0x788)](_0x1f7fa2);}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x4d1),_0x2d678b=>{const _0x2df9c4=_0x3ffb9d;if(!SceneManager[_0x2df9c4(0x341)]())return;VisuMZ[_0x2df9c4(0xb83)](_0x2d678b,_0x2d678b);const _0x1a00bf=$gameTemp[_0x2df9c4(0x292)](),_0x57744a=BattleManager[_0x2df9c4(0x58b)],_0x151a97=BattleManager[_0x2df9c4(0xa98)];if(!_0x1a00bf||!_0x57744a||!_0x151a97)return;if(!_0x57744a['item']())return;const _0x296587=VisuMZ[_0x2df9c4(0xb89)](_0x2d678b[_0x2df9c4(0x692)]);for(const _0x3b4a1c of _0x296587){if(!_0x3b4a1c)continue;if(_0x2d678b[_0x2df9c4(0x603)]){if(_0x2df9c4(0x81a)===_0x2df9c4(0x3b8)){const _0x23d34f=_0x5b730a[_0x2df9c4(0x80e)][_0x2df9c4(0x901)]['BattleLayout'];if(_0x23d34f['StatusWindowSelectableBackHide'])return;_0x28eb78[_0x2df9c4(0xb66)][_0x2df9c4(0x577)]['call'](this,_0x3db3be);}else _0x3b4a1c['removeImmortal'](),_0x3b4a1c[_0x2df9c4(0x78a)](_0x3b4a1c[_0x2df9c4(0x597)]());}if(_0x3b4a1c[_0x2df9c4(0x4fd)]()){if(_0x2df9c4(0x19e)===_0x2df9c4(0x5ec)){if(!this['_damagePopupArray'])this[_0x2df9c4(0x31b)]();return this[_0x2df9c4(0x3bf)]['length']>0x0;}else _0x3b4a1c[_0x2df9c4(0x4b3)]();}}_0x1a00bf['setWaitMode'](_0x2df9c4(0x2a9));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Mechanics_CtbOrder',_0x124f6a=>{const _0x214c7f=_0x3ffb9d;if(!SceneManager[_0x214c7f(0x341)]())return;if(!Imported[_0x214c7f(0x274)])return;if(!BattleManager[_0x214c7f(0x2b1)]())return;VisuMZ[_0x214c7f(0xb83)](_0x124f6a,_0x124f6a);const _0x798241=VisuMZ[_0x214c7f(0xb89)](_0x124f6a[_0x214c7f(0x692)]),_0x1933e9=_0x124f6a['ChangeOrderBy'];for(const _0x319c18 of _0x798241){if(_0x214c7f(0x42b)!==_0x214c7f(0x42b))this[_0x214c7f(0x4ce)]=_0x214c7f(0x728);else{if(!_0x319c18)continue;_0x319c18['changeTurnOrderByCTB'](_0x1933e9);}}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_CtbSpeed',_0x2e7a6b=>{const _0x15d878=_0x3ffb9d;if(!SceneManager[_0x15d878(0x341)]())return;if(!Imported[_0x15d878(0x274)])return;if(!BattleManager[_0x15d878(0x2b1)]())return;VisuMZ[_0x15d878(0xb83)](_0x2e7a6b,_0x2e7a6b);const _0x51f3e1=VisuMZ[_0x15d878(0xb89)](_0x2e7a6b[_0x15d878(0x692)]),_0x4f61e1=_0x2e7a6b[_0x15d878(0xb4f)],_0x1d3876=_0x2e7a6b[_0x15d878(0xb4f)];for(const _0x2271b8 of _0x51f3e1){if(_0x15d878(0x3f7)!==_0x15d878(0x31d)){if(!_0x2271b8)continue;if(_0x2271b8[_0x15d878(0xa3b)]===_0x15d878(0x910))_0x2271b8[_0x15d878(0xc1e)](_0x4f61e1);else _0x2271b8[_0x15d878(0xa3b)]==='casting'&&_0x2271b8[_0x15d878(0x8ed)](_0x1d3876);}else{const _0x3b483f=_0x24f5a7[_0x15d878(0x80e)][_0x15d878(0x901)]['ActionSequence'],_0x534050=_0x3b483f[_0x15d878(0xb81)],_0x5ebf2b=_0x3b483f['StepDistanceY'],_0x25974c=_0x3b483f[_0x15d878(0x462)];this['startMove'](-_0x534050,-_0x5ebf2b,_0x25974c);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x7f7),_0x544e3e=>{const _0x5b6c8d=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5b6c8d(0xb83)](_0x544e3e,_0x544e3e);const _0x218d81=BattleManager[_0x5b6c8d(0x58b)];if(!_0x218d81)return;let _0xbd8252=_0x544e3e[_0x5b6c8d(0x188)];_0x218d81[_0x5b6c8d(0x97c)](_0xbd8252);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_DamagePopup',_0x4c703d=>{const _0x44cc23=_0x3ffb9d;if(!SceneManager[_0x44cc23(0x341)]())return;VisuMZ[_0x44cc23(0xb83)](_0x4c703d,_0x4c703d);const _0x44a7f6=VisuMZ[_0x44cc23(0xb89)](_0x4c703d['Targets']);for(const _0x46830b of _0x44a7f6){if(_0x44cc23(0x87f)!=='ksNiP')_0x2c9a9e[_0x44cc23(0xa98)][_0x44cc23(0xb93)]();else{if(!_0x46830b)continue;if(_0x46830b[_0x44cc23(0x9ba)]())_0x46830b[_0x44cc23(0xba3)]();}}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_DeathBreak',_0x44650e=>{const _0x2f7a3f=_0x3ffb9d;if(!SceneManager[_0x2f7a3f(0x341)]())return;VisuMZ[_0x2f7a3f(0xb83)](_0x44650e,_0x44650e);const _0x1a3b48=$gameTemp[_0x2f7a3f(0x292)](),_0x4740d8=BattleManager[_0x2f7a3f(0xa98)],_0x33f999=_0x44650e['JumpToLabel'];if(!_0x1a3b48)return;if(!_0x4740d8)return;_0x4740d8&&_0x4740d8[_0x2f7a3f(0xb78)]()&&_0x33f999['toUpperCase']()[_0x2f7a3f(0x33a)]()!=='UNTITLED'&&_0x1a3b48[_0x2f7a3f(0x8ce)]([_0x33f999]);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_EnemyEscape',_0xa39c6e=>{const _0x6e4118=_0x3ffb9d;if(!SceneManager[_0x6e4118(0x341)]())return;VisuMZ[_0x6e4118(0xb83)](_0xa39c6e,_0xa39c6e);const _0x3a75d9=VisuMZ[_0x6e4118(0xb89)](_0xa39c6e['Targets']);for(const _0x523901 of _0x3a75d9){if(!_0x523901)continue;if(!_0x523901[_0x6e4118(0x2a7)]())continue;_0x523901['escape']();}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x386),_0x1e275d=>{const _0x4a54a6=_0x3ffb9d;if(!SceneManager[_0x4a54a6(0x341)]())return;if(!Imported[_0x4a54a6(0xb8b)])return;if(!BattleManager['isETB']())return;VisuMZ[_0x4a54a6(0xb83)](_0x1e275d,_0x1e275d);const _0x53fdaa=_0x1e275d[_0x4a54a6(0xb17)];BattleManager[_0x4a54a6(0xa98)]&&BattleManager['_subject'][_0x4a54a6(0x432)]()[_0x4a54a6(0x8bc)](_0x53fdaa);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x298),_0x2f1fe6=>{const _0x588089=_0x3ffb9d;if(!SceneManager[_0x588089(0x341)]())return;if(!Imported['VisuMZ_2_BattleSystemFTB'])return;if(!BattleManager[_0x588089(0x5d6)]())return;VisuMZ[_0x588089(0xb83)](_0x2f1fe6,_0x2f1fe6);const _0x512519=_0x2f1fe6[_0x588089(0xb17)];BattleManager['_subject']&&BattleManager['_subject']['friendsUnit']()[_0x588089(0x8f7)](_0x512519);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x9ac),_0x2a4592=>{const _0x2a789e=_0x3ffb9d;if(!SceneManager[_0x2a789e(0x341)]())return;VisuMZ['ConvertParams'](_0x2a4592,_0x2a4592);const _0x484b52=VisuMZ[_0x2a789e(0xb89)](_0x2a4592[_0x2a789e(0x692)]),_0x4bb7f1=_0x2a4592[_0x2a789e(0x420)],_0x9aac7c=_0x2a4592[_0x2a789e(0x803)],_0xd2c07=_0x2a4592[_0x2a789e(0x7c4)],_0x4c6e96=_0x2a4592[_0x2a789e(0xaad)],_0x59a085=_0x2a4592[_0x2a789e(0x504)],_0x337dfe=_0x2a4592[_0x2a789e(0x87c)],_0x52aee5=_0x2a4592['ShowPopup'];for(const _0x34eb96 of _0x484b52){if(!_0x34eb96)continue;const _0x3e78db=_0x34eb96[_0x2a789e(0x3ad)](),_0x519162=Math[_0x2a789e(0x68f)](_0x4bb7f1*_0x34eb96['mhp']+_0x9aac7c),_0x22830a=Math[_0x2a789e(0x68f)](_0xd2c07*_0x34eb96[_0x2a789e(0xaf7)]+_0x4c6e96),_0x373f18=Math[_0x2a789e(0x68f)](_0x59a085*_0x34eb96[_0x2a789e(0x44b)]()+_0x337dfe);if(_0x519162!==0x0)_0x34eb96[_0x2a789e(0xc0a)](_0x519162);if(_0x22830a!==0x0)_0x34eb96[_0x2a789e(0x66e)](_0x22830a);if(_0x373f18!==0x0)_0x34eb96[_0x2a789e(0x498)](_0x373f18);if(_0x52aee5)_0x34eb96[_0x2a789e(0xba3)]();_0x3e78db&&_0x34eb96[_0x2a789e(0xb78)]()&&(_0x2a789e(0x65e)===_0x2a789e(0x65e)?_0x34eb96[_0x2a789e(0x4b3)]():(_0x50d00a[_0x2a789e(0x80e)][_0x2a789e(0x6e3)][_0x2a789e(0x73d)](this),this[_0x2a789e(0x3bf)]=[]));}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_Immortal',_0x8e55c7=>{const _0xaf8258=_0x3ffb9d;if(!SceneManager[_0xaf8258(0x341)]())return;VisuMZ[_0xaf8258(0xb83)](_0x8e55c7,_0x8e55c7);const _0x45155c=VisuMZ['CreateActionSequenceTargets'](_0x8e55c7[_0xaf8258(0x692)]);for(const _0xb0e463 of _0x45155c){if(_0xaf8258(0x28a)!==_0xaf8258(0x6a8)){if(!_0xb0e463)continue;_0xb0e463[_0xaf8258(0xafb)](_0x8e55c7[_0xaf8258(0x304)]);}else return!![];}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xacc),_0x3bccca=>{const _0x4770c5=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x4770c5(0xb83)](_0x3bccca,_0x3bccca);const _0x5d6924=BattleManager[_0x4770c5(0x58b)],_0x41da5e={'criticalHitRate':_0x3bccca['CriticalHitRate'],'criticalHitFlat':_0x3bccca[_0x4770c5(0x86b)],'criticalDmgRate':_0x3bccca[_0x4770c5(0x604)],'criticalDmgFlat':_0x3bccca[_0x4770c5(0x36a)],'damageRate':_0x3bccca[_0x4770c5(0x8b5)],'damageFlat':_0x3bccca[_0x4770c5(0x439)],'hitRate':_0x3bccca[_0x4770c5(0x3b6)],'hitFlat':_0x3bccca[_0x4770c5(0x935)]};_0x5d6924[_0x4770c5(0x56f)]=_0x41da5e;}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Mechanics_OnceParallel',_0x4c6ad8=>{const _0x3ae391=_0x3ffb9d;if(!SceneManager[_0x3ae391(0x341)]())return;VisuMZ[_0x3ae391(0xb83)](_0x4c6ad8,_0x4c6ad8);const _0x148d80=_0x4c6ad8[_0x3ae391(0xbf0)];SceneManager[_0x3ae391(0x947)][_0x3ae391(0x2ac)](_0x148d80);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_OtbOrder',_0x435ab3=>{const _0x35d1dc=_0x3ffb9d;if(!SceneManager[_0x35d1dc(0x341)]())return;if(!Imported[_0x35d1dc(0x3bb)])return;if(!BattleManager['isOTB']())return;VisuMZ[_0x35d1dc(0xb83)](_0x435ab3,_0x435ab3);const _0x46bea6=VisuMZ[_0x35d1dc(0xb89)](_0x435ab3[_0x35d1dc(0x692)]);for(const _0x34c567 of _0x46bea6){if(!_0x34c567)continue;let _0x24baef=_0x435ab3['CurrentTurn'],_0x3cd9ef=_0x435ab3[_0x35d1dc(0x1f3)],_0x421bd4=_0x435ab3[_0x35d1dc(0xb2f)];if(BattleManager[_0x35d1dc(0x37e)][_0x35d1dc(0x802)](_0x34c567))_0x24baef+=_0x421bd4;else{if(_0x35d1dc(0x467)!==_0x35d1dc(0x467)){const _0x504ff7=_0x35d1dc(0x53e)[_0x35d1dc(0x4a7)](_0x428956[_0x35d1dc(0x587)]()),_0x57c9d9=this['createInnerPortrait'](_0x504ff7,_0x29aa74),_0x2e7052=_0x39b079[_0x35d1dc(0xa30)]();_0x2e7052!==''?_0x57c9d9['bitmap']=_0x5912b8[_0x35d1dc(0xac4)](_0x2e7052):_0x57c9d9[_0x35d1dc(0x6a0)]=_0x1c0e46[_0x35d1dc(0x385)];const _0x3273ae=this['itemRect'](_0x485a43);_0x57c9d9[_0x35d1dc(0xab2)]['x']=0.5,_0x57c9d9[_0x35d1dc(0xab2)]['y']=0x1;let _0x458243=_0x58e764[_0x35d1dc(0x68f)](_0x3273ae['x']+_0x3273ae[_0x35d1dc(0x7d6)]/0x2)+this['padding'];_0x458243+=_0x568326['getBattlePortraitOffsetX']();let _0x3c022f=_0x5a8b26[_0x35d1dc(0x68f)](this[_0x35d1dc(0x8a0)]);_0x3c022f+=_0xc43d23[_0x35d1dc(0xac0)](),_0x57c9d9['move'](_0x458243,_0x3c022f);const _0x4cb0ae=_0x454f67[_0x35d1dc(0x80e)][_0x35d1dc(0x901)][_0x35d1dc(0x190)][_0x35d1dc(0x3f0)];_0x57c9d9[_0x35d1dc(0x530)]['x']=_0x4cb0ae,_0x57c9d9['scale']['y']=_0x4cb0ae,_0x57c9d9['show']();}else _0x3cd9ef+=_0x421bd4;}BattleManager[_0x35d1dc(0x5b3)](_0x34c567,-_0x24baef,![]),BattleManager['turnOrderChangeOTB'](_0x34c567,-_0x3cd9ef,!![]);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xac8),_0x5ce9eb=>{const _0x469065=_0x3ffb9d;if(!SceneManager[_0x469065(0x341)]())return;if(!Imported[_0x469065(0x50f)])return;if(!BattleManager[_0x469065(0x2cd)]())return;VisuMZ['ConvertParams'](_0x5ce9eb,_0x5ce9eb);const _0x4cec61=BattleManager['_subject'][_0x469065(0x432)](),_0x670f35=_0x5ce9eb[_0x469065(0x3b2)],_0x5d18ec=_0x5ce9eb[_0x469065(0x716)]||'unchanged',_0x36e93b=_0x5ce9eb[_0x469065(0xa01)]||_0x469065(0x762),_0x4b0df9=_0x5ce9eb[_0x469065(0x2ef)]||0x0,_0x3a3afa=_0x5ce9eb[_0x469065(0x39e)]||0x0;if(_0x4cec61['canAlterActionCostPTB']()||_0x670f35){if(_0x670f35){if(_0x469065(0x32a)!=='tRniD')_0x4cec61['_ptbActionCost']=_0x4cec61[_0x469065(0x3d2)]||{},_0x4cec61[_0x469065(0x3d2)][_0x469065(0x258)]=0x0;else return this[_0x469065(0x8ad)]();}_0x4cec61['alterActionCostPTB'](_0x5d18ec,_0x36e93b,_0x4b0df9,_0x3a3afa);}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x6bc),_0x12ebf2=>{const _0x308117=_0x3ffb9d;if(!SceneManager[_0x308117(0x341)]())return;if(!Imported[_0x308117(0x50f)])return;if(!BattleManager[_0x308117(0x2cd)]())return;VisuMZ[_0x308117(0xb83)](_0x12ebf2,_0x12ebf2);const _0x54924a=BattleManager[_0x308117(0xa98)]['friendsUnit']();let _0x4e94ba=Math['max'](_0x12ebf2['ConvertCount'],0x0),_0x175b73=_0x54924a['getFullActionsPTB'](),_0x3ff784=_0x54924a['getHalfActionsPTB']();while(_0x4e94ba--){if(_0x308117(0x1e2)==='QmbvB'){const _0x4650a8=_0x48a999(_0x47b3ee['$1'])[_0x308117(0x83d)](/[\r\n]+/)[_0x308117(0x7bc)](''),_0x1c0139=_0x4295a6[_0x308117(0xb80)](_0x4650a8);_0x2ca9cf[_0x308117(0xae6)]=_0x5313e3['getWtypeIdWithName'](_0x1c0139);}else{if(_0x175b73<=0x0&&_0x3ff784<=0x0){if('Ltcad'===_0x308117(0x212)){const _0x45bc94=this[_0x308117(0x756)]();if(_0x45bc94&&this[_0x308117(0x430)]<0xff)this[_0x308117(0x430)]+=0x10;else!_0x45bc94&&this['opacity']>0x0&&(this[_0x308117(0x430)]-=0x10);}else break;}else _0x175b73>0x0?(_0x175b73--,_0x3ff784++):_0x3ff784--;}}_0x54924a[_0x308117(0x244)](_0x175b73),_0x54924a['setHalfActionsPTB'](_0x3ff784);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Mechanics_PtbFullHalfAction',_0x54fb4a=>{const _0x489cad=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x489cad(0x50f)])return;if(!BattleManager[_0x489cad(0x2cd)]())return;VisuMZ[_0x489cad(0xb83)](_0x54fb4a,_0x54fb4a);const _0x2ecc2e=BattleManager[_0x489cad(0xa98)][_0x489cad(0x432)]();let _0x1cbed4=_0x54fb4a[_0x489cad(0xb5b)],_0x160882=_0x54fb4a['HalfActions'];_0x2ecc2e['gainFullActionsPTB'](_0x1cbed4),_0x2ecc2e[_0x489cad(0x64d)](_0x160882);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x286),_0x53d440=>{const _0x37ae5e=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x53d440,_0x53d440);const _0x1d6df8=[_0x37ae5e(0x1f4),'MAXMP',_0x37ae5e(0xb6d),_0x37ae5e(0xacb),_0x37ae5e(0x476),_0x37ae5e(0x730),_0x37ae5e(0x9a0),'LUK'],_0x23418a=_0x53d440[_0x37ae5e(0x343)],_0x163ea2=_0x53d440[_0x37ae5e(0x496)],_0x379b89=VisuMZ[_0x37ae5e(0xb89)](_0x53d440[_0x37ae5e(0x692)]);for(const _0x484e87 of _0x379b89){if(_0x37ae5e(0x314)!=='bBSxd'){if(!_0x447bbb['isSceneBattle']())return;if(!_0x19636d[_0x37ae5e(0x8ba)])return;_0x5ce6e[_0x37ae5e(0xb83)](_0x1960a6,_0x432c26);const _0x129165=_0x46ffc3[_0x37ae5e(0x320)]();_0x129165[_0x37ae5e(0x5b0)]=_0x4ec128[_0x37ae5e(0x1ef)];}else{if(!_0x484e87)continue;for(const _0xa2b0a5 of _0x23418a){const _0x501363=_0x1d6df8['indexOf'](_0xa2b0a5[_0x37ae5e(0x614)]()[_0x37ae5e(0x33a)]());_0x501363>=0x0&&_0x501363<=0x7&&_0x484e87['isBuffAffected'](_0x501363)&&_0x484e87['removeBuff'](_0x501363);}for(const _0x238e46 of _0x163ea2){const _0x54547c=_0x1d6df8['indexOf'](_0x238e46[_0x37ae5e(0x614)]()[_0x37ae5e(0x33a)]());_0x54547c>=0x0&&_0x54547c<=0x7&&_0x484e87[_0x37ae5e(0x3c2)](_0x54547c)&&_0x484e87[_0x37ae5e(0x656)](_0x54547c);}}}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x2a0),_0x5ccbdf=>{const _0x5bf8d8=_0x3ffb9d;if(!SceneManager[_0x5bf8d8(0x341)]())return;VisuMZ[_0x5bf8d8(0xb83)](_0x5ccbdf,_0x5ccbdf);const _0x598076=_0x5ccbdf[_0x5bf8d8(0xad3)],_0x5e2a6c=VisuMZ[_0x5bf8d8(0xb89)](_0x5ccbdf[_0x5bf8d8(0x692)]);for(const _0x33f594 of _0x5e2a6c){if(!_0x33f594)continue;for(const _0x7705f2 of _0x598076){_0x33f594['removeState'](_0x7705f2);}}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x4db),_0x440caf=>{const _0x85bf2b=_0x3ffb9d;if(!SceneManager[_0x85bf2b(0x341)]())return;if(!Imported[_0x85bf2b(0x6c7)])return;if(!BattleManager['isSTB']())return;VisuMZ[_0x85bf2b(0xb83)](_0x440caf,_0x440caf);const _0x13d9c3=_0x440caf[_0x85bf2b(0xa9e)],_0x47d08a=VisuMZ[_0x85bf2b(0xb89)](_0x440caf[_0x85bf2b(0x692)]),_0xe72f32=_0x440caf[_0x85bf2b(0x640)],_0x4fb87e=_0x440caf[_0x85bf2b(0x583)],_0x965502=_0x440caf[_0x85bf2b(0xaf2)],_0x57bf73=BattleManager[_0x85bf2b(0x58b)];if(_0x13d9c3)for(const _0x609ae3 of _0x47d08a){if(!_0x609ae3)continue;if(_0x609ae3===user)continue;if(_0xe72f32)_0x609ae3[_0x85bf2b(0x610)](![]);_0x609ae3[_0x85bf2b(0xbb0)](BattleManager[_0x85bf2b(0xa98)],_0x57bf73);}if(_0x4fb87e&&BattleManager[_0x85bf2b(0xa98)]){if(_0x965502)BattleManager['_subject'][_0x85bf2b(0x610)](![]);const _0x4a4830=_0x47d08a[0x0];BattleManager['performSTBExploiter'](_0x4a4830,_0x57bf73);}}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x303),_0x51f6d7=>{const _0x5b89f1=_0x3ffb9d;if(!SceneManager[_0x5b89f1(0x341)]())return;if(!Imported['VisuMZ_2_BattleSystemSTB'])return;if(!BattleManager[_0x5b89f1(0x27c)]())return;VisuMZ[_0x5b89f1(0xb83)](_0x51f6d7,_0x51f6d7);const _0x4d3f7b=_0x51f6d7[_0x5b89f1(0xab6)];BattleManager[_0x5b89f1(0xa98)]&&(_0x5b89f1(0x3c1)!=='qcxiD'?BattleManager[_0x5b89f1(0xa98)][_0x5b89f1(0xba2)](_0x4d3f7b):this[_0x5b89f1(0x254)]());}),PluginManager['registerCommand'](pluginData['name'],'ActSeq_Mechanics_StbRemoveExcessActions',_0x2d2e65=>{const _0x7563be=_0x3ffb9d;if(!SceneManager[_0x7563be(0x341)]())return;if(!Imported[_0x7563be(0x6c7)])return;if(!BattleManager[_0x7563be(0x27c)]())return;VisuMZ['ConvertParams'](_0x2d2e65,_0x2d2e65);let _0x29f713=_0x2d2e65['Actions'];if(BattleManager['_subject']){if(_0x7563be(0x582)!==_0x7563be(0x582)){this[_0x7563be(0x69f)][_0x7563be(0x430)]=0x0;return;}else{BattleManager['_subject'][_0x7563be(0xabb)]=BattleManager[_0x7563be(0xa98)]['_actions']||[];while(_0x29f713--){if(_0x7563be(0xa65)!=='hDixx')_0x13187d=_0x4c4a9c[_0x7563be(0x7d6)]/_0x29a417['battleMembers']()[_0x7563be(0x205)],_0x261755*=_0x4663fe,_0x444841+=_0x2d8551[_0x7563be(0x7d6)]/_0x475c53[_0x7563be(0xbf4)]()['length']/0x2;else{if(BattleManager['_subject'][_0x7563be(0xabb)][_0x7563be(0x205)]<=0x0)break;BattleManager[_0x7563be(0xa98)][_0x7563be(0xabb)]['shift']();}}}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Mechanics_SwapWeapon',_0x1e39b9=>{const _0x499726=_0x3ffb9d;if(!SceneManager[_0x499726(0x341)]())return;if(!Imported['VisuMZ_2_WeaponSwapSystem'])return;VisuMZ[_0x499726(0xb83)](_0x1e39b9,_0x1e39b9);const _0x3dcae3=VisuMZ[_0x499726(0xb89)](_0x1e39b9[_0x499726(0x692)]),_0x2e0983=_0x1e39b9[_0x499726(0x22e)];for(const _0x46b69a of _0x3dcae3){if(!_0x46b69a)continue;if(!_0x46b69a[_0x499726(0x2bb)]())continue;_0x46b69a[_0x499726(0x379)](_0x2e0983);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x5e4),_0x58adec=>{const _0x58c429=_0x3ffb9d;if(!SceneManager[_0x58c429(0x341)]())return;VisuMZ[_0x58c429(0xb83)](_0x58adec,_0x58adec);const _0x22ec2a=VisuMZ['CreateActionSequenceTargets'](_0x58adec['Targets']),_0x5902a6=_0x58adec[_0x58c429(0x6e7)],_0x41f8ed={'textColor':ColorManager[_0x58c429(0xb9b)](_0x58adec[_0x58c429(0x9fa)]),'flashColor':_0x58adec[_0x58c429(0x6c1)],'flashDuration':_0x58adec['FlashDuration']};for(const _0x4a5d39 of _0x22ec2a){if('pjEHE'!=='DFAqi'){if(!_0x4a5d39)continue;_0x4a5d39['setupTextPopup'](_0x5902a6,_0x41f8ed);}else _0x46f1da[_0x58c429(0x80e)]['Window_BattleLog_performMiss'][_0x58c429(0x73d)](this,_0x21cc53),this[_0x58c429(0x8d7)]();}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xc21),_0x2078bb=>{const _0x396506=_0x3ffb9d;if(!SceneManager[_0x396506(0x341)]())return;VisuMZ[_0x396506(0xb83)](_0x2078bb,_0x2078bb);const _0x255369=VisuMZ[_0x396506(0xb89)](_0x2078bb[_0x396506(0x692)]);let _0x4463b6=$gameVariables[_0x396506(0x338)](_0x2078bb['Variable']);Imported['VisuMZ_0_CoreEngine']&&_0x2078bb['DigitGrouping']&&(_0x396506(0xb28)!==_0x396506(0xb28)?(this[_0x396506(0x55c)]=!![],_0x50badd['reserveCommonEvent'](_0x27f6cb[_0x396506(0x1c3)]),_0x11d43a[_0x396506(0xc12)](),_0x277eb1[_0x396506(0x576)][_0x396506(0x8fd)]=!![]):_0x4463b6=VisuMZ[_0x396506(0xb55)](_0x4463b6));const _0x5cc84f=String(_0x4463b6),_0x52fe11={'textColor':ColorManager[_0x396506(0xb9b)](_0x2078bb['TextColor']),'flashColor':_0x2078bb['FlashColor'],'flashDuration':_0x2078bb[_0x396506(0x639)]};for(const _0x4e4879 of _0x255369){if(!_0x4e4879)continue;_0x4e4879[_0x396506(0x6b6)](_0x5cc84f,_0x52fe11);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x633),_0x48b943=>{const _0xa39e7c=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;const _0x462b7d=$gameTemp[_0xa39e7c(0x292)]();if(!_0x462b7d)return;_0x462b7d[_0xa39e7c(0x27b)]('battleEffect');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Motion_ClearFreezeFrame',_0x149d3e=>{const _0x75bf75=_0x3ffb9d;if(!SceneManager[_0x75bf75(0x341)]())return;VisuMZ[_0x75bf75(0xb83)](_0x149d3e,_0x149d3e);const _0x59271d=VisuMZ[_0x75bf75(0xb89)](_0x149d3e[_0x75bf75(0x692)]);for(const _0x4a4242 of _0x59271d){if(_0x75bf75(0x9a9)===_0x75bf75(0x2f0))this[_0x75bf75(0x42c)]('thrust');else{if(!_0x4a4242)continue;_0x4a4242[_0x75bf75(0x463)]();}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Motion_FreezeMotionFrame',_0x503f6b=>{const _0x50a946=_0x3ffb9d;if(!SceneManager[_0x50a946(0x341)]())return;VisuMZ[_0x50a946(0xb83)](_0x503f6b,_0x503f6b);const _0x216221=VisuMZ[_0x50a946(0xb89)](_0x503f6b[_0x50a946(0x692)]),_0x1c1f7d=_0x503f6b['MotionType']['toLowerCase']()[_0x50a946(0x33a)]();let _0x53e889=_0x503f6b[_0x50a946(0xb87)];const _0x7a3eb9=_0x503f6b[_0x50a946(0x40c)];![_0x50a946(0x308),_0x50a946(0x8d5),_0x50a946(0x243),_0x50a946(0xc13)][_0x50a946(0x802)](_0x1c1f7d)&&(_0x53e889=![]);for(const _0x534e35 of _0x216221){if(!_0x534e35)continue;_0x534e35[_0x50a946(0x79e)](_0x1c1f7d,_0x53e889,_0x7a3eb9);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x789),_0x14fe9f=>{const _0x1b290b=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x14fe9f,_0x14fe9f);const _0x4cb765=VisuMZ['CreateActionSequenceTargets'](_0x14fe9f['Targets']),_0x4521bc=_0x14fe9f[_0x1b290b(0x62a)][_0x1b290b(0x456)]()[_0x1b290b(0x33a)](),_0x50cedd=_0x14fe9f[_0x1b290b(0xb87)];for(const _0x250374 of _0x4cb765){if(_0x1b290b(0x8b6)===_0x1b290b(0x270)){const _0x4bc0ff=_0x2ead89['BattleCore'][_0x1b290b(0x901)][_0x1b290b(0x190)];if(_0x4bc0ff[_0x1b290b(0x257)]){const _0x42fdfa=new _0x568309();_0x42fdfa[_0x1b290b(0x6a0)]=_0xb05752['loadSystem'](_0x4bc0ff[_0x1b290b(0x257)]),_0x42fdfa['x']=_0x4bc0ff[_0x1b290b(0xbab)]||0x0,_0x42fdfa['y']=_0x4bc0ff[_0x1b290b(0x7f0)]||0x0,this[_0x1b290b(0xaff)](_0x42fdfa),this['_backAttachmentSprite']=_0x42fdfa;}if(_0x4bc0ff['StatusWindowAttachmentFront']){const _0x1b1396=new _0x16dacf();_0x1b1396[_0x1b290b(0x6a0)]=_0x53aa0d[_0x1b290b(0x56b)](_0x4bc0ff['StatusWindowAttachmentFront']),_0x1b1396['x']=_0x4bc0ff['StatusWindowAttachmentFrontOffsetX']||0x0,_0x1b1396['y']=_0x4bc0ff[_0x1b290b(0x92d)]||0x0,this[_0x1b290b(0x237)](_0x1b1396),this[_0x1b290b(0x20b)]=_0x1b1396;}}else{if(!_0x250374)continue;if(_0x4521bc[_0x1b290b(0x1b7)](/ATTACK[ ](\d+)/i)){if('riWQm'===_0x1b290b(0xc02))_0x250374['performAttackSlot'](Number(RegExp['$1']));else{if(this[_0x1b290b(0xabb)][_0x1b290b(0x9e3)](_0x8ae4a9=>_0x8ae4a9['item']()&&_0x8ae4a9['isMagical']()))return!![];}}else _0x4521bc==='attack'?_0x250374[_0x1b290b(0xa13)]():'lNtcI'!==_0x1b290b(0x879)?(this['_borderPortraitTargetX']+=_0x4dd693[_0x1b290b(0x921)](),this[_0x1b290b(0x24b)]['y']+=_0x39948c['getBattlePortraitOffsetY']()):_0x250374[_0x1b290b(0x42c)](_0x4521bc);if(!_0x50cedd){if(_0x1b290b(0x7b5)==='OiQQV')_0x250374[_0x1b290b(0x1cb)](0x0);else{_0x3847d7=_0x286a4e[_0x1b290b(0x80e)]['JS'][_0x27f839][_0x1b290b(0x73d)](this,this[_0x1b290b(0x913)](),_0x4d5f1f,this['item'](),_0x4e5e4c);if(_0x648dd)_0x4a30dc=_0x1e7c35;}}else{if(_0x50cedd&&[_0x1b290b(0x8d5),_0x1b290b(0x243),_0x1b290b(0x309)][_0x1b290b(0x802)](_0x4521bc)){}}}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Motion_PerformAction',_0x24891e=>{const _0x37551a=_0x3ffb9d;if(!SceneManager[_0x37551a(0x341)]())return;VisuMZ[_0x37551a(0xb83)](_0x24891e,_0x24891e);const _0x32fe2e=BattleManager[_0x37551a(0x58b)];if(!_0x32fe2e)return;if(!_0x32fe2e[_0x37551a(0x33b)]())return;const _0x3de5e5=VisuMZ['CreateActionSequenceTargets'](_0x24891e[_0x37551a(0x692)]);for(const _0x5f2bf7 of _0x3de5e5){if(!_0x5f2bf7)continue;_0x5f2bf7['performAction'](_0x32fe2e);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x660),_0x5e27c8=>{const _0xda031a=_0x3ffb9d;if(!SceneManager[_0xda031a(0x341)]())return;VisuMZ[_0xda031a(0xb83)](_0x5e27c8,_0x5e27c8);const _0x3fd66c=VisuMZ[_0xda031a(0xb89)](_0x5e27c8[_0xda031a(0x692)]);for(const _0x3cad4b of _0x3fd66c){if(!_0x3cad4b)continue;if(!_0x3cad4b[_0xda031a(0x491)]())continue;_0x3cad4b[_0xda031a(0x491)]()['refreshMotion']();}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xa19),_0x4616dc=>{const _0x8a0bf1=_0x3ffb9d;if(!SceneManager[_0x8a0bf1(0x341)]())return;VisuMZ[_0x8a0bf1(0xb83)](_0x4616dc,_0x4616dc);const _0x587fb1=$gameTemp[_0x8a0bf1(0x292)](),_0x2f5acd=_0x4616dc['MotionFrameWait']*Sprite_Battler['_motionSpeed'];_0x587fb1['wait'](_0x2f5acd);}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Movement_BattleStep',_0x36a3b3=>{const _0x535512=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x535512(0xb83)](_0x36a3b3,_0x36a3b3);const _0x5523fe=$gameTemp['getLastPluginCommandInterpreter'](),_0x1de414=BattleManager[_0x535512(0x58b)];if(!_0x5523fe||!_0x1de414)return;if(!_0x1de414[_0x535512(0x33b)]())return;const _0x485487=VisuMZ[_0x535512(0xb89)](_0x36a3b3['Targets']);for(const _0x144b36 of _0x485487){if(!_0x144b36)continue;_0x144b36[_0x535512(0xb4c)](_0x1de414);}if(_0x36a3b3[_0x535512(0x6dc)])_0x5523fe[_0x535512(0x27b)](_0x535512(0x5b4));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x40f),_0x27d6bf=>{const _0x177350=_0x3ffb9d;if(!SceneManager[_0x177350(0x341)]())return;if(!$gameSystem[_0x177350(0x6de)]())return;VisuMZ[_0x177350(0xb83)](_0x27d6bf,_0x27d6bf);const _0x534041=$gameTemp[_0x177350(0x292)](),_0x285bd4=VisuMZ[_0x177350(0xb89)](_0x27d6bf['Targets']),_0x45ae5b=_0x27d6bf[_0x177350(0x50c)],_0x50b71a=_0x27d6bf[_0x177350(0x996)],_0x41b453=_0x27d6bf[_0x177350(0x331)],_0x2aedb0=_0x27d6bf[_0x177350(0x20d)],_0x4f1c37=_0x27d6bf[_0x177350(0xaf0)],_0x155393=_0x27d6bf[_0x177350(0xa3f)],_0x3bbc16=_0x27d6bf[_0x177350(0x62a)],_0x2e303b=_0x27d6bf[_0x177350(0x6dc)];if(!_0x534041)return;for(const _0x5a20eb of _0x285bd4){if(!_0x5a20eb)continue;let _0x5d4cab=_0x50b71a,_0x18175e=_0x41b453;if(_0x45ae5b[_0x177350(0x1b7)](/horz/i))_0x5d4cab*=_0x5a20eb['isActor']()?-0x1:0x1;if(_0x45ae5b[_0x177350(0x1b7)](/vert/i))_0x18175e*=_0x5a20eb[_0x177350(0x2bb)]()?-0x1:0x1;_0x5a20eb[_0x177350(0x7d2)](_0x5d4cab,_0x18175e,_0x2aedb0,_0x4f1c37,_0x155393),_0x5a20eb['requestMotion'](_0x3bbc16);}if(_0x2e303b)_0x534041['setWaitMode']('battleMove');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x778),_0x1c92e7=>{const _0x1d4fc=_0x3ffb9d;if(!SceneManager[_0x1d4fc(0x341)]())return;if(!$gameSystem[_0x1d4fc(0x6de)]())return;VisuMZ['ConvertParams'](_0x1c92e7,_0x1c92e7);const _0x5e815b=$gameTemp[_0x1d4fc(0x292)](),_0x522b8f=VisuMZ[_0x1d4fc(0xb89)](_0x1c92e7[_0x1d4fc(0x692)]),_0xc4d5c5=_0x1c92e7[_0x1d4fc(0x58a)],_0x1d78de=_0x1c92e7[_0x1d4fc(0x3c9)],_0x2cc323=_0x1c92e7[_0x1d4fc(0x598)],_0x1ec9c8=_0x1c92e7[_0x1d4fc(0x622)],_0x3ad88d=_0x1c92e7[_0x1d4fc(0x20d)],_0x1d4f63=_0x1c92e7[_0x1d4fc(0xaf0)],_0x57e186=_0x1c92e7['EasingType'],_0x482b7d=_0x1c92e7['MotionType'],_0x5a98f5=_0x1c92e7[_0x1d4fc(0x6dc)];if(!_0x5e815b)return;for(const _0x53ae5d of _0x522b8f){if(_0x1d4fc(0x3b7)!==_0x1d4fc(0x3b7))this['_svBattlerSprite'][_0x1d4fc(0xa68)]();else{if(!_0x53ae5d)continue;let _0x17fedd=_0x53ae5d[_0x1d4fc(0x491)]()[_0x1d4fc(0x904)],_0x326411=_0x53ae5d[_0x1d4fc(0x491)]()[_0x1d4fc(0x531)];if(_0xc4d5c5['match'](/home/i))_0x17fedd=_0x53ae5d[_0x1d4fc(0x491)]()[_0x1d4fc(0xb48)],_0x326411=_0x53ae5d['battler']()[_0x1d4fc(0xb27)];else{if(_0xc4d5c5[_0x1d4fc(0x1b7)](/center/i))_0x1d4fc(0xa2f)!==_0x1d4fc(0xa2f)?_0x15b06a?this[_0x1d4fc(0x259)]():this[_0x1d4fc(0x37d)]():(_0x17fedd=Graphics['boxWidth']/0x2,_0x326411=Graphics[_0x1d4fc(0xbd1)]/0x2);else{if(_0xc4d5c5[_0x1d4fc(0x1b7)](/point (\d+), (\d+)/i)){if(_0x1d4fc(0x1e0)===_0x1d4fc(0x4eb)){if(this['isTpb']())this['_phase']=_0x1d4fc(0x9bc);else this[_0x1d4fc(0x966)][_0x1d4fc(0x205)]>0x0?this[_0x1d4fc(0x627)]=_0x1d4fc(0x9bc):this[_0x1d4fc(0x3e9)]();}else _0x17fedd=Number(RegExp['$1']),_0x326411=Number(RegExp['$2']);}}}if(_0x1d78de[_0x1d4fc(0x1b7)](/none/i))_0x17fedd+=_0x2cc323,_0x326411+=_0x1ec9c8;else{if(_0x1d78de[_0x1d4fc(0x1b7)](/horz/i)&&_0x1d78de[_0x1d4fc(0x1b7)](/vert/i))_0x17fedd+=_0x53ae5d[_0x1d4fc(0x2bb)]()?-_0x2cc323:_0x2cc323,_0x326411+=_0x53ae5d[_0x1d4fc(0x2bb)]()?-_0x1ec9c8:_0x1ec9c8;else{if(_0x1d78de[_0x1d4fc(0x1b7)](/horz/i))_0x1d4fc(0x62b)===_0x1d4fc(0x8a2)?(this[_0x1d4fc(0x4e4)]()&&this['_phase']===_0x1d4fc(0x7ea)&&(this[_0x1d4fc(0xa76)]=null),_0x340ce3[_0x1d4fc(0x80e)][_0x1d4fc(0xa7e)][_0x1d4fc(0x73d)](this)):(_0x17fedd+=_0x53ae5d['isActor']()?-_0x2cc323:_0x2cc323,_0x326411+=_0x1ec9c8);else _0x1d78de['match'](/vert/i)&&('KwrPP'!=='KwrPP'?this[_0x1d4fc(0x187)][_0x1d4fc(0x4cc)]():(_0x17fedd+=_0x2cc323,_0x326411+=_0x53ae5d[_0x1d4fc(0x2bb)]()?-_0x1ec9c8:_0x1ec9c8));}}_0x53ae5d[_0x1d4fc(0x1dc)](_0x17fedd,_0x326411,_0x3ad88d,_0x1d4f63,_0x57e186,-0x1),_0x53ae5d['requestMotion'](_0x482b7d);}}if(_0x5a98f5)_0x5e815b[_0x1d4fc(0x27b)](_0x1d4fc(0x5b4));}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0xc0f),_0x9f810f=>{const _0x5d0326=_0x3ffb9d;if(!SceneManager[_0x5d0326(0x341)]())return;if(!$gameSystem[_0x5d0326(0x6de)]())return;VisuMZ['ConvertParams'](_0x9f810f,_0x9f810f);const _0x3a5327=$gameTemp[_0x5d0326(0x292)](),_0x3341e4=VisuMZ['CreateActionSequenceTargets'](_0x9f810f['Targets1']),_0x3cadae=VisuMZ[_0x5d0326(0xb89)](_0x9f810f[_0x5d0326(0x7e4)]),_0x4f3802=_0x9f810f[_0x5d0326(0x351)];let _0x482a21=_0x9f810f['MeleeDistance'];const _0xe921ef=_0x9f810f[_0x5d0326(0x3c9)],_0x4bf430=_0x9f810f[_0x5d0326(0x598)],_0x4cbc96=_0x9f810f[_0x5d0326(0x622)],_0x59d52b=_0x9f810f[_0x5d0326(0x20d)],_0x255f76=_0x9f810f['FaceDirection'],_0x17400a=_0x9f810f[_0x5d0326(0xa3f)],_0x26eb1d=_0x9f810f[_0x5d0326(0x62a)],_0x420538=_0x9f810f['WaitForMovement'],_0x5a2af3=Math[_0x5d0326(0x775)](..._0x3cadae[_0x5d0326(0x2e9)](_0xe6c8a5=>_0xe6c8a5[_0x5d0326(0x491)]()[_0x5d0326(0x904)]-_0xe6c8a5[_0x5d0326(0x491)]()['mainSpriteWidth']()/0x2)),_0x271bc4=Math[_0x5d0326(0x87e)](..._0x3cadae[_0x5d0326(0x2e9)](_0x176f1d=>_0x176f1d[_0x5d0326(0x491)]()['_baseX']+_0x176f1d[_0x5d0326(0x491)]()[_0x5d0326(0xc2d)]()/0x2)),_0x31a105=Math[_0x5d0326(0x775)](..._0x3cadae[_0x5d0326(0x2e9)](_0xdcccab=>_0xdcccab[_0x5d0326(0x491)]()[_0x5d0326(0x531)]-_0xdcccab[_0x5d0326(0x491)]()[_0x5d0326(0xba4)]())),_0x241cd4=Math['max'](..._0x3cadae[_0x5d0326(0x2e9)](_0x4bcb69=>_0x4bcb69[_0x5d0326(0x491)]()[_0x5d0326(0x531)])),_0xd65224=_0x3cadae[_0x5d0326(0xae9)](_0x2091fb=>_0x2091fb[_0x5d0326(0x2bb)]())[_0x5d0326(0x205)],_0x224308=_0x3cadae[_0x5d0326(0xae9)](_0x8826f9=>_0x8826f9['isEnemy']())['length'];let _0x244bc5=0x0,_0x1aaec9=0x0;if(_0x4f3802[_0x5d0326(0x1b7)](/front/i))_0x244bc5=_0xd65224>=_0x224308?_0x5a2af3:_0x271bc4;else{if(_0x4f3802[_0x5d0326(0x1b7)](/middle/i))_0x244bc5=(_0x5a2af3+_0x271bc4)/0x2,_0x482a21=-0x1;else _0x4f3802[_0x5d0326(0x1b7)](/back/i)&&('LwmJv'!==_0x5d0326(0x925)?(_0x58c02['BattleCore'][_0x5d0326(0x88b)]['call'](this,_0xf506e9,_0x19df28),this[_0x5d0326(0x8d7)]()):_0x244bc5=_0xd65224>=_0x224308?_0x271bc4:_0x5a2af3);}if(_0x4f3802['match'](/head/i))_0x1aaec9=_0x31a105;else{if(_0x4f3802[_0x5d0326(0x1b7)](/center/i)){if(_0x5d0326(0xbbb)!==_0x5d0326(0x547))_0x1aaec9=(_0x31a105+_0x241cd4)/0x2;else{if(!_0x9e0e26[_0x5d0326(0x240)])return;const _0x482698=_0x18af20[_0x5d0326(0x947)]['_spriteset'];if(!_0x482698)return;if(_0x4ebd69['ActSeqImpact'][_0x5d0326(0x3c3)]<=1.04){_0x32ca15(_0x5d0326(0xa11)),_0x5d5487[_0x5d0326(0x6b5)]();return;}_0x227bb1['ConvertParams'](_0x5697c2,_0xef2905);const _0x2c3de5=_0x5cc996[_0x5d0326(0x292)](),_0x513c40=_0x41ecc5[_0x5d0326(0x87e)](0.01,_0x30366f[_0x5d0326(0x8fc)]);_0x56c23d[_0x5d0326(0xb26)](_0x513c40,_0x2c3de5);}}else{if(_0x4f3802[_0x5d0326(0x1b7)](/base/i)){if(_0x5d0326(0x1e7)==='qEdpA')_0x1aaec9=_0x241cd4;else{let _0x4e079c=[];return this[_0x5d0326(0x1f5)]()?_0x4e079c=this[_0x5d0326(0x3d7)]():_0x4e079c=_0x3ec0fd[_0x5d0326(0x80e)][_0x5d0326(0x9f8)][_0x5d0326(0x73d)](this),_0x4e079c=this[_0x5d0326(0x740)](_0x4e079c),_0x4e079c;}}}}if(!_0x3a5327)return;for(const _0x319b40 of _0x3341e4){if(!_0x319b40)continue;let _0x187844=_0x244bc5,_0x5a79e5=_0x1aaec9;if(_0xe921ef[_0x5d0326(0x1b7)](/none/i))_0x5d0326(0x817)===_0x5d0326(0x817)?(_0x187844+=_0x4bf430,_0x5a79e5+=_0x4cbc96):this[_0x5d0326(0xa85)]=null;else{if(_0xe921ef[_0x5d0326(0x1b7)](/horz/i)&&_0xe921ef['match'](/vert/i))_0x187844+=_0x319b40['isActor']()?-_0x4bf430:_0x4bf430,_0x5a79e5+=_0x319b40['isActor']()?-_0x4cbc96:_0x4cbc96;else{if(_0xe921ef[_0x5d0326(0x1b7)](/horz/i))_0x5d0326(0x26d)===_0x5d0326(0x26d)?(_0x187844+=_0x319b40[_0x5d0326(0x2bb)]()?-_0x4bf430:_0x4bf430,_0x5a79e5+=_0x4cbc96):this[_0x5d0326(0x213)]();else _0xe921ef[_0x5d0326(0x1b7)](/vert/i)&&(_0x187844+=_0x4bf430,_0x5a79e5+=_0x319b40[_0x5d0326(0x2bb)]()?-_0x4cbc96:_0x4cbc96);}}_0x319b40[_0x5d0326(0x1dc)](_0x187844,_0x5a79e5,_0x59d52b,_0x255f76,_0x17400a,_0x482a21),_0x319b40[_0x5d0326(0x42c)](_0x26eb1d);}if(_0x420538)_0x3a5327[_0x5d0326(0x27b)](_0x5d0326(0x5b4));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Movement_FaceDirection',_0x132937=>{const _0x436df9=_0x3ffb9d;if(!SceneManager[_0x436df9(0x341)]())return;if(!$gameSystem[_0x436df9(0x6de)]())return;VisuMZ['ConvertParams'](_0x132937,_0x132937);const _0x802b28=VisuMZ['CreateActionSequenceTargets'](_0x132937[_0x436df9(0x692)]);let _0xdc4251=_0x132937[_0x436df9(0x75f)][_0x436df9(0x1b7)](/back/i);for(const _0x283f0f of _0x802b28){if(_0x436df9(0x524)===_0x436df9(0x87d))_0xa97211[_0x436df9(0x80e)][_0x436df9(0x71b)][_0x436df9(0x73d)](this),this[_0x436df9(0x430)]=this['_iconIndex']>0x0?0xff:0x0;else{if(!_0x283f0f)continue;if(_0x132937[_0x436df9(0x75f)][_0x436df9(0x1b7)](/rand/i))_0xdc4251=Math['randomInt'](0x2);_0x283f0f[_0x436df9(0xa88)](!!_0xdc4251);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0xa3a),_0x5e7707=>{const _0x4449ea=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem[_0x4449ea(0x6de)]())return;VisuMZ[_0x4449ea(0xb83)](_0x5e7707,_0x5e7707);const _0x53e417=VisuMZ[_0x4449ea(0xb89)](_0x5e7707['Targets']);let _0xc4f4a7=_0x5e7707[_0x4449ea(0x9ea)];const _0x9fc1f1=_0x5e7707[_0x4449ea(0x8db)];for(const _0x2f8be2 of _0x53e417){if(_0x4449ea(0x3a5)===_0x4449ea(0x404))this[_0x4449ea(0xab9)]['remove'](_0x1cd0dd),this[_0x4449ea(0x37f)](_0x32d9c5)?this['battleStatusWindowAnimationContainer']()[_0x4449ea(0xa29)](_0x137fb8):this[_0x4449ea(0x687)]['removeChild'](_0x4513c6);else{if(!_0x2f8be2)continue;let _0x368d58=_0x2f8be2[_0x4449ea(0x491)]()[_0x4449ea(0x904)],_0xfa9e5d=_0x2f8be2[_0x4449ea(0x491)]()['_baseY'];if(_0xc4f4a7[_0x4449ea(0x1b7)](/home/i)){if(_0x4449ea(0xc28)==='wFrdi')return this[_0x4449ea(0x1ea)](_0x49d4ac);else _0x368d58=_0x2f8be2[_0x4449ea(0x491)]()[_0x4449ea(0xb48)],_0xfa9e5d=_0x2f8be2['battler']()[_0x4449ea(0xb27)];}else{if(_0xc4f4a7[_0x4449ea(0x1b7)](/center/i))_0x368d58=Graphics[_0x4449ea(0x8f0)]/0x2,_0xfa9e5d=Graphics[_0x4449ea(0xbd1)]/0x2;else _0xc4f4a7[_0x4449ea(0x1b7)](/point (\d+), (\d+)/i)&&(_0x4449ea(0x9bb)!==_0x4449ea(0x9bb)?(this[_0x4449ea(0x948)](),this[_0x4449ea(0x390)](),this[_0x4449ea(0x249)](),this['addOptionsCommand'](),this[_0x4449ea(0x733)]()):(_0x368d58=Number(RegExp['$1']),_0xfa9e5d=Number(RegExp['$2'])));}_0x2f8be2[_0x4449ea(0x2b8)](Math[_0x4449ea(0x68f)](_0x368d58),Math[_0x4449ea(0x68f)](_0xfa9e5d),!!_0x9fc1f1);}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x53b),_0xb999b=>{const _0x298385=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!$gameSystem['isSideView']())return;VisuMZ[_0x298385(0xb83)](_0xb999b,_0xb999b);const _0x53ebb8=VisuMZ['CreateActionSequenceTargets'](_0xb999b[_0x298385(0xad8)]),_0x5149ff=VisuMZ['CreateActionSequenceTargets'](_0xb999b[_0x298385(0x7e4)]),_0x139344=_0x5149ff[_0x298385(0x2e9)](_0x3f9730=>_0x3f9730&&_0x3f9730[_0x298385(0x491)]()?_0x3f9730['battler']()[_0x298385(0x904)]:0x0)/(_0x5149ff[_0x298385(0x205)]||0x1),_0x289d9e=_0x5149ff[_0x298385(0x2e9)](_0x429ced=>_0x429ced&&_0x429ced['battler']()?_0x429ced[_0x298385(0x491)]()[_0x298385(0x531)]:0x0)/(_0x5149ff[_0x298385(0x205)]||0x1),_0x54987c=_0xb999b[_0x298385(0x8db)];for(const _0x135977 of _0x53ebb8){if(!_0x135977)continue;_0x135977['setBattlerFacePoint'](Math[_0x298385(0x68f)](_0x139344),Math[_0x298385(0x68f)](_0x289d9e),!!_0x54987c);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Movement_Float',_0x135312=>{const _0x3ac33b=_0x3ffb9d;if(!SceneManager[_0x3ac33b(0x341)]())return;VisuMZ[_0x3ac33b(0xb83)](_0x135312,_0x135312);const _0x3d99d8=$gameTemp['getLastPluginCommandInterpreter'](),_0x187935=VisuMZ[_0x3ac33b(0xb89)](_0x135312[_0x3ac33b(0x692)]),_0x36cb4e=_0x135312[_0x3ac33b(0x518)],_0x3e6123=_0x135312[_0x3ac33b(0x20d)],_0x73851c=_0x135312[_0x3ac33b(0xa3f)],_0x41fc67=_0x135312[_0x3ac33b(0x5f1)];if(!_0x3d99d8)return;for(const _0x332d3b of _0x187935){if(!_0x332d3b)continue;_0x332d3b[_0x3ac33b(0x408)](_0x36cb4e,_0x3e6123,_0x73851c);}if(_0x41fc67)_0x3d99d8[_0x3ac33b(0x27b)](_0x3ac33b(0xa08));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x264),_0xd69a8c=>{const _0x54e67d=_0x3ffb9d;if(!SceneManager[_0x54e67d(0x341)]())return;VisuMZ['ConvertParams'](_0xd69a8c,_0xd69a8c);const _0x1f63ad=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x1f63ad)return;const _0x131e95=VisuMZ[_0x54e67d(0xb89)](_0xd69a8c[_0x54e67d(0x692)]);for(const _0x572c7d of _0x131e95){if(_0x54e67d(0xadc)==='xuUOq'){this['_flashColor']=_0x27c568[_0x54e67d(0xa02)]||[0x0,0x0,0x0,0x0],this[_0x54e67d(0x41c)]=_0x55caa4[_0x54e67d(0x965)](this[_0x54e67d(0x41c)]),this[_0x54e67d(0x9b1)]=_0x6eb06b['flashDuration']||0x0;const _0x2d3d5f=this['fontSize'](),_0x5f2702=_0x29c05b[_0x54e67d(0x9bd)](_0x2d3d5f*0x1e),_0x39a7ed=this[_0x54e67d(0x363)](_0x5f2702,_0x2d3d5f);_0x39a7ed[_0x54e67d(0x6a0)][_0x54e67d(0xc17)]=_0x467ab9[_0x54e67d(0xb9b)](_0x576e78[_0x54e67d(0xc17)]),_0x39a7ed[_0x54e67d(0x6a0)][_0x54e67d(0x86d)](_0x384af0,0x0,0x0,_0x5f2702,_0x2d3d5f,'center'),_0x39a7ed['dy']=0x0;}else{if(!_0x572c7d)continue;_0x572c7d[_0x54e67d(0x30d)]();}}BattleManager[_0x54e67d(0xa98)]&&('HDEvA'!==_0x54e67d(0x30a)?(_0x3b2dc5['prototype']['update'][_0x54e67d(0x73d)](this),this[_0x54e67d(0x402)]()&&this[_0x54e67d(0x402)]()['name']()!==this[_0x54e67d(0xbb8)]&&(this[_0x54e67d(0xbb8)]=this[_0x54e67d(0x402)]()['name'](),this[_0x54e67d(0x96b)]()),this[_0x54e67d(0x1a2)](),this[_0x54e67d(0x712)]()):BattleManager[_0x54e67d(0xa98)][_0x54e67d(0xb93)]());if(_0xd69a8c[_0x54e67d(0x6dc)])_0x1f63ad[_0x54e67d(0x27b)](_0x54e67d(0x5b4));}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Movement_Jump',_0xa65ada=>{const _0xa7034a=_0x3ffb9d;if(!SceneManager[_0xa7034a(0x341)]())return;VisuMZ[_0xa7034a(0xb83)](_0xa65ada,_0xa65ada);const _0x53c731=$gameTemp[_0xa7034a(0x292)](),_0x164723=VisuMZ[_0xa7034a(0xb89)](_0xa65ada['Targets']),_0xe1c2dd=_0xa65ada['Height'],_0x4bdacf=_0xa65ada[_0xa7034a(0x20d)],_0x3a2070=_0xa65ada[_0xa7034a(0x859)];if(!_0x53c731)return;for(const _0xee25a of _0x164723){if(_0xa7034a(0x695)!==_0xa7034a(0xa7a)){if(!_0xee25a)continue;_0xee25a['jumpBattler'](_0xe1c2dd,_0x4bdacf);}else{const _0x2da3a2=_0x457e20[_0xa7034a(0x76b)](_0x2a2f5a[_0xa7034a(0x614)]()[_0xa7034a(0x33a)]());_0x2da3a2>=0x0&&_0x2da3a2<=0x7&&_0x400e2a[_0xa7034a(0xad1)](_0x2da3a2,_0x67621e);}}if(_0x3a2070)_0x53c731[_0xa7034a(0x27b)]('battleJump');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Movement_MoveBy',_0x209222=>{const _0x4f98fb=_0x3ffb9d;if(!SceneManager[_0x4f98fb(0x341)]())return;if(!$gameSystem[_0x4f98fb(0x6de)]())return;VisuMZ['ConvertParams'](_0x209222,_0x209222);const _0x481e5c=$gameTemp[_0x4f98fb(0x292)](),_0x5040d9=VisuMZ['CreateActionSequenceTargets'](_0x209222[_0x4f98fb(0x692)]),_0x3b0b6e=_0x209222[_0x4f98fb(0x50c)],_0x177900=_0x209222['DistanceX'],_0x2af49f=_0x209222[_0x4f98fb(0x331)],_0x9d31d9=_0x209222[_0x4f98fb(0x20d)],_0x476f72=_0x209222['FaceDirection'],_0x222994=_0x209222[_0x4f98fb(0xa3f)],_0x3101cf=_0x209222[_0x4f98fb(0x62a)],_0x345d4d=_0x209222[_0x4f98fb(0x6dc)];if(!_0x481e5c)return;for(const _0xf8c1ef of _0x5040d9){if(_0x4f98fb(0x6df)!==_0x4f98fb(0x6df))_0x277373*=_0xa32d30[_0x4f98fb(0x2cb)](_0x5af664[_0x4f98fb(0x8e6)]),_0x422fb2*=this[_0x4f98fb(0xaa1)](_0x4cd03b);else{if(!_0xf8c1ef)continue;let _0x54a04e=_0x177900,_0x578ee2=_0x2af49f;if(_0x3b0b6e['match'](/horz/i))_0x54a04e*=_0xf8c1ef[_0x4f98fb(0x2bb)]()?-0x1:0x1;if(_0x3b0b6e[_0x4f98fb(0x1b7)](/vert/i))_0x578ee2*=_0xf8c1ef[_0x4f98fb(0x2bb)]()?-0x1:0x1;_0xf8c1ef[_0x4f98fb(0x7fb)](_0x54a04e,_0x578ee2,_0x9d31d9,_0x476f72,_0x222994),_0xf8c1ef['requestMotion'](_0x3101cf);}}if(_0x345d4d)_0x481e5c[_0x4f98fb(0x27b)]('battleMove');}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x72c),_0x2c4266=>{const _0x26ab5d=_0x3ffb9d;if(!SceneManager[_0x26ab5d(0x341)]())return;if(!$gameSystem[_0x26ab5d(0x6de)]())return;VisuMZ['ConvertParams'](_0x2c4266,_0x2c4266);const _0x54aff9=$gameTemp[_0x26ab5d(0x292)](),_0x3c0865=VisuMZ[_0x26ab5d(0xb89)](_0x2c4266[_0x26ab5d(0x692)]),_0x58ebad=_0x2c4266[_0x26ab5d(0x58a)],_0x2d4c80=_0x2c4266['OffsetAdjust'],_0x5509a1=_0x2c4266[_0x26ab5d(0x598)],_0x2136a0=_0x2c4266[_0x26ab5d(0x622)],_0x143063=_0x2c4266['Duration'],_0x2db6d6=_0x2c4266[_0x26ab5d(0xaf0)],_0x278d39=_0x2c4266[_0x26ab5d(0xa3f)],_0xfeaef9=_0x2c4266[_0x26ab5d(0x62a)],_0x1dce26=_0x2c4266['WaitForMovement'];if(!_0x54aff9)return;for(const _0x240101 of _0x3c0865){if(_0x26ab5d(0xa89)===_0x26ab5d(0xa89)){if(!_0x240101)continue;let _0x4898c6=_0x240101['battler']()['_baseX'],_0x267933=_0x240101[_0x26ab5d(0x491)]()['_baseY'];if(_0x58ebad['match'](/home/i)){if(_0x26ab5d(0x7fe)!==_0x26ab5d(0x7fe)){const _0x4c9892=_0x556ce5[_0x26ab5d(0x965)](_0x24df76);_0x4c9892['hpAffected']=![],_0x4c9892[_0x26ab5d(0x211)]=0x0,this[_0x26ab5d(0x3bf)][_0x26ab5d(0x7dd)](_0x4c9892);}else _0x4898c6=_0x240101[_0x26ab5d(0x491)]()[_0x26ab5d(0xb48)],_0x267933=_0x240101['battler']()['_homeY'];}else{if(_0x58ebad['match'](/center/i))_0x4898c6=Graphics['boxWidth']/0x2,_0x267933=Graphics[_0x26ab5d(0xbd1)]/0x2;else _0x58ebad[_0x26ab5d(0x1b7)](/point (\d+), (\d+)/i)&&('OYqNZ'===_0x26ab5d(0xc31)?(_0x4898c6=Number(RegExp['$1']),_0x267933=Number(RegExp['$2'])):this['drawItemStyleIconText'](_0x19f048));}if(_0x2d4c80['match'](/none/i)){if(_0x26ab5d(0x973)===_0x26ab5d(0x973))_0x4898c6+=_0x5509a1,_0x267933+=_0x2136a0;else return _0xb3802['isActor']()?_0x3ea20c[_0x26ab5d(0xa0d)]()[_0x26ab5d(0x205)]||0x1:0x1;}else{if(_0x2d4c80[_0x26ab5d(0x1b7)](/horz/i)&&_0x2d4c80[_0x26ab5d(0x1b7)](/vert/i))_0x4898c6+=_0x240101[_0x26ab5d(0x2bb)]()?-_0x5509a1:_0x5509a1,_0x267933+=_0x240101[_0x26ab5d(0x2bb)]()?-_0x2136a0:_0x2136a0;else{if(_0x2d4c80['match'](/horz/i))'ePIhR'!==_0x26ab5d(0x6e8)?(_0x4898c6+=_0x240101[_0x26ab5d(0x2bb)]()?-_0x5509a1:_0x5509a1,_0x267933+=_0x2136a0):this['_branch'][this[_0x26ab5d(0x443)]]=_0x95cc53;else _0x2d4c80[_0x26ab5d(0x1b7)](/vert/i)&&(_0x4898c6+=_0x5509a1,_0x267933+=_0x240101[_0x26ab5d(0x2bb)]()?-_0x2136a0:_0x2136a0);}}_0x240101[_0x26ab5d(0x4d9)](_0x4898c6,_0x267933,_0x143063,_0x2db6d6,_0x278d39,-0x1),_0x240101[_0x26ab5d(0x42c)](_0xfeaef9);}else this[_0x26ab5d(0xa84)](_0x26ab5d(0x236));}if(_0x1dce26)_0x54aff9[_0x26ab5d(0x27b)](_0x26ab5d(0x5b4));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x5e8),_0xdd0bd7=>{const _0x589951=_0x3ffb9d;if(!SceneManager[_0x589951(0x341)]())return;if(!$gameSystem[_0x589951(0x6de)]())return;VisuMZ[_0x589951(0xb83)](_0xdd0bd7,_0xdd0bd7);const _0x334a89=$gameTemp['getLastPluginCommandInterpreter'](),_0x2368a6=VisuMZ['CreateActionSequenceTargets'](_0xdd0bd7['Targets1']),_0x398edd=VisuMZ['CreateActionSequenceTargets'](_0xdd0bd7[_0x589951(0x7e4)]),_0x240e32=_0xdd0bd7[_0x589951(0x351)];let _0x429478=_0xdd0bd7['MeleeDistance'];const _0xe3bdce=_0xdd0bd7[_0x589951(0x3c9)],_0x50c46=_0xdd0bd7[_0x589951(0x598)],_0x10589d=_0xdd0bd7[_0x589951(0x622)],_0x26c6fb=_0xdd0bd7[_0x589951(0x20d)],_0x58429b=_0xdd0bd7[_0x589951(0xaf0)],_0x1a79df=_0xdd0bd7[_0x589951(0xa3f)],_0x1e556b=_0xdd0bd7[_0x589951(0x62a)],_0x189ae=_0xdd0bd7['WaitForMovement'],_0x35abf8=Math[_0x589951(0x775)](..._0x398edd[_0x589951(0x2e9)](_0x41f561=>_0x41f561[_0x589951(0x491)]()['_baseX']-_0x41f561[_0x589951(0x491)]()[_0x589951(0xc2d)]()/0x2)),_0x2342e1=Math['max'](..._0x398edd['map'](_0x3c257f=>_0x3c257f[_0x589951(0x491)]()[_0x589951(0x904)]+_0x3c257f['battler']()['mainSpriteWidth']()/0x2)),_0x505f44=Math[_0x589951(0x775)](..._0x398edd[_0x589951(0x2e9)](_0x39487f=>_0x39487f['battler']()[_0x589951(0x531)]-_0x39487f[_0x589951(0x491)]()[_0x589951(0xba4)]())),_0x390406=Math['max'](..._0x398edd['map'](_0x4c6883=>_0x4c6883[_0x589951(0x491)]()[_0x589951(0x531)])),_0x5e6260=_0x398edd[_0x589951(0xae9)](_0x704828=>_0x704828[_0x589951(0x2bb)]())[_0x589951(0x205)],_0xd1637d=_0x398edd[_0x589951(0xae9)](_0x41d13e=>_0x41d13e['isEnemy']())['length'];let _0x195296=0x0,_0x34577f=0x0;if(_0x240e32['match'](/front/i))_0x195296=_0x5e6260>=_0xd1637d?_0x35abf8:_0x2342e1;else{if(_0x240e32[_0x589951(0x1b7)](/middle/i)){if(_0x589951(0x99a)!==_0x589951(0x7a3))_0x195296=(_0x35abf8+_0x2342e1)/0x2,_0x429478=-0x1;else{if(_0x577762[_0x589951(0x58e)])this[_0x589951(0x235)](_0x4bbfcc[_0x589951(0x5bd)],_0x4ed170,_0x1f516e);}}else _0x240e32[_0x589951(0x1b7)](/back/i)&&(_0x195296=_0x5e6260>=_0xd1637d?_0x2342e1:_0x35abf8);}if(_0x240e32['match'](/head/i)){if(_0x589951(0x776)!==_0x589951(0x776)){if(!_0x455362[_0x589951(0x947)])return;if(!_0xd909ed[_0x589951(0x947)][_0x589951(0x9da)])return;if(!_0x4fe0d4[_0x589951(0x820)])return;_0x4ccb66[_0x589951(0xb83)](_0x22e789,_0x4daeb2);const _0x270723=_0x5ebe68[_0x589951(0x292)](),_0x5944b9=_0x5eafa8[_0x589951(0x68f)](_0x2505e2[_0x589951(0x649)]),_0x17e576=_0x2e467d['round'](_0x22fd47['pointY']);_0x465383[_0x589951(0x1fe)](_0x5944b9,_0x17e576,_0xc27a28['AnimationID'],_0x1ca514['Mirror'],_0x2f8e3f[_0x589951(0x645)]),_0x2e65a4['WaitComplete']&&_0x270723&&(_0x4d7a1b[_0x589951(0x947)][_0x589951(0x9da)][_0x589951(0x74a)](),_0x270723[_0x589951(0x27b)](_0x589951(0x73c)));}else _0x34577f=_0x505f44;}else{if(_0x240e32[_0x589951(0x1b7)](/center/i))_0x589951(0x316)!==_0x589951(0x316)?this['updateForceAction']():_0x34577f=(_0x505f44+_0x390406)/0x2;else _0x240e32[_0x589951(0x1b7)](/base/i)&&(_0x34577f=_0x390406);}if(!_0x334a89)return;for(const _0x5d2266 of _0x2368a6){if(!_0x5d2266)continue;let _0x4ef1b5=_0x195296,_0x4de24b=_0x34577f;if(_0xe3bdce[_0x589951(0x1b7)](/none/i))_0x4ef1b5+=_0x50c46,_0x4de24b+=_0x10589d;else{if(_0xe3bdce['match'](/horz/i)&&_0xe3bdce[_0x589951(0x1b7)](/vert/i))_0x4ef1b5+=_0x5d2266[_0x589951(0x2bb)]()?-_0x50c46:_0x50c46,_0x4de24b+=_0x5d2266[_0x589951(0x2bb)]()?-_0x10589d:_0x10589d;else{if(_0xe3bdce[_0x589951(0x1b7)](/horz/i)){if(_0x589951(0xb09)===_0x589951(0x435)){const _0x46c449=_0x46f365(_0x226719['$1']),_0x10c7da=_0x325f52[_0x589951(0x80e)][_0x589951(0xb88)](_0x6f7e8a,_0x589951(0x692));_0x36a448['BattleCore'][_0x589951(0x24d)](_0x46c449,_0x10c7da);}else _0x4ef1b5+=_0x5d2266[_0x589951(0x2bb)]()?-_0x50c46:_0x50c46,_0x4de24b+=_0x10589d;}else _0xe3bdce[_0x589951(0x1b7)](/vert/i)&&(_0x4ef1b5+=_0x50c46,_0x4de24b+=_0x5d2266[_0x589951(0x2bb)]()?-_0x10589d:_0x10589d);}}_0x5d2266[_0x589951(0x4d9)](_0x4ef1b5,_0x4de24b,_0x26c6fb,_0x58429b,_0x1a79df,_0x429478),_0x5d2266[_0x589951(0x42c)](_0x1e556b);}if(_0x189ae)_0x334a89[_0x589951(0x27b)]('battleMove');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x3db),_0xfb77be=>{const _0x310969=_0x3ffb9d;if(!SceneManager[_0x310969(0x341)]())return;VisuMZ[_0x310969(0xb83)](_0xfb77be,_0xfb77be);const _0x2feb49=$gameTemp[_0x310969(0x292)](),_0x4e3c43=VisuMZ[_0x310969(0xb89)](_0xfb77be['Targets']),_0xf7e805=_0xfb77be[_0x310969(0x4bc)],_0x321fd7=_0xfb77be['Duration'],_0x822299=_0xfb77be['EasingType'],_0x13d8d5=_0xfb77be[_0x310969(0x296)];if(!_0x2feb49)return;for(const _0x557e73 of _0x4e3c43){if(_0x310969(0x79c)!==_0x310969(0xa41)){if(!_0x557e73)continue;_0x557e73['changeBattlerOpacity'](_0xf7e805,_0x321fd7,_0x822299);}else _0x10afbf['prototype'][_0x310969(0xa4c)][_0x310969(0x73d)](this),this[_0x310969(0x3d3)][_0x310969(0xa51)]=_0x5850c4[_0x310969(0x80e)][_0x310969(0x901)]['Enemy'][_0x310969(0x80d)];}if(_0x13d8d5)_0x2feb49[_0x310969(0x27b)]('battleOpacity');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x429),_0x44a40a=>{const _0x30abcd=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ['ConvertParams'](_0x44a40a,_0x44a40a);const _0x3fa12b=$gameTemp['getLastPluginCommandInterpreter'](),_0x14fa3e=VisuMZ[_0x30abcd(0xb89)](_0x44a40a['Targets']),_0x4ea7f4=_0x44a40a['ScaleX'],_0xa0e2f=_0x44a40a[_0x30abcd(0x242)],_0x4b79a5=_0x44a40a[_0x30abcd(0x20d)],_0x4f42a5=_0x44a40a[_0x30abcd(0xa3f)],_0x305b35=_0x44a40a['WaitForScale'];if(!_0x3fa12b)return;for(const _0x59629b of _0x14fa3e){if(!_0x59629b)continue;_0x59629b[_0x30abcd(0x43b)](_0x4ea7f4,_0xa0e2f,_0x4b79a5,_0x4f42a5);}if(_0x305b35)_0x3fa12b['setWaitMode'](_0x30abcd(0xb1e));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x8f3),_0x28e0cf=>{const _0x19a47f=_0x3ffb9d;if(!SceneManager[_0x19a47f(0x341)]())return;VisuMZ['ConvertParams'](_0x28e0cf,_0x28e0cf);const _0x47fa89=$gameTemp[_0x19a47f(0x292)](),_0x465642=VisuMZ[_0x19a47f(0xb89)](_0x28e0cf[_0x19a47f(0x692)]),_0x471fff=_0x28e0cf[_0x19a47f(0x698)],_0x5f3049=_0x28e0cf[_0x19a47f(0x288)],_0x2f846a=_0x28e0cf[_0x19a47f(0x20d)],_0x3b29ef=_0x28e0cf['EasingType'],_0x1513b3=_0x28e0cf['WaitForSkew'];if(!_0x47fa89)return;for(const _0x38bfdc of _0x465642){if(!_0x38bfdc)continue;_0x38bfdc['skewBattler'](_0x471fff,_0x5f3049,_0x2f846a,_0x3b29ef);}if(_0x1513b3)_0x47fa89[_0x19a47f(0x27b)]('battleSpriteSkew');}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Movement_Spin',_0x3d8a4b=>{const _0x2fd42c=_0x3ffb9d;if(!SceneManager[_0x2fd42c(0x341)]())return;VisuMZ[_0x2fd42c(0xb83)](_0x3d8a4b,_0x3d8a4b);const _0x1ec8e7=$gameTemp[_0x2fd42c(0x292)](),_0x2601e2=VisuMZ[_0x2fd42c(0xb89)](_0x3d8a4b[_0x2fd42c(0x692)]),_0x5eecd5=_0x3d8a4b[_0x2fd42c(0xae3)],_0x247219=_0x3d8a4b[_0x2fd42c(0x20d)],_0x291725=_0x3d8a4b[_0x2fd42c(0xa3f)],_0x5c358e=_0x3d8a4b[_0x2fd42c(0x2d7)],_0x36a3f7=_0x3d8a4b['WaitForSpin'];if(!_0x1ec8e7)return;for(const _0x29736c of _0x2601e2){if(_0x2fd42c(0x4f5)===_0x2fd42c(0x9e6)){if(_0x47e0e8[_0x2fd42c(0x9da)]['isAnyProjectilePresent']())return!![];this[_0x2fd42c(0x798)]='';}else{if(!_0x29736c)continue;_0x29736c[_0x2fd42c(0x767)](_0x5eecd5,_0x247219,_0x291725,_0x5c358e);}}if(_0x36a3f7)_0x1ec8e7[_0x2fd42c(0x27b)](_0x2fd42c(0x3eb));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x502),_0x35809a=>{const _0x29dbb8=_0x3ffb9d;if(!SceneManager[_0x29dbb8(0x341)]())return;const _0x286fce=$gameTemp[_0x29dbb8(0x292)]();if(!_0x286fce)return;_0x286fce[_0x29dbb8(0x27b)](_0x29dbb8(0xa08));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x827),_0x4780b3=>{const _0x1f8628=_0x3ffb9d;if(!SceneManager[_0x1f8628(0x341)]())return;const _0x904791=$gameTemp[_0x1f8628(0x292)]();if(!_0x904791)return;_0x904791['setWaitMode'](_0x1f8628(0x4a8));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xab1),_0x38b6bd=>{const _0x2236ff=_0x3ffb9d;if(!SceneManager[_0x2236ff(0x341)]())return;const _0x5ef456=$gameTemp[_0x2236ff(0x292)]();if(!_0x5ef456)return;_0x5ef456[_0x2236ff(0x27b)]('battleMove');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x223),_0x1c3211=>{const _0x41efa2=_0x3ffb9d;if(!SceneManager[_0x41efa2(0x341)]())return;const _0x5a2399=$gameTemp[_0x41efa2(0x292)]();if(!_0x5a2399)return;_0x5a2399['setWaitMode'](_0x41efa2(0x5d7));}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],'ActSeq_Movement_WaitForScale',_0xe2ed07=>{const _0x57793b=_0x3ffb9d;if(!SceneManager[_0x57793b(0x341)]())return;const _0x2e2a12=$gameTemp[_0x57793b(0x292)]();if(!_0x2e2a12)return;_0x2e2a12[_0x57793b(0x27b)]('battleGrow');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],'ActSeq_Movement_WaitForSkew',_0x5b3cca=>{const _0x50911f=_0x3ffb9d;if(!SceneManager[_0x50911f(0x341)]())return;const _0x12a375=$gameTemp[_0x50911f(0x292)]();if(!_0x12a375)return;_0x12a375[_0x50911f(0x27b)](_0x50911f(0x5d8));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x488),_0x488421=>{const _0x530c27=_0x3ffb9d;if(!SceneManager[_0x530c27(0x341)]())return;const _0x2bc6b0=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x2bc6b0)return;_0x2bc6b0['setWaitMode'](_0x530c27(0x3eb));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xbd5),_0x1800fe=>{const _0xd790e0=_0x3ffb9d;if(!SceneManager[_0xd790e0(0x341)]())return;if(!Imported[_0xd790e0(0x4ae)])return;VisuMZ[_0xd790e0(0xb83)](_0x1800fe,_0x1800fe);const _0x71d7be=$gameTemp[_0xd790e0(0x292)](),_0x1ee727=_0x1800fe[_0xd790e0(0x3cd)];if(!_0x71d7be)return;const _0x53e552=BattleManager[_0xd790e0(0x9da)];if(!_0x53e552)return;_0x53e552['createActionSequenceProjectile'](_0x1800fe);if(_0x1ee727)_0x71d7be[_0xd790e0(0x27b)](_0xd790e0(0x193));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x771),_0x3e963e=>{const _0x48660d=_0x3ffb9d;if(!SceneManager[_0x48660d(0x341)]())return;if(!Imported['VisuMZ_3_ActSeqProjectiles'])return;VisuMZ[_0x48660d(0xb83)](_0x3e963e,_0x3e963e);const _0x5eb016=$gameTemp[_0x48660d(0x292)](),_0x3e57a7=_0x3e963e['WaitForProjectile'];if(!_0x5eb016)return;const _0x3b33af=BattleManager[_0x48660d(0x9da)];if(!_0x3b33af)return;_0x3b33af[_0x48660d(0x8ec)](_0x3e963e);if(_0x3e57a7)_0x5eb016[_0x48660d(0x27b)](_0x48660d(0x193));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x27d),_0x2c168e=>{const _0x111372=_0x3ffb9d;if(!SceneManager[_0x111372(0x341)]())return;if(!Imported[_0x111372(0x4ae)])return;VisuMZ['ConvertParams'](_0x2c168e,_0x2c168e);const _0x105b64=$gameTemp[_0x111372(0x292)](),_0x1b1036=_0x2c168e[_0x111372(0x3cd)];if(!_0x105b64)return;const _0x3d17dd=BattleManager[_0x111372(0x9da)];if(!_0x3d17dd)return;_0x3d17dd[_0x111372(0x8ec)](_0x2c168e);if(_0x1b1036)_0x105b64['setWaitMode']('battleProjectiles');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0x7f1),_0x369e17=>{const _0x27ff26=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x27ff26(0x8ba)])return;VisuMZ[_0x27ff26(0xb83)](_0x369e17,_0x369e17);const _0x19db63=$gameTemp[_0x27ff26(0x292)](),_0x4d4dfe=_0x369e17[_0x27ff26(0x217)];if(!_0x19db63)return;$gameScreen['setBattleSkew'](_0x369e17[_0x27ff26(0x698)],_0x369e17[_0x27ff26(0x288)],_0x369e17['Duration'],_0x369e17[_0x27ff26(0xa3f)]);if(_0x4d4dfe)_0x19db63[_0x27ff26(0x27b)](_0x27ff26(0x6b0));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Skew_Reset',_0x1b641a=>{const _0x361d66=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported[_0x361d66(0x8ba)])return;VisuMZ[_0x361d66(0xb83)](_0x1b641a,_0x1b641a);const _0x2aa3c5=$gameTemp[_0x361d66(0x292)](),_0x5a9ead=_0x1b641a[_0x361d66(0x217)];if(!_0x2aa3c5)return;$gameScreen[_0x361d66(0x31a)](0x0,0x0,_0x1b641a[_0x361d66(0x20d)],_0x1b641a[_0x361d66(0xa3f)]);if(_0x5a9ead)_0x2aa3c5[_0x361d66(0x27b)](_0x361d66(0x6b0));}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x668),_0x2e8cb4=>{const _0x1d42cb=_0x3ffb9d;if(!SceneManager[_0x1d42cb(0x341)]())return;if(!Imported[_0x1d42cb(0x8ba)])return;const _0x44543c=$gameTemp['getLastPluginCommandInterpreter']();if(!_0x44543c)return;_0x44543c['setWaitMode']('battleSkew');}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0xb1d),_0x400386=>{const _0x42c7a7=_0x3ffb9d;if(!SceneManager[_0x42c7a7(0x341)]())return;VisuMZ[_0x42c7a7(0xb83)](_0x400386,_0x400386);const _0x3d7133=$gameTemp[_0x42c7a7(0x292)](),_0x59b4c5=_0x400386[_0x42c7a7(0x482)],_0x457d9c=_0x400386[_0x42c7a7(0x4c4)];if(!_0x3d7133)return;BattleManager['_targetIndex']=_0x59b4c5,BattleManager['_target']=BattleManager[_0x42c7a7(0x4ff)]?BattleManager[_0x42c7a7(0x4ff)][BattleManager[_0x42c7a7(0x7b2)]]||null:null,BattleManager['_target']&&_0x457d9c['toUpperCase']()[_0x42c7a7(0x33a)]()!==_0x42c7a7(0x5cc)&&(_0x42c7a7(0x6e1)==='RUfTg'?_0x3d7133[_0x42c7a7(0x8ce)]([_0x457d9c]):_0x2e0284['push'](_0x3ed974[_0x42c7a7(0xbf1)]()));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData['name'],_0x3ffb9d(0xb1c),_0x3859d9=>{const _0x20d36b=_0x3ffb9d;if(!SceneManager[_0x20d36b(0x341)]())return;VisuMZ[_0x20d36b(0xb83)](_0x3859d9,_0x3859d9);const _0x2444d5=$gameTemp[_0x20d36b(0x292)](),_0x137599=_0x3859d9['JumpToLabel'];if(!_0x2444d5)return;BattleManager[_0x20d36b(0x7b2)]++,BattleManager['_target']=BattleManager[_0x20d36b(0x4ff)][BattleManager[_0x20d36b(0x7b2)]]||null,BattleManager['_target']&&_0x137599['toUpperCase']()[_0x20d36b(0x33a)]()!==_0x20d36b(0x5cc)&&(_0x20d36b(0x410)!=='iiEEM'?_0x2444d5[_0x20d36b(0x8ce)]([_0x137599]):_0x407cc7[_0x20d36b(0x436)]()[_0x20d36b(0x99f)]?this['push'](_0x20d36b(0x96f),_0x4f01ef):this['push'](_0x20d36b(0x2a2),_0x213a78));}),PluginManager['registerCommand'](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x3d0),_0x5cc941=>{const _0x3e2169=_0x3ffb9d;if(!SceneManager[_0x3e2169(0x341)]())return;VisuMZ[_0x3e2169(0xb83)](_0x5cc941,_0x5cc941);const _0x2326f2=$gameTemp[_0x3e2169(0x292)](),_0x235211=_0x5cc941[_0x3e2169(0x4c4)];if(!_0x2326f2)return;BattleManager[_0x3e2169(0x7b2)]--,BattleManager['_target']=BattleManager['_allTargets'][BattleManager[_0x3e2169(0x7b2)]]||null;if(BattleManager['_target']&&_0x235211['toUpperCase']()[_0x3e2169(0x33a)]()!==_0x3e2169(0x5cc)){if(_0x3e2169(0x9ef)!=='ZmzcB'){const _0x29fbf6=_0xaa7a57[_0x2d0661];if(!_0x29fbf6)return![];if(_0x29fbf6[_0x3e2169(0x728)][_0x3e2169(0x205)]<=0x1)return![];return!![];}else _0x2326f2[_0x3e2169(0x8ce)]([_0x235211]);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x681),_0x42cb51=>{const _0x367244=_0x3ffb9d;if(!SceneManager[_0x367244(0x341)]())return;VisuMZ[_0x367244(0xb83)](_0x42cb51,_0x42cb51);const _0x51d238=$gameTemp[_0x367244(0x292)](),_0x17dc52=_0x42cb51['ForceRandom'],_0x2b2cbb=_0x42cb51['JumpToLabel'];if(!_0x51d238)return;const _0x154f7d=BattleManager[_0x367244(0x7b2)];for(;;){BattleManager['_targetIndex']=Math['randomInt'](BattleManager[_0x367244(0x4ff)][_0x367244(0x205)]);if(!_0x17dc52)break;if(BattleManager[_0x367244(0x7b2)]!==_0x154f7d)break;if(BattleManager[_0x367244(0x4ff)][_0x367244(0x205)]<=0x1){BattleManager['_targetIndex']=0x0;break;}}BattleManager[_0x367244(0x6e0)]=BattleManager['_allTargets'][BattleManager[_0x367244(0x7b2)]]||null,BattleManager[_0x367244(0x6e0)]&&_0x2b2cbb[_0x367244(0x614)]()[_0x367244(0x33a)]()!==_0x367244(0x5cc)&&_0x51d238[_0x367244(0x8ce)]([_0x2b2cbb]);}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Weapon_ClearActiveWeapon',_0x25b532=>{const _0xafb0ab=_0x3ffb9d;if(!SceneManager[_0xafb0ab(0x341)]())return;VisuMZ[_0xafb0ab(0xb83)](_0x25b532,_0x25b532);const _0x1e6c20=VisuMZ['CreateActionSequenceTargets'](_0x25b532[_0xafb0ab(0x692)]);for(const _0x4778cf of _0x1e6c20){if('EHpiF'==='EHpiF'){if(!_0x4778cf)continue;if(!_0x4778cf['isActor']())continue;_0x4778cf[_0xafb0ab(0x73f)]();}else this[_0xafb0ab(0x3ce)]['setHelpWindow'](this[_0xafb0ab(0x7c5)]),this[_0xafb0ab(0x222)][_0xafb0ab(0x1d8)](this['_helpWindow']);}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x926),_0xcede6e=>{const _0x5e8ccb=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;VisuMZ[_0x5e8ccb(0xb83)](_0xcede6e,_0xcede6e);const _0x1d8d55=$gameTemp['getLastPluginCommandInterpreter']();let _0x1584f6=![];const _0x303e3c=_0xcede6e[_0x5e8ccb(0x4c4)],_0x42b2f5=VisuMZ[_0x5e8ccb(0xb89)](_0xcede6e['Targets']);for(const _0xb47503 of _0x42b2f5){if(!_0xb47503)continue;if(!_0xb47503['isActor']())continue;_0xb47503['nextActiveWeaponSlot'](),_0xb47503[_0x5e8ccb(0xa0d)]()[_0x5e8ccb(0x205)]>0x0?_0x1584f6=!![]:_0x5e8ccb(0x5cd)!==_0x5e8ccb(0x5cd)?(_0x5ea94f[_0x5e8ccb(0x436)]()[_0x5e8ccb(0xa10)]>0x0&&!_0x3ff398[_0x5e8ccb(0x436)]()['drain']&&this['push'](_0x5e8ccb(0x887),_0x1e923b),_0x1dc111['result']()[_0x5e8ccb(0xa10)]<0x0&&this[_0x5e8ccb(0x7dd)](_0x5e8ccb(0x2ed),_0x5e58d7),_0x4b3512[_0x5e8ccb(0x80e)][_0x5e8ccb(0x901)]['BattleLog'][_0x5e8ccb(0x255)]&&this[_0x5e8ccb(0x7dd)](_0x5e8ccb(0x7dc),this[_0x5e8ccb(0x542)](_0x5b3882))):_0xb47503[_0x5e8ccb(0x73f)]();}_0x1584f6&&_0x303e3c[_0x5e8ccb(0x614)]()[_0x5e8ccb(0x33a)]()!=='UNTITLED'&&(_0x5e8ccb(0x9d8)===_0x5e8ccb(0x9d8)?_0x1d8d55[_0x5e8ccb(0x8ce)]([_0x303e3c]):_0x3fc5fa[_0x5e8ccb(0x7dd)](_0x1533fe(_0x23d44f['$1'])));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x6fa),_0x5245a4=>{const _0x24e18f=_0x3ffb9d;if(!SceneManager[_0x24e18f(0x341)]())return;VisuMZ['ConvertParams'](_0x5245a4,_0x5245a4);let _0x581958=_0x5245a4[_0x24e18f(0x594)];_0x581958--,_0x581958=Math['max'](_0x581958,0x0);const _0x322eb5=VisuMZ[_0x24e18f(0xb89)](_0x5245a4[_0x24e18f(0x692)]);for(const _0x4dd243 of _0x322eb5){if(_0x24e18f(0x844)!=='PFawK'){if(!_0x4dd243)continue;if(!_0x4dd243['isActor']())continue;_0x4dd243[_0x24e18f(0x7d1)](_0x581958);}else{const _0x1a76f9=this[_0x24e18f(0x491)]();_0x1a76f9&&_0x1a76f9[_0x24e18f(0x1b8)]();}}}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],'ActSeq_Zoom_Scale',_0x3cf0d5=>{const _0x585a14=_0x3ffb9d;if(!SceneManager[_0x585a14(0x341)]())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x585a14(0xb83)](_0x3cf0d5,_0x3cf0d5);const _0x1d2043=$gameTemp[_0x585a14(0x292)](),_0x5649ee=_0x3cf0d5[_0x585a14(0x4e9)];if(!_0x1d2043)return;$gameScreen['setBattleZoom'](_0x3cf0d5['Scale'],_0x3cf0d5[_0x585a14(0x20d)],_0x3cf0d5['EasingType']);if(_0x5649ee)_0x1d2043[_0x585a14(0x27b)](_0x585a14(0x872));}),PluginManager['registerCommand'](pluginData['name'],_0x3ffb9d(0x915),_0x4234db=>{const _0x4f07bd=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!Imported['VisuMZ_3_ActSeqCamera'])return;VisuMZ[_0x4f07bd(0xb83)](_0x4234db,_0x4234db);const _0xc61090=$gameTemp[_0x4f07bd(0x292)](),_0x960c01=_0x4234db[_0x4f07bd(0x4e9)];if(!_0xc61090)return;$gameScreen['setBattleZoom'](0x1,_0x4234db['Duration'],_0x4234db['EasingType']);if(_0x960c01)_0xc61090[_0x4f07bd(0x27b)](_0x4f07bd(0x872));}),PluginManager[_0x3ffb9d(0x4b2)](pluginData[_0x3ffb9d(0x453)],_0x3ffb9d(0x8a6),_0x5eaaac=>{const _0x1e8899=_0x3ffb9d;if(!SceneManager[_0x1e8899(0x341)]())return;if(!Imported[_0x1e8899(0x8ba)])return;const _0x10f157=$gameTemp[_0x1e8899(0x292)]();if(!_0x10f157)return;_0x10f157[_0x1e8899(0x27b)]('battleZoom');}),VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x631)]=Scene_Boot['prototype'][_0x3ffb9d(0x307)],Scene_Boot[_0x3ffb9d(0xb66)][_0x3ffb9d(0x307)]=function(){const _0x11a7cb=_0x3ffb9d;this[_0x11a7cb(0x781)](),this[_0x11a7cb(0x84e)](),this[_0x11a7cb(0x3af)](),this[_0x11a7cb(0x99e)](),VisuMZ[_0x11a7cb(0x80e)][_0x11a7cb(0x631)]['call'](this),this[_0x11a7cb(0x7a1)](),this[_0x11a7cb(0x699)](),this[_0x11a7cb(0x9d0)](),this[_0x11a7cb(0x795)]();},Scene_Boot['prototype']['process_VisuMZ_BattleCore_Notetags']=function(){const _0x2f2868=_0x3ffb9d;if(VisuMZ[_0x2f2868(0x6b3)])return;this['process_VisuMZ_BattleCore_Action_Notetags'](),this[_0x2f2868(0x35e)](),this[_0x2f2868(0x8cf)]();},Scene_Boot[_0x3ffb9d(0xb66)]['process_VisuMZ_BattleCore_Failsafes']=function(){const _0x2fea72=_0x3ffb9d,_0x185ef1=$dataSystem[_0x2fea72(0x1db)]['length'];for(let _0x5b48bf=0x0;_0x5b48bf<_0x185ef1;_0x5b48bf++){const _0x1deee6=$dataSystem['attackMotions'][_0x5b48bf];if(_0x1deee6)continue;$dataSystem['attackMotions'][_0x5b48bf]=JsonEx['makeDeepCopy']($dataSystem['attackMotions'][0x0]);}},Scene_Boot['prototype'][_0x3ffb9d(0x84e)]=function(){const _0x586ff4=_0x3ffb9d,_0x4e4c34=VisuMZ[_0x586ff4(0x80e)][_0x586ff4(0x901)];_0x4e4c34[_0x586ff4(0xa45)][_0x586ff4(0x3bd)]===undefined&&(_0x4e4c34[_0x586ff4(0xa45)][_0x586ff4(0x3bd)]=_0x586ff4(0x689)),_0x4e4c34[_0x586ff4(0x772)][_0x586ff4(0x27e)]===undefined&&(_0x4e4c34[_0x586ff4(0x772)][_0x586ff4(0x27e)]=![]),_0x4e4c34[_0x586ff4(0x5e5)][_0x586ff4(0x27e)]===undefined&&(_0x4e4c34[_0x586ff4(0x5e5)]['SmoothImage']=!![]),_0x4e4c34['Actor']['PrioritySortActive']===undefined&&(_0x4e4c34[_0x586ff4(0x772)][_0x586ff4(0xac1)]=![]),_0x4e4c34[_0x586ff4(0x772)][_0x586ff4(0x978)]===undefined&&(_0x4e4c34[_0x586ff4(0x772)][_0x586ff4(0x978)]=!![]);},VisuMZ[_0x3ffb9d(0xbc8)]={},Scene_Boot['prototype'][_0x3ffb9d(0x3af)]=function(){const _0x56c6cb=_0x3ffb9d;for(const _0x5bd56d of VisuMZ['BattleCore'][_0x56c6cb(0x901)][_0x56c6cb(0xa45)]['DamageStyleList']){if(!_0x5bd56d)continue;const _0x2a5975=_0x5bd56d[_0x56c6cb(0xa97)][_0x56c6cb(0x614)]()['trim']();VisuMZ[_0x56c6cb(0xbc8)][_0x2a5975]=_0x5bd56d;}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xbd2)]={},Scene_Boot['prototype'][_0x3ffb9d(0x99e)]=function(){const _0x39c950=_0x3ffb9d,_0x1076e9=VisuMZ[_0x39c950(0x80e)]['RegExp'],_0x33e8e9=_0x39c950(0x29c),_0x107613=[['Pre',_0x39c950(0x726)],[_0x39c950(0xbac),_0x39c950(0x8c2)]],_0x28c5fc=[['%1Apply%2JS','JS\x20%1APPLY\x20%2'],[_0x39c950(0x454),_0x39c950(0x8eb)]],_0x38a3eb=[['',''],[_0x39c950(0x3ee),_0x39c950(0x6f3)],[_0x39c950(0x3ae),_0x39c950(0x1fb)]];for(const _0x389d8a of _0x28c5fc){for(const _0x4536ab of _0x38a3eb){for(const _0x2386bc of _0x107613){if('ypvQc'!=='ypvQc'){if(!_0x4dae5b[_0x39c950(0x80e)]['JS'][_0x329844][_0x39c950(0x73d)](this,this[_0x39c950(0x4c8)],_0x875fad))return![];}else{const _0x41d69f=_0x389d8a[0x0][_0x39c950(0x4a7)](_0x2386bc[0x0],_0x4536ab[0x0]),_0x574244=_0x389d8a[0x1][_0x39c950(0x4a7)](_0x2386bc[0x1],_0x4536ab[0x1])[_0x39c950(0x33a)](),_0xe6df6b=new RegExp(_0x33e8e9[_0x39c950(0x4a7)](_0x574244),'i');_0x1076e9[_0x41d69f]=_0xe6df6b;}}}}const _0x1fe9c0=[[_0x39c950(0x7a6),_0x39c950(0x8a7)],[_0x39c950(0x4dc),_0x39c950(0xb63)]];for(const _0x59895f of _0x1fe9c0){for(const _0x42c185 of _0x107613){if('cJKuw'==='Hyzgo')return _0x4288c4[_0x39c950(0xae9)](_0x3b56ba=>_0x3b56ba[_0x39c950(0x3ad)]());else{const _0x1271fc=_0x59895f[0x0][_0x39c950(0x4a7)](_0x42c185[0x0]),_0x31dbd0=_0x59895f[0x1]['format'](_0x42c185[0x1]),_0x21a84e=new RegExp(_0x33e8e9[_0x39c950(0x4a7)](_0x31dbd0),'i');_0x1076e9[_0x1271fc]=_0x21a84e;}}}const _0x120907=[['%1StartBattleJS',_0x39c950(0x909)],[_0x39c950(0x995),_0x39c950(0x9e4)],[_0x39c950(0x5bb),_0x39c950(0x4a0)],[_0x39c950(0x29a),'JS\x20BATTLE\x20DEFEAT'],[_0x39c950(0x588),'JS\x20ESCAPE\x20SUCCESS'],[_0x39c950(0xac7),_0x39c950(0x4be)],[_0x39c950(0x707),_0x39c950(0x93e)],[_0x39c950(0xb38),'JS\x20%1END\x20TURN'],['%1RegenerateJS',_0x39c950(0xb73)]];for(const _0x5cf30b of _0x120907){for(const _0x528857 of _0x107613){const _0x5ad5c6=_0x5cf30b[0x0][_0x39c950(0x4a7)](_0x528857[0x0]),_0x14740a=_0x5cf30b[0x1][_0x39c950(0x4a7)](_0x528857[0x1]),_0x27e9fc=new RegExp(_0x33e8e9['format'](_0x14740a),'i');_0x1076e9[_0x5ad5c6]=_0x27e9fc;}}},Scene_Boot[_0x3ffb9d(0xb66)][_0x3ffb9d(0x55f)]=function(){const _0x102c5c=_0x3ffb9d,_0x4674eb=$dataSkills['concat']($dataItems);for(const _0x494d9b of _0x4674eb){if(_0x102c5c(0x950)!=='cYfcx'){if(!_0x494d9b)continue;VisuMZ[_0x102c5c(0x80e)][_0x102c5c(0x59e)](_0x494d9b);}else{const _0x52de47=new _0xa519af(_0x4cd523);this[_0x102c5c(0x210)][_0x102c5c(0x237)](_0x52de47);}}},Scene_Boot[_0x3ffb9d(0xb66)][_0x3ffb9d(0x35e)]=function(){const _0x4f939d=_0x3ffb9d,_0x42c059=$dataActors[_0x4f939d(0x416)]($dataClasses,$dataWeapons,$dataArmors,$dataEnemies,$dataStates);for(const _0x44d020 of _0x42c059){if(!_0x44d020)continue;VisuMZ[_0x4f939d(0x80e)][_0x4f939d(0x846)](_0x44d020);}},Scene_Boot[_0x3ffb9d(0xb66)]['process_VisuMZ_BattleCore_BaseTroops']=function(){const _0x4c803d=_0x3ffb9d,_0x3e01e7=VisuMZ[_0x4c803d(0x80e)][_0x4c803d(0x901)]['Mechanics'][_0x4c803d(0x3f2)],_0x24d2b9=[];for(const _0x56e3bf of _0x3e01e7){if('GfocL'!==_0x4c803d(0x4bf)){const _0x4bf3e0=$dataTroops[_0x56e3bf];if(_0x4bf3e0)_0x24d2b9[_0x4c803d(0x7dd)](JsonEx[_0x4c803d(0x965)](_0x4bf3e0));}else _0x1165fe+=_0x2fb4e9,_0x10a5df+=_0x46abcc;}for(const _0x255e83 of $dataTroops){if('voYQy'!==_0x4c803d(0x37c))return this[_0x4c803d(0x89e)]();else{if(!_0x255e83)continue;for(const _0x53e02e of _0x24d2b9){if(_0x53e02e['id']===_0x255e83['id'])continue;_0x255e83['pages']=_0x255e83[_0x4c803d(0x3da)][_0x4c803d(0x416)](_0x53e02e[_0x4c803d(0x3da)]);}}}},Scene_Boot[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9d0)]=function(){const _0x2fc9ff=_0x3ffb9d,_0x5d3e80=VisuMZ[_0x2fc9ff(0x80e)][_0x2fc9ff(0x901)][_0x2fc9ff(0xbd3)];if(_0x5d3e80[_0x2fc9ff(0x1c3)]>0x0&&$dataCommonEvents[_0x5d3e80[_0x2fc9ff(0x1c3)]]){const _0x1fc509=$dataCommonEvents[_0x5d3e80['BattleStartEvent']],_0x13d868=_0x1fc509[_0x2fc9ff(0x728)]['length']-0x2,_0x5c7aee=_0x1fc509[_0x2fc9ff(0x728)][_0x13d868];if(_0x5c7aee&&_0x5c7aee[_0x2fc9ff(0x77c)]!==0xe6){const _0x229523={'code':0xe6,'indent':0x0,'parameters':[0x1]},_0x5d96ea=_0x1fc509[_0x2fc9ff(0x728)][_0x2fc9ff(0x424)]();_0x1fc509[_0x2fc9ff(0x728)][_0x2fc9ff(0x384)](_0x229523),_0x1fc509[_0x2fc9ff(0x728)][_0x2fc9ff(0x384)](_0x5d96ea);}}},Scene_Boot['prototype']['process_VisuMZ_BattleCore_CommonEventKeys']=function(){const _0x4c9002=_0x3ffb9d;VisuMZ[_0x4c9002(0x80e)]['CreateCommonEventKeys'](),VisuMZ[_0x4c9002(0x80e)]['BindCommonEventKeysForGroup']($dataSkills),VisuMZ[_0x4c9002(0x80e)][_0x4c9002(0x783)]($dataItems);},VisuMZ['BattleCore'][_0x3ffb9d(0x4f2)]=function(){const _0x118a8f=_0x3ffb9d;VisuMZ[_0x118a8f(0x80e)]['_commonEventKey']={};for(const _0x43d586 of $dataCommonEvents){if(_0x118a8f(0xb1b)===_0x118a8f(0xac3))_0x8d4948[_0x118a8f(0x6a0)]=_0x5afe3e;else{if(!_0x43d586)continue;if(_0x43d586['name'][_0x118a8f(0x1b7)](/\[(.*)\]/i)){let _0x39ff4c=String(RegExp['$1'])[_0x118a8f(0x515)](/,/g,'')[_0x118a8f(0x614)]()[_0x118a8f(0x33a)]();VisuMZ[_0x118a8f(0x80e)][_0x118a8f(0x9bf)][_0x39ff4c]=_0x43d586['id'];}}}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x783)]=function(_0x65f36b){const _0x561eba=_0x3ffb9d;for(const _0x488293 of _0x65f36b){if(!_0x488293)continue;VisuMZ[_0x561eba(0x80e)][_0x561eba(0x8ea)](_0x488293);}},VisuMZ[_0x3ffb9d(0x80e)]['BindCommonEventKeysForObj']=function(_0x5ababc){const _0x4cfb6a=_0x3ffb9d;if(!_0x5ababc)return;if(!_0x5ababc[_0x4cfb6a(0x466)])return;VisuMZ['BattleCore'][_0x4cfb6a(0x9bf)]=VisuMZ[_0x4cfb6a(0x80e)]['_commonEventKey']||{};const _0x444788=/<COMMON EVENT (?:KEY|KEYS):[ ](.*)>/gi,_0x72d358=/<COMMON EVENT (?:KEY|KEYS)>\s*([\s\S]*)\s*<\/COMMON EVENT (?:KEY|KEYS)>/i;let _0x246569=[];const _0x5e9b4b=_0x5ababc[_0x4cfb6a(0x365)]['match'](_0x444788);if(_0x5e9b4b){for(const _0x5a378f of _0x5e9b4b){_0x5a378f['match'](_0x444788);const _0x5ad0d7=String(RegExp['$1'])[_0x4cfb6a(0x83d)](',')[_0x4cfb6a(0x2e9)](_0x5a8203=>String(_0x5a8203)[_0x4cfb6a(0x614)]()['trim']());_0x246569=_0x246569[_0x4cfb6a(0x416)](_0x5ad0d7);}!_0x5ababc[_0x4cfb6a(0x365)][_0x4cfb6a(0x1b7)](/<CUSTOM ACTION SEQUENCE>/i)&&('dYQnB'!=='dYQnB'?(_0xcb5803[_0x4cfb6a(0xb66)][_0x4cfb6a(0x1e3)][_0x4cfb6a(0x73d)](this),this[_0x4cfb6a(0x85e)](),this[_0x4cfb6a(0x4c6)]()):_0x5ababc[_0x4cfb6a(0x365)]+='<CUSTOM\x20ACTION\x20SEQUENCE>');;}if(_0x5ababc[_0x4cfb6a(0x365)][_0x4cfb6a(0x1b7)](_0x72d358)){const _0x5a8f11=String(RegExp['$1'])[_0x4cfb6a(0x83d)](/[\r\n]+/)[_0x4cfb6a(0x2e9)](_0x527591=>String(_0x527591)[_0x4cfb6a(0x614)]()[_0x4cfb6a(0x33a)]());_0x246569=_0x246569[_0x4cfb6a(0x416)](_0x5a8f11);!_0x5ababc['note'][_0x4cfb6a(0x1b7)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x5ababc[_0x4cfb6a(0x365)]+=_0x4cfb6a(0x433));;}for(const _0x4d3661 of _0x246569){if(_0x4cfb6a(0xbc1)===_0x4cfb6a(0xbc1)){if(VisuMZ[_0x4cfb6a(0x80e)][_0x4cfb6a(0x9bf)][_0x4d3661]){if('uypMz'!==_0x4cfb6a(0xa12)){const _0x38e0f0=VisuMZ[_0x4cfb6a(0x80e)]['_commonEventKey'][_0x4d3661],_0x322acf={'code':0x2c,'dataId':_0x38e0f0,'value1':0x1,'value2':0x0};_0x5ababc[_0x4cfb6a(0x466)]['push'](_0x322acf);}else{this[_0x4cfb6a(0x83a)]=_0x280720['MOTIONS'][_0x4cfb6a(0x268)];return;}}}else _0x5dfbfc[_0x4cfb6a(0x80e)]['Window_BattleLog_performEvasion']['call'](this,_0x1f450d),this[_0x4cfb6a(0x8d7)]();}},Scene_Boot[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8cf)]=function(){const _0x898bd8=_0x3ffb9d,_0x5a6e29=$dataSkills[_0x898bd8(0x416)]($dataItems);for(const _0x529175 of _0x5a6e29){if(!_0x529175)continue;VisuMZ[_0x898bd8(0x80e)]['Parse_Notetags_Targets'](_0x529175);}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x731)]=VisuMZ[_0x3ffb9d(0x731)],VisuMZ[_0x3ffb9d(0x731)]=function(_0x2dc153){const _0x4a37cd=_0x3ffb9d;VisuMZ['BattleCore']['ParseActorNotetags']&&VisuMZ['BattleCore'][_0x4a37cd(0x731)]['call'](this,_0x2dc153),VisuMZ[_0x4a37cd(0x80e)]['Parse_Notetags_TraitObjects'](_0x2dc153);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2f7)]=VisuMZ[_0x3ffb9d(0x2f7)],VisuMZ[_0x3ffb9d(0x2f7)]=function(_0x3a5d76){const _0x301fe5=_0x3ffb9d;if(VisuMZ[_0x301fe5(0x80e)]['ParseClassNotetags']){if(_0x301fe5(0x3de)!==_0x301fe5(0x2a3))VisuMZ[_0x301fe5(0x80e)][_0x301fe5(0x2f7)]['call'](this,_0x3a5d76);else return;}VisuMZ[_0x301fe5(0x80e)][_0x301fe5(0x846)](_0x3a5d76);},VisuMZ[_0x3ffb9d(0x80e)]['ParseSkillNotetags']=VisuMZ[_0x3ffb9d(0x78f)],VisuMZ[_0x3ffb9d(0x78f)]=function(_0x4e95f9){const _0x3bdb43=_0x3ffb9d;VisuMZ[_0x3bdb43(0x80e)][_0x3bdb43(0x78f)]&&VisuMZ[_0x3bdb43(0x80e)][_0x3bdb43(0x78f)]['call'](this,_0x4e95f9),VisuMZ[_0x3bdb43(0x80e)][_0x3bdb43(0x59e)](_0x4e95f9),VisuMZ[_0x3bdb43(0x80e)][_0x3bdb43(0x908)](_0x4e95f9);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x40d)]=VisuMZ[_0x3ffb9d(0x40d)],VisuMZ['ParseItemNotetags']=function(_0x70dba9){const _0x210a2c=_0x3ffb9d;VisuMZ['BattleCore'][_0x210a2c(0x40d)]&&VisuMZ[_0x210a2c(0x80e)]['ParseItemNotetags'][_0x210a2c(0x73d)](this,_0x70dba9),VisuMZ[_0x210a2c(0x80e)]['Parse_Notetags_Action'](_0x70dba9),VisuMZ['BattleCore'][_0x210a2c(0x908)](_0x70dba9);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x952)]=VisuMZ[_0x3ffb9d(0x952)],VisuMZ[_0x3ffb9d(0x952)]=function(_0x28843c){const _0x469263=_0x3ffb9d;VisuMZ[_0x469263(0x80e)]['ParseWeaponNotetags']&&VisuMZ['BattleCore']['ParseWeaponNotetags'][_0x469263(0x73d)](this,_0x28843c),VisuMZ[_0x469263(0x80e)][_0x469263(0x846)](_0x28843c);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x98c)]=VisuMZ[_0x3ffb9d(0x98c)],VisuMZ[_0x3ffb9d(0x98c)]=function(_0x130a0b){const _0x21d22c=_0x3ffb9d;VisuMZ[_0x21d22c(0x80e)]['ParseArmorNotetags']&&(_0x21d22c(0x2a8)!==_0x21d22c(0x3e7)?VisuMZ[_0x21d22c(0x80e)]['ParseArmorNotetags'][_0x21d22c(0x73d)](this,_0x130a0b):(_0x3197c2['BattleCore']['Game_BattlerBase_die'][_0x21d22c(0x73d)](this),_0x209840[_0x21d22c(0x341)]()&&this[_0x21d22c(0x42c)](_0x21d22c(0x268)))),VisuMZ[_0x21d22c(0x80e)]['Parse_Notetags_TraitObjects'](_0x130a0b);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xa67)]=VisuMZ['ParseEnemyNotetags'],VisuMZ[_0x3ffb9d(0xa67)]=function(_0x2810a6){const _0xa56c71=_0x3ffb9d;VisuMZ[_0xa56c71(0x80e)][_0xa56c71(0xa67)]&&VisuMZ[_0xa56c71(0x80e)][_0xa56c71(0xa67)]['call'](this,_0x2810a6),VisuMZ[_0xa56c71(0x80e)][_0xa56c71(0x846)](_0x2810a6);},VisuMZ['BattleCore'][_0x3ffb9d(0x77a)]=VisuMZ[_0x3ffb9d(0x77a)],VisuMZ[_0x3ffb9d(0x77a)]=function(_0x5461d5){const _0x2b340c=_0x3ffb9d;VisuMZ[_0x2b340c(0x80e)][_0x2b340c(0x77a)]&&VisuMZ[_0x2b340c(0x80e)][_0x2b340c(0x77a)][_0x2b340c(0x73d)](this,_0x5461d5),VisuMZ[_0x2b340c(0x80e)][_0x2b340c(0x846)](_0x5461d5);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x59e)]=function(_0x4466fd){const _0x6c0977=_0x3ffb9d,_0x308591=['PreApplyJS','PostApplyJS',_0x6c0977(0x4b7),_0x6c0977(0x620),'PreStartActionJS','PostStartActionJS','PreEndActionJS','PostEndActionJS'];for(const _0x51c758 of _0x308591){VisuMZ[_0x6c0977(0x80e)][_0x6c0977(0x484)](_0x4466fd,_0x51c758);}const _0x2803cd=_0x4466fd[_0x6c0977(0x365)];_0x2803cd[_0x6c0977(0x1b7)](/<ALWAYS CRITICAL/i)&&(_0x4466fd[_0x6c0977(0xbfc)]['critical']=!![]),_0x2803cd[_0x6c0977(0x1b7)](/<(?:REPEAT|REPEATS|REPEAT HITS):[ ](\d+)/i)&&(_0x4466fd[_0x6c0977(0x315)]=Math['max'](0x1,Number(RegExp['$1']))),_0x2803cd[_0x6c0977(0x1b7)](/<TARGET:[ ](.*)>/i)&&(_0x4466fd['scope']=String(RegExp['$1'])[_0x6c0977(0x614)]()[_0x6c0977(0x33a)]());},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x846)]=function(_0x2ae035){const _0x51e41a=_0x3ffb9d,_0x31db4a=[_0x51e41a(0x708),_0x51e41a(0xabd),_0x51e41a(0x924),_0x51e41a(0x8de),_0x51e41a(0x763),_0x51e41a(0x95c),_0x51e41a(0x95a),_0x51e41a(0xa1d),_0x51e41a(0xa0a),_0x51e41a(0x20f),_0x51e41a(0x472),'PostEndActionJS',_0x51e41a(0x6c6),_0x51e41a(0x6e5),_0x51e41a(0xb04),_0x51e41a(0x538),_0x51e41a(0x5bb),_0x51e41a(0x29a),_0x51e41a(0x588),_0x51e41a(0xac7),'PreStartTurnJS',_0x51e41a(0x269),_0x51e41a(0x842),_0x51e41a(0x958),_0x51e41a(0x8cd),'PostRegenerateJS'];for(const _0x40c0ed of _0x31db4a){VisuMZ['BattleCore'][_0x51e41a(0x484)](_0x2ae035,_0x40c0ed);}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x908)]=function(_0x20fed8){const _0x1710d0=_0x3ffb9d,_0x21b7ef=_0x20fed8[_0x1710d0(0x365)];if(_0x21b7ef[_0x1710d0(0x1b7)](/<JS TARGETS>\s*([\s\S]*)\s*<\/JS TARGETS>/i)){const _0x54b48d=String(RegExp['$1']),_0x298f5c=VisuMZ[_0x1710d0(0x80e)]['createKeyJS'](_0x20fed8,_0x1710d0(0x692));VisuMZ[_0x1710d0(0x80e)][_0x1710d0(0x24d)](_0x54b48d,_0x298f5c);}if(_0x21b7ef['match'](/<JS COMMAND (?:VISIBLE|SHOW|HIDE)>\s*([\s\S]*)\s*<\/JS COMMAND (?:VISIBLE|SHOW|HIDE)>/i)){const _0x46537a=String(RegExp['$1']),_0x42a210=VisuMZ['BattleCore']['createKeyJS'](_0x20fed8,_0x1710d0(0x9d7));VisuMZ[_0x1710d0(0x80e)][_0x1710d0(0x1c8)](_0x46537a,_0x42a210);}},VisuMZ['BattleCore']['JS']={},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x484)]=function(_0x4c0600,_0x48011b){const _0x44e62c=_0x3ffb9d,_0x479c49=_0x4c0600[_0x44e62c(0x365)];if(_0x479c49[_0x44e62c(0x1b7)](VisuMZ['BattleCore']['RegExp'][_0x48011b])){const _0x176fff=RegExp['$1'],_0x2a86b8=_0x44e62c(0x36e)[_0x44e62c(0x4a7)](_0x176fff),_0x23003b=VisuMZ[_0x44e62c(0x80e)][_0x44e62c(0xb88)](_0x4c0600,_0x48011b);VisuMZ[_0x44e62c(0x80e)]['JS'][_0x23003b]=new Function(_0x2a86b8);}},VisuMZ['BattleCore'][_0x3ffb9d(0xb88)]=function(_0x3dc9b7,_0x297fea){const _0x40ea5f=_0x3ffb9d;let _0x5ee2d5='';if($dataActors[_0x40ea5f(0x802)](_0x3dc9b7))_0x5ee2d5=_0x40ea5f(0x626)['format'](_0x3dc9b7['id'],_0x297fea);if($dataClasses[_0x40ea5f(0x802)](_0x3dc9b7))_0x5ee2d5='Class-%1-%2'[_0x40ea5f(0x4a7)](_0x3dc9b7['id'],_0x297fea);if($dataSkills[_0x40ea5f(0x802)](_0x3dc9b7))_0x5ee2d5=_0x40ea5f(0x711)[_0x40ea5f(0x4a7)](_0x3dc9b7['id'],_0x297fea);if($dataItems['includes'](_0x3dc9b7))_0x5ee2d5=_0x40ea5f(0x953)['format'](_0x3dc9b7['id'],_0x297fea);if($dataWeapons['includes'](_0x3dc9b7))_0x5ee2d5='Weapon-%1-%2'[_0x40ea5f(0x4a7)](_0x3dc9b7['id'],_0x297fea);if($dataArmors['includes'](_0x3dc9b7))_0x5ee2d5='Armor-%1-%2'[_0x40ea5f(0x4a7)](_0x3dc9b7['id'],_0x297fea);if($dataEnemies['includes'](_0x3dc9b7))_0x5ee2d5='Enemy-%1-%2'[_0x40ea5f(0x4a7)](_0x3dc9b7['id'],_0x297fea);if($dataStates['includes'](_0x3dc9b7))_0x5ee2d5=_0x40ea5f(0x552)[_0x40ea5f(0x4a7)](_0x3dc9b7['id'],_0x297fea);return _0x5ee2d5;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x24d)]=function(_0x5bb31c,_0x2db7e1){const _0x3ace39=_0x3ffb9d,_0x273d9c='\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20targets\x20=\x20arguments[1];\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20targets\x20||\x20[];\x0a\x20\x20\x20\x20'[_0x3ace39(0x4a7)](_0x5bb31c);VisuMZ['BattleCore']['JS'][_0x2db7e1]=new Function(_0x273d9c);},VisuMZ['BattleCore'][_0x3ffb9d(0x1c8)]=function(_0x55b85e,_0x48d116){const _0x5d0d20=_0x3ffb9d,_0x2d0733=_0x5d0d20(0x824)[_0x5d0d20(0x4a7)](_0x55b85e);VisuMZ['BattleCore']['JS'][_0x48d116]=new Function(_0x2d0733);},TextManager[_0x3ffb9d(0x1e8)]=VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x901)]['PartyCmd']['CmdTextAutoBattle'],TextManager[_0x3ffb9d(0x20a)]=VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x901)][_0x3ffb9d(0x49f)][_0x3ffb9d(0xc33)],TextManager[_0x3ffb9d(0xadf)]=VisuMZ[_0x3ffb9d(0x80e)]['Settings']['AutoBattle'][_0x3ffb9d(0x903)],TextManager[_0x3ffb9d(0x585)]=VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x901)][_0x3ffb9d(0x6d3)][_0x3ffb9d(0xa97)],ColorManager[_0x3ffb9d(0xb9b)]=function(_0x3468f3){const _0x487e10=_0x3ffb9d;return _0x3468f3=String(_0x3468f3),_0x3468f3[_0x487e10(0x1b7)](/#(.*)/i)?_0x487e10(0xa49)[_0x487e10(0x4a7)](String(RegExp['$1'])):this[_0x487e10(0xc17)](Number(_0x3468f3));},DataManager[_0x3ffb9d(0x690)]=function(_0x399043){const _0x36a79c=_0x3ffb9d;if(_0x399043[_0x36a79c(0x365)][_0x36a79c(0x1b7)](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x48a2cd=String(RegExp['$1'])[_0x36a79c(0x614)]()[_0x36a79c(0x33a)]();if(_0x48a2cd===_0x36a79c(0x1b3))return'MANUAL';if(VisuMZ[_0x36a79c(0xbc8)][_0x48a2cd])return _0x48a2cd;}const _0x457fbc=VisuMZ[_0x36a79c(0x80e)][_0x36a79c(0x901)][_0x36a79c(0xa45)][_0x36a79c(0x81e)][_0x36a79c(0x614)]()[_0x36a79c(0x33a)]();if(VisuMZ['DamageStyles'][_0x457fbc])return _0x457fbc;return _0x36a79c(0x1b3);},DataManager[_0x3ffb9d(0x4fb)]=function(_0x17a55b){const _0x4d94b2=_0x3ffb9d;_0x17a55b=_0x17a55b['toUpperCase']()[_0x4d94b2(0x33a)](),this[_0x4d94b2(0x333)]=this['_stypeIDs']||{};if(this[_0x4d94b2(0x333)][_0x17a55b])return this['_stypeIDs'][_0x17a55b];for(let _0xb9afff=0x1;_0xb9afff<0x64;_0xb9afff++){if(_0x4d94b2(0xa2b)!==_0x4d94b2(0x869)){if(!$dataSystem[_0x4d94b2(0xad9)][_0xb9afff])continue;let _0x51e1a0=$dataSystem[_0x4d94b2(0xad9)][_0xb9afff][_0x4d94b2(0x614)]()[_0x4d94b2(0x33a)]();_0x51e1a0=_0x51e1a0['replace'](/\x1I\[(\d+)\]/gi,''),_0x51e1a0=_0x51e1a0[_0x4d94b2(0x515)](/\\I\[(\d+)\]/gi,''),this[_0x4d94b2(0x333)][_0x51e1a0]=_0xb9afff;}else this[_0x4d94b2(0x911)]=(this[_0x4d94b2(0x911)]*(_0x146ce1-0x1)+this[_0x4d94b2(0x71f)])/_0x99cf7b;}return this['_stypeIDs'][_0x17a55b]||0x0;},DataManager[_0x3ffb9d(0x60e)]=function(_0x3556e7){const _0x20c0bb=_0x3ffb9d;_0x3556e7=_0x3556e7[_0x20c0bb(0x614)]()[_0x20c0bb(0x33a)](),this[_0x20c0bb(0x375)]=this[_0x20c0bb(0x375)]||{};if(this[_0x20c0bb(0x375)][_0x3556e7])return this[_0x20c0bb(0x375)][_0x3556e7];for(const _0x43c644 of $dataSkills){if(_0x20c0bb(0x3d8)===_0x20c0bb(0x3d8)){if(!_0x43c644)continue;this[_0x20c0bb(0x375)][_0x43c644[_0x20c0bb(0x453)]['toUpperCase']()[_0x20c0bb(0x33a)]()]=_0x43c644['id'];}else{const _0x3940c9=this[_0x20c0bb(0xa0d)]();_0x487bff=_0x3940c9[_0x4265d5]?_0x3940c9[_0x3938ba][_0x20c0bb(0xae6)]:0x0;}}return this[_0x20c0bb(0x375)][_0x3556e7]||0x0;},DataManager[_0x3ffb9d(0x82a)]=function(_0x328e9e){const _0x5e60c3=_0x3ffb9d;_0x328e9e=_0x328e9e[_0x5e60c3(0x614)]()['trim'](),this[_0x5e60c3(0x787)]=this[_0x5e60c3(0x787)]||{};if(this[_0x5e60c3(0x787)][_0x328e9e])return this['_enemyIDs'][_0x328e9e];for(const _0x7abc4b of $dataEnemies){if(!_0x7abc4b)continue;this['_enemyIDs'][_0x7abc4b[_0x5e60c3(0x453)][_0x5e60c3(0x614)]()[_0x5e60c3(0x33a)]()]=_0x7abc4b['id'];}return this[_0x5e60c3(0x787)][_0x328e9e]||0x0;},DataManager[_0x3ffb9d(0x8fb)]=function(_0xe2ba5f){const _0x430a70=_0x3ffb9d;_0xe2ba5f=_0xe2ba5f['toUpperCase']()[_0x430a70(0x33a)](),this['_wtypeIDs']=this[_0x430a70(0x5e7)]||{};if(this[_0x430a70(0x5e7)][_0xe2ba5f])return this['_wtypeIDs'][_0xe2ba5f];for(let _0x752f76=0x1;_0x752f76<0x64;_0x752f76++){if('WEwZw'==='zJWTv')this['repositionCancelButtonBorderStyle']();else{if(!$dataSystem['weaponTypes'][_0x752f76])continue;let _0x557ad9=$dataSystem[_0x430a70(0x1db)][_0x752f76][_0x430a70(0x614)]()[_0x430a70(0x33a)]();_0x557ad9=_0x557ad9[_0x430a70(0x515)](/\x1I\[(\d+)\]/gi,''),_0x557ad9=_0x557ad9[_0x430a70(0x515)](/\\I\[(\d+)\]/gi,''),this[_0x430a70(0x5e7)][_0x557ad9]=_0x752f76;}}return this[_0x430a70(0x5e7)]['BARE\x20HANDS']=0x0,this[_0x430a70(0x5e7)][_0xe2ba5f]||0x0;},DataManager['battleDisplayText']=function(_0x523044){const _0x1ddecb=_0x3ffb9d,_0x20c07b=_0x1ddecb(0x2f4);let _0x36f686=_0x523044['iconIndex'],_0x3c5800=_0x523044[_0x1ddecb(0x453)];const _0x664107=_0x523044[_0x1ddecb(0x365)];if(_0x664107['match'](/<DISPLAY ICON: (\d+)>/i)){if(_0x1ddecb(0x475)===_0x1ddecb(0x475))_0x36f686=Number(RegExp['$1']);else return[_0x10ae01];}return _0x664107['match'](/<DISPLAY TEXT: (.*)>/i)&&(_0x3c5800=String(RegExp['$1'])),_0x20c07b['format'](_0x36f686,_0x3c5800);},DataManager[_0x3ffb9d(0x44f)]=function(_0x1f8add){const _0xdec1c5=_0x3ffb9d;return _0x1f8add['note'][_0xdec1c5(0x1b7)](/<COMMAND TEXT: (.*)>/i)?_0xdec1c5(0x310)!==_0xdec1c5(0xb51)?String(RegExp['$1']):_0x4e0da6(_0x31ab8f['$1'])||0x0:_0x1f8add[_0xdec1c5(0x453)];},DataManager[_0x3ffb9d(0x23b)]=function(_0x2ee869){const _0xbe1080=_0x3ffb9d;return _0x2ee869[_0xbe1080(0x365)]['match'](/<COMMAND ICON: (\d+)>/i)?Number(RegExp['$1']):_0x2ee869[_0xbe1080(0x784)];},DataManager[_0x3ffb9d(0x657)]=function(_0x47731d){const _0x27d588=_0x3ffb9d,_0x38cb15=$dataEnemies[_0x47731d];if(_0x38cb15){if(_0x27d588(0x8b4)===_0x27d588(0x8b4)){if(_0x38cb15[_0x27d588(0x365)]['match'](/<SWAP ENEMIES>\s*([\s\S]*)\s*<\/SWAP ENEMIES>/i)){const _0x51e0ac=String(RegExp['$1'])[_0x27d588(0x83d)](/[\r\n]+/)[_0x27d588(0x7bc)](''),_0x4d9f45=this[_0x27d588(0xb80)](_0x51e0ac);_0x47731d=this[_0x27d588(0x82a)](_0x4d9f45)||_0x47731d,_0x47731d=DataManager['swapEnemyIDs'](_0x47731d);}}else this[_0x27d588(0x42c)](_0x27d588(0x33b));}return _0x47731d;},DataManager[_0x3ffb9d(0xb80)]=function(_0x3c2732){const _0x38d4ca=_0x3ffb9d;let _0x3c78f1=0x0;const _0x4f8dae={};for(const _0x25d1d3 of _0x3c2732){if(_0x25d1d3['match'](/(.*):[ ](\d+)/i)){const _0x44c921=String(RegExp['$1'])[_0x38d4ca(0x33a)](),_0x41fe7a=Number(RegExp['$2']);_0x4f8dae[_0x44c921]=_0x41fe7a,_0x3c78f1+=_0x41fe7a;}else{if(_0x25d1d3['match'](/(.*):[ ](\d+\.?\d+)/i)){if(_0x38d4ca(0x867)!=='XAFsM'){if(!_0x56dcdd[_0x38d4ca(0x341)]())return;if(!_0x1d154a['VisuMZ_3_ActSeqCamera'])return;const _0x39c70d=_0x2984ae[_0x38d4ca(0x292)]();if(!_0x39c70d)return;_0x39c70d[_0x38d4ca(0x27b)](_0x38d4ca(0xbf5));}else{const _0x49f23b=String(RegExp['$1'])[_0x38d4ca(0x33a)](),_0x26992d=Number(RegExp['$2']);_0x4f8dae[_0x49f23b]=_0x26992d,_0x3c78f1+=_0x26992d;}}else{if(_0x25d1d3!==''){if(_0x38d4ca(0xa26)!==_0x38d4ca(0xa26))return _0x1a27b3[_0x38d4ca(0x80e)][_0x38d4ca(0x901)]['Actor'][_0x38d4ca(0x27e)];else _0x4f8dae[_0x25d1d3]=0x1,_0x3c78f1++;}}}}if(_0x3c78f1<=0x0)return'';let _0x179cd5=Math[_0x38d4ca(0xbdb)]()*_0x3c78f1;for(const _0x3fb811 in _0x4f8dae){if(_0x38d4ca(0x24c)===_0x38d4ca(0x6a1)){this[_0x38d4ca(0xa8c)]=!![];const _0x38adf4=this[_0x38d4ca(0xbde)]();for(let _0x48cd6c=0x0;_0x48cd6c<_0x38adf4[_0x38d4ca(0x205)];_0x48cd6c++){_0x38adf4[_0x48cd6c]===0x1&&this[_0x38d4ca(0x7c8)]!==_0x48cd6c&&(_0x290ba0[_0x48cd6c]=null);}this[_0x38d4ca(0xa8c)]=_0x122b05;}else{_0x179cd5-=_0x4f8dae[_0x3fb811];if(_0x179cd5<=0x0)return _0x3fb811;}}return'';},DataManager[_0x3ffb9d(0x239)]=function(_0x1a9627){const _0x2b21a7=_0x3ffb9d;if(!_0x1a9627)return![];if(!VisuMZ['BattleCore'][_0x2b21a7(0x901)][_0x2b21a7(0x1aa)]['AutoNotetag'])return![];if(_0x1a9627[_0x2b21a7(0x365)][_0x2b21a7(0x1b7)](/<AUTO ACTION SEQUENCE>/i))return![];if(_0x1a9627['note']['match'](/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi))return!![];for(const _0x333be3 of _0x1a9627[_0x2b21a7(0x466)]){if(_0x2b21a7(0x82f)===_0x2b21a7(0x82f)){if(!_0x333be3)continue;if(_0x333be3[_0x2b21a7(0x77c)]===Game_Action[_0x2b21a7(0x80c)])return!![];}else{if(!_0x170313[_0x2b21a7(0x341)]())return;_0x435b7a[_0x2b21a7(0xb83)](_0x48ee9f,_0x58a1dd);const _0x37097f=_0xe8846d[_0x2b21a7(0x58b)],_0x5f15ab={'arPenRate':_0x31d4ef[_0x2b21a7(0x2b6)],'arPenFlat':_0x2b6d38['ArPenFlat'],'arRedRate':_0x3a2ca2[_0x2b21a7(0xc01)],'arRedFlat':_0x4d4925[_0x2b21a7(0x4c3)]};_0x37097f[_0x2b21a7(0xaee)]=_0x5f15ab;}}return![];},DataManager[_0x3ffb9d(0xa86)]=function(_0xe0b08a){const _0xef3cf1=_0x3ffb9d,_0x13e3ec=$dataTroops[_0xe0b08a];if(!_0x13e3ec)return'';let _0x3128dd='';_0x3128dd+=_0x13e3ec['name'];for(const _0x117da4 of _0x13e3ec[_0xef3cf1(0x3da)]){if('EWXIe'!==_0xef3cf1(0xb06))for(const _0x426884 of _0x117da4[_0xef3cf1(0x728)]){[0x6c,0x198]['includes'](_0x426884[_0xef3cf1(0x77c)])&&(_0x3128dd+='\x0a',_0x3128dd+=_0x426884[_0xef3cf1(0x32d)][0x0]);}else{const _0x4c080b=_0x4ec663[_0xef3cf1(0x6e9)]();_0x4c080b[_0xef3cf1(0xa2d)](this['_actorCommandWindow'][_0xef3cf1(0x5e9)]()),this[_0xef3cf1(0x56c)]();}}return _0x3128dd;},ConfigManager[_0x3ffb9d(0x9c2)]=ConfigManager[_0x3ffb9d(0x9c2)]??![],ConfigManager[_0x3ffb9d(0xb59)]=ConfigManager['autoBattleUseSkills']??![],ConfigManager[_0x3ffb9d(0x585)]=ConfigManager[_0x3ffb9d(0x585)]??!![],VisuMZ[_0x3ffb9d(0x80e)]['ConfigManager_makeData']=ConfigManager[_0x3ffb9d(0x2ba)],ConfigManager[_0x3ffb9d(0x2ba)]=function(){const _0x4bee99=_0x3ffb9d,_0x5795d8=VisuMZ[_0x4bee99(0x80e)]['ConfigManager_makeData'][_0x4bee99(0x73d)](this);return _0x5795d8[_0x4bee99(0x9c2)]=this['autoBattleAtStart'],_0x5795d8[_0x4bee99(0xb59)]=this[_0x4bee99(0xb59)],_0x5795d8[_0x4bee99(0x585)]=this[_0x4bee99(0x585)],_0x5795d8;},VisuMZ['BattleCore'][_0x3ffb9d(0x688)]=ConfigManager[_0x3ffb9d(0x277)],ConfigManager[_0x3ffb9d(0x277)]=function(_0x530e53){const _0x39523b=_0x3ffb9d;VisuMZ[_0x39523b(0x80e)][_0x39523b(0x688)][_0x39523b(0x73d)](this,_0x530e53);if('autoBattleAtStart'in _0x530e53){if(_0x39523b(0x559)!==_0x39523b(0x559)){_0x51cd2f(_0x39523b(0xa11)),_0x3f90be[_0x39523b(0x6b5)]();return;}else this[_0x39523b(0x9c2)]=_0x530e53[_0x39523b(0x9c2)];}else this['autoBattleAtStart']=![];_0x39523b(0xb59)in _0x530e53?this[_0x39523b(0xb59)]=_0x530e53[_0x39523b(0xb59)]:this[_0x39523b(0xb59)]=![],_0x39523b(0x585)in _0x530e53?this[_0x39523b(0x585)]=_0x530e53[_0x39523b(0x585)]:this[_0x39523b(0x585)]=!![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x3ac)]=BattleManager[_0x3ffb9d(0xa0c)],BattleManager[_0x3ffb9d(0xa0c)]=function(){const _0x4ddaf3=_0x3ffb9d;VisuMZ[_0x4ddaf3(0x80e)][_0x4ddaf3(0x3ac)][_0x4ddaf3(0x73d)](this),this['_forcedBattlers']=[];},BattleManager[_0x3ffb9d(0x5d3)]=function(){const _0x5e0c35=_0x3ffb9d;if(!SceneManager[_0x5e0c35(0x341)]())return;const _0x31611d=SceneManager[_0x5e0c35(0x947)][_0x5e0c35(0x1bb)];if(_0x31611d)_0x31611d[_0x5e0c35(0x283)]();},BattleManager['battleSys']=function(){const _0xdb0b87=_0x3ffb9d;if(BattleManager['isTpb']())return'TPB';return _0xdb0b87(0x758);},BattleManager['isBattleSys']=function(_0x38dad7){const _0x2c4ddd=_0x3ffb9d;return _0x38dad7=_0x38dad7['toUpperCase']()[_0x2c4ddd(0x33a)](),this[_0x2c4ddd(0x65a)]()===_0x38dad7;},BattleManager[_0x3ffb9d(0x56e)]=function(){const _0x252c67=_0x3ffb9d;return this['isBattleSys'](_0x252c67(0x758));},BattleManager[_0x3ffb9d(0x7f2)]=function(){const _0x477451=_0x3ffb9d;return this[_0x477451(0x56e)]();},BattleManager['isTickBased']=function(){const _0x2479d4=_0x3ffb9d;return!this[_0x2479d4(0x7f2)]();},BattleManager[_0x3ffb9d(0xc20)]=function(){return!this['isTurnBased']()&&!this['isTickBased']();},BattleManager[_0x3ffb9d(0x722)]=function(_0xf507ce){const _0x3ef4c0=_0x3ffb9d;$gameParty['processBattleCoreJS'](_0xf507ce),$gameTroop[_0x3ef4c0(0x722)](_0xf507ce);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x832)]=BattleManager[_0x3ffb9d(0x8e0)],BattleManager[_0x3ffb9d(0x8e0)]=function(){const _0x204962=_0x3ffb9d;this[_0x204962(0x378)]=![],this[_0x204962(0x710)]=ConfigManager['autoBattleAtStart'],this[_0x204962(0x722)](_0x204962(0x6c6)),VisuMZ[_0x204962(0x80e)][_0x204962(0x832)][_0x204962(0x73d)](this),this['processBattleCoreJS'](_0x204962(0x6e5));},BattleManager['processPostBattleCommonEvents']=function(_0x7c7301){const _0x11fb3d=_0x3ffb9d,_0x109dc3=VisuMZ[_0x11fb3d(0x80e)]['Settings']['Mechanics'];if(_0x7c7301!==_0x11fb3d(0x9c1)&&_0x109dc3[_0x11fb3d(0x9c7)]&&VisuMZ['BattleCore'][_0x11fb3d(0xa4b)](_0x109dc3['BattleEndEvent'])){if('DFLaN'!==_0x11fb3d(0x431))$gameTemp[_0x11fb3d(0x9fc)](_0x109dc3[_0x11fb3d(0x9c7)]);else{if(!_0xfe2199[_0x11fb3d(0x80e)][_0x11fb3d(0xb7f)])return;if(_0x47b9cb['VisuMZ_2_BattleSystemCTB']&&_0x3e5b3b[_0x11fb3d(0x2b1)]())return;const _0x682412=_0x22c53a[_0x11fb3d(0x735)]()[_0x11fb3d(0xae9)](_0x3e6964=>_0x3e6964[_0x11fb3d(0xaf1)]()&&_0x3e6964[_0x11fb3d(0x889)]());_0x31bf94[_0x11fb3d(0xa76)]=_0x682412[0x0]||null,_0x138cc2[_0x11fb3d(0xa76)]&&_0x30f5a1[_0x11fb3d(0xa76)][_0x11fb3d(0x864)](_0x11fb3d(0xb43));}}const _0x1da05c=_0x11fb3d(0x444)[_0x11fb3d(0x4a7)](_0x7c7301);_0x109dc3[_0x1da05c]&&VisuMZ[_0x11fb3d(0x80e)][_0x11fb3d(0xa4b)](_0x109dc3[_0x1da05c])&&$gameTemp[_0x11fb3d(0x9fc)](_0x109dc3[_0x1da05c]);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x946)]=BattleManager[_0x3ffb9d(0x801)],BattleManager['checkBattleEnd']=function(){const _0x2654cf=_0x3ffb9d;if(this[_0x2654cf(0x627)]===_0x2654cf(0x9bc)){if('xejeZ'===_0x2654cf(0x595))return![];else{if($gameTemp['isCommonEventReserved']())return![];}}return VisuMZ[_0x2654cf(0x80e)][_0x2654cf(0x946)][_0x2654cf(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)]['BattleManager_processVictory']=BattleManager[_0x3ffb9d(0x43a)],BattleManager[_0x3ffb9d(0x43a)]=function(){const _0x4d738d=_0x3ffb9d;this[_0x4d738d(0x722)](_0x4d738d(0x5bb)),VisuMZ['BattleCore'][_0x4d738d(0x4dd)][_0x4d738d(0x73d)](this),this[_0x4d738d(0x3d5)](_0x4d738d(0x3c4));},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x25f)]=BattleManager[_0x3ffb9d(0x7cb)],BattleManager['processDefeat']=function(){const _0x4bcf02=_0x3ffb9d;this[_0x4bcf02(0x722)](_0x4bcf02(0x29a)),VisuMZ['BattleCore'][_0x4bcf02(0x25f)][_0x4bcf02(0x73d)](this),this[_0x4bcf02(0x3d5)](_0x4bcf02(0x648));},VisuMZ['BattleCore'][_0x3ffb9d(0x358)]=BattleManager[_0x3ffb9d(0x766)],BattleManager[_0x3ffb9d(0x766)]=function(_0x32c55f){const _0x692dbb=_0x3ffb9d;this[_0x692dbb(0x378)]=!![],this[_0x692dbb(0x710)]=![],this[_0x692dbb(0x722)](_0x692dbb(0xb04)),VisuMZ[_0x692dbb(0x80e)]['BattleManager_endBattle'][_0x692dbb(0x73d)](this,_0x32c55f),this[_0x692dbb(0x722)](_0x692dbb(0x538));},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6e4)]=BattleManager['startTurn'],BattleManager['startTurn']=function(){const _0x1eb30a=_0x3ffb9d;if(this[_0x1eb30a(0x7f2)]())this['processBattleCoreJS'](_0x1eb30a(0x7a9));VisuMZ[_0x1eb30a(0x80e)][_0x1eb30a(0x6e4)][_0x1eb30a(0x73d)](this);if(this[_0x1eb30a(0x7f2)]())this[_0x1eb30a(0x722)](_0x1eb30a(0x269));},VisuMZ['BattleCore'][_0x3ffb9d(0x276)]=BattleManager[_0x3ffb9d(0x578)],BattleManager['startAction']=function(){const _0x45849f=_0x3ffb9d,_0x15882e=this['_subject'][_0x45849f(0x33f)](),_0x110bc7=this['_subject'];if(_0x15882e&&_0x15882e[_0x45849f(0x913)]()===_0x110bc7){if(_0x45849f(0xbe5)!==_0x45849f(0x8ab))_0x15882e[_0x45849f(0x8a9)](_0x45849f(0xa0a));else return this[_0x45849f(0x37e)][_0x45849f(0x928)]();}VisuMZ['BattleCore']['BattleManager_startAction']['call'](this),_0x15882e&&_0x15882e[_0x45849f(0x913)]()===_0x110bc7&&_0x15882e[_0x45849f(0x8a9)]('PostStartActionJS');},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x84c)]=BattleManager['endAction'],BattleManager['endAction']=function(){const _0x3dfe13=_0x3ffb9d,_0x3ea6b0=this[_0x3dfe13(0x58b)],_0x397412=this[_0x3dfe13(0xa98)];_0x3ea6b0&&_0x3ea6b0!==this[_0x3dfe13(0x2e4)]&&_0x3ea6b0[_0x3dfe13(0x913)]()===_0x397412&&_0x3ea6b0[_0x3dfe13(0x8a9)](_0x3dfe13(0x472)),this[_0x3dfe13(0xa98)]?VisuMZ[_0x3dfe13(0x80e)][_0x3dfe13(0x84c)][_0x3dfe13(0x73d)](this):this[_0x3dfe13(0x627)]=_0x3dfe13(0x9bc),_0x3ea6b0&&_0x3ea6b0!==this[_0x3dfe13(0x2e4)]&&_0x3ea6b0[_0x3dfe13(0x913)]()===_0x397412&&(_0x3dfe13(0x828)!=='GcoEg'?_0x3ea6b0['actionBattleCoreJS']('PostEndActionJS'):(_0x1d36b1[_0x3dfe13(0x722)](_0x4a6e77),_0x2ae9a5[_0x3dfe13(0x722)](_0x12bc99))),this['refreshBattlerMotions'](this[_0x3dfe13(0xaa7)]()),this[_0x3dfe13(0x2e4)]=this[_0x3dfe13(0x58b)];},BattleManager['refreshBattlerMotions']=function(_0xe6f54d){const _0x519491=_0x3ffb9d;for(const _0x49a71c of _0xe6f54d){if(!_0x49a71c)continue;if(!_0x49a71c[_0x519491(0x491)]())continue;_0x49a71c[_0x519491(0x491)]()['refreshMotion']();}},BattleManager[_0x3ffb9d(0x7a4)]=function(){const _0x1262e7=_0x3ffb9d;if(!this[_0x1262e7(0x492)][_0x1262e7(0x7ff)]()){if('lCHwU'!=='lCHwU'){if(this[_0x1262e7(0x939)]===_0x6829f5)this['initBattlePortrait']();this[_0x1262e7(0x939)]=_0x446756;if(_0x2b7ab2[_0x1262e7(0x341)]()&&_0x5ed317['battleMembers']()[_0x1262e7(0x802)](this)){const _0x1d6e0c=_0x415ba9[_0x1262e7(0x947)]['_statusWindow'];if(_0x1d6e0c)_0x1d6e0c[_0x1262e7(0x777)](this);}}else this['endAction']();}},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x768)]=function(){const _0x4fc0d0=_0x3ffb9d;this[_0x4fc0d0(0x7c0)]();if(Imported['VisuMZ_1_SkillsStatesCore']){if('XIrBQ'!==_0x4fc0d0(0x216))_0x5bd373[_0x4fc0d0(0x8ce)]([_0x397be0]);else{const _0x178a29=VisuMZ[_0x4fc0d0(0x9b5)]['Settings']['States'];_0x178a29&&_0x178a29['ActionEndUpdate']===![]&&this['removeStatesAuto'](0x1);}}else{if(_0x4fc0d0(0x3dd)==='cheDC'){if(!_0x471ff9[_0x4fc0d0(0x80e)]['Settings'][_0x4fc0d0(0x6c4)][_0x4fc0d0(0xbc0)])return;_0x420cb3[_0x4fc0d0(0x80e)]['Window_BattleLog_displayTpDamage'][_0x4fc0d0(0x73d)](this,_0x4556ab);}else this[_0x4fc0d0(0x64b)](0x1);}this['removeBuffsAuto']();},BattleManager['makeEscapeRatio']=function(){const _0x2ec352=_0x3ffb9d;this['_escapeRatio']=VisuMZ['BattleCore'][_0x2ec352(0x901)][_0x2ec352(0xbd3)][_0x2ec352(0xbe6)][_0x2ec352(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xc0b)]=BattleManager[_0x3ffb9d(0x7ae)],BattleManager[_0x3ffb9d(0x7ae)]=function(){const _0x4d2403=_0x3ffb9d;this[_0x4d2403(0x722)](_0x4d2403(0x588)),BattleManager[_0x4d2403(0x9da)]['processEscape'](),VisuMZ[_0x4d2403(0x80e)]['BattleManager_onEscapeSuccess']['call'](this),this[_0x4d2403(0x3d5)](_0x4d2403(0x2bf));},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x4b6)]=BattleManager['onEscapeFailure'],BattleManager[_0x3ffb9d(0x76a)]=function(){const _0x4faeb5=_0x3ffb9d;this[_0x4faeb5(0x722)](_0x4faeb5(0xac7));const _0x2597f4=this[_0x4faeb5(0x1fc)];VisuMZ[_0x4faeb5(0x80e)][_0x4faeb5(0x4b6)][_0x4faeb5(0x73d)](this),this[_0x4faeb5(0x1fc)]=_0x2597f4+VisuMZ[_0x4faeb5(0x80e)][_0x4faeb5(0x901)][_0x4faeb5(0xbd3)][_0x4faeb5(0x954)]['call'](this),this[_0x4faeb5(0x3d5)](_0x4faeb5(0x9c1));},BattleManager['displayStartMessages']=function(){const _0x5affb0=_0x3ffb9d;let _0x482158=![];if(this[_0x5affb0(0x5cf)]()){if(_0x5affb0(0x63c)===_0x5affb0(0x63c))for(const _0x1509d5 of $gameTroop[_0x5affb0(0x892)]()){this[_0x5affb0(0x492)][_0x5affb0(0x7dd)](_0x5affb0(0x7dc),TextManager[_0x5affb0(0x4ee)][_0x5affb0(0x4a7)](_0x1509d5)),this[_0x5affb0(0x492)][_0x5affb0(0x7dd)](_0x5affb0(0xb2d)),_0x482158=!![];}else _0x5b1c24[_0x5affb0(0x49a)]();}if(this[_0x5affb0(0x25b)])this['_logWindow'][_0x5affb0(0x7dd)]('addText',TextManager['preemptive'][_0x5affb0(0x4a7)]($gameParty[_0x5affb0(0x453)]())),this['_logWindow']['push'](_0x5affb0(0xb2d));else{if(this[_0x5affb0(0x66d)]){if(_0x5affb0(0x960)===_0x5affb0(0x7ba)){if(!_0x59bed0[_0x5affb0(0x341)]())return;const _0x4af803=_0x3ce3cd[_0x5affb0(0x292)](),_0x29f4c4=_0x3d6107[_0x5affb0(0x492)];_0x29f4c4[_0x5affb0(0x1c4)](),_0x4af803[_0x5affb0(0x27b)](_0x5affb0(0x725));}else this[_0x5affb0(0x492)][_0x5affb0(0x7dd)]('addText',TextManager[_0x5affb0(0x206)]['format']($gameParty[_0x5affb0(0x453)]())),this[_0x5affb0(0x492)][_0x5affb0(0x7dd)](_0x5affb0(0xb2d));}}if(_0x482158){if(_0x5affb0(0xbc5)!==_0x5affb0(0x839))this[_0x5affb0(0x492)]['push']('wait'),this['_logWindow'][_0x5affb0(0x7dd)](_0x5affb0(0x75e));else{const _0x296f22=_0x435f43(_0x3af29d['$1']);this[_0x5affb0(0x508)](_0x296f22);}}this['isTpb']()&&this[_0x5affb0(0xb61)]()&&(this[_0x5affb0(0x761)]=![]);},BattleManager['isDisplayEmergedEnemies']=function(){const _0x4243fe=_0x3ffb9d;if(BattleManager['_autoBattle'])return![];return VisuMZ[_0x4243fe(0x80e)][_0x4243fe(0x901)][_0x4243fe(0x5e5)][_0x4243fe(0x59a)];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x39a)]=BattleManager[_0x3ffb9d(0x3e9)],BattleManager[_0x3ffb9d(0x3e9)]=function(){const _0x43c443=_0x3ffb9d;VisuMZ['BattleCore'][_0x43c443(0x39a)][_0x43c443(0x73d)](this),this[_0x43c443(0x56e)]()&&this[_0x43c443(0xb61)]()&&!this['_surprise']&&$gameParty[_0x43c443(0x889)]()&&this[_0x43c443(0x81b)]();},BattleManager[_0x3ffb9d(0xb61)]=function(){const _0x46bf45=_0x3ffb9d;return VisuMZ[_0x46bf45(0x80e)][_0x46bf45(0x901)]['PartyCmd'][_0x46bf45(0x770)];},BattleManager['checkTpbInputOpen']=function(){const _0x4a77c6=_0x3ffb9d;this['isPartyTpbInputtable']()&&this[_0x4a77c6(0x81b)]();},VisuMZ['BattleCore'][_0x3ffb9d(0x26a)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x52f)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x52f)]=function(){const _0x4aef28=_0x3ffb9d;VisuMZ[_0x4aef28(0x80e)]['Scene_Battle_startActorCommandSelection'][_0x4aef28(0x73d)](this),BattleManager[_0x4aef28(0x4e4)]()&&BattleManager['_tpbNeedsPartyCommand']&&(_0x4aef28(0xbb5)===_0x4aef28(0xbb5)?(BattleManager['_tpbNeedsPartyCommand']=![],this[_0x4aef28(0xab8)]()):(this['_effectsContainer']=new _0x5daffc(),this[_0x4aef28(0x237)](this[_0x4aef28(0x1e6)])));},BattleManager['invokeMagicReflection']=function(_0x791df8,_0x5950f5){const _0x158374=_0x3ffb9d;this[_0x158374(0x58b)]['_reflectionTarget']=_0x5950f5,this[_0x158374(0x492)][_0x158374(0xa4d)](_0x5950f5),this[_0x158374(0x492)][_0x158374(0x56d)](_0x791df8,this[_0x158374(0x58b)]),this[_0x158374(0x58b)][_0x158374(0x522)](_0x791df8),this['_logWindow'][_0x158374(0x3b4)](_0x791df8,_0x791df8);},VisuMZ['BattleCore'][_0x3ffb9d(0x544)]=BattleManager['makeActionOrders'],BattleManager[_0x3ffb9d(0x18c)]=function(){const _0x55237b=_0x3ffb9d;VisuMZ[_0x55237b(0x80e)][_0x55237b(0x544)][_0x55237b(0x73d)](this),this[_0x55237b(0x37e)]=this[_0x55237b(0x37e)][_0x55237b(0xae9)](_0x556ff3=>_0x556ff3&&_0x556ff3[_0x55237b(0xc10)]());},VisuMZ['BattleCore'][_0x3ffb9d(0x809)]=BattleManager[_0x3ffb9d(0xb07)],BattleManager[_0x3ffb9d(0xb07)]=function(_0x102264){const _0x2af2b7=_0x3ffb9d;if(this[_0x2af2b7(0x627)]===_0x2af2b7(0x589))this[_0x2af2b7(0x55a)]();else this['_phase']==='forceAction'?this[_0x2af2b7(0xa0e)]():'xdcfo'===_0x2af2b7(0x5a3)?(_0x929ded[_0x2af2b7(0x80e)][_0x2af2b7(0x535)][_0x2af2b7(0x73d)](this,_0x29811f),this[_0x2af2b7(0x8d7)]()):VisuMZ[_0x2af2b7(0x80e)][_0x2af2b7(0x809)][_0x2af2b7(0x73d)](this,_0x102264);},BattleManager['prepareCustomActionSequence']=function(){const _0xc08dc4=_0x3ffb9d;this[_0xc08dc4(0x4ff)]=this[_0xc08dc4(0x678)][_0xc08dc4(0xa39)](0x0),this['_targetIndex']=0x0,this[_0xc08dc4(0x6e0)]=this[_0xc08dc4(0x4ff)][0x0]||null,this[_0xc08dc4(0x627)]=_0xc08dc4(0x589);},BattleManager[_0x3ffb9d(0x55a)]=function(){const _0x24fca6=_0x3ffb9d;!this[_0x24fca6(0x545)]()&&!this[_0x24fca6(0x492)]['isBusy']()&&(this[_0x24fca6(0x627)]='action');},BattleManager[_0x3ffb9d(0x571)]=function(_0x2d27e6){const _0x2bb403=_0x3ffb9d;this[_0x2bb403(0x37e)][_0x2bb403(0x7bc)](_0x2d27e6);if(_0x2d27e6===this[_0x2bb403(0xa98)])return;const _0x3cbe0e=JsonEx[_0x2bb403(0x965)](_0x2d27e6[_0x2bb403(0x33f)]());this[_0x2bb403(0x966)]['push']([_0x2d27e6,_0x3cbe0e]);},BattleManager[_0x3ffb9d(0x64f)]=function(){},BattleManager['updateStart']=function(){const _0x399bf8=_0x3ffb9d;if(this[_0x399bf8(0x4e4)]()){if(_0x399bf8(0xc3b)===_0x399bf8(0xc3b))this['_phase']=_0x399bf8(0x9bc);else{if(!_0x1ce1fb[_0x399bf8(0x341)]())return!![];const _0xfe7ce6=[_0x399bf8(0x5ac),'Scene_Party'];return _0xfe7ce6[_0x399bf8(0x802)](_0x234f96['name']);}}else this[_0x399bf8(0x966)][_0x399bf8(0x205)]>0x0?this[_0x399bf8(0x627)]='turn':'HqFsE'!=='HqFsE'?(this[_0x399bf8(0x7dd)](_0x399bf8(0x664)),this[_0x399bf8(0x6a9)](_0x25aca1),this[_0x399bf8(0xa18)](_0x1e2a8f),this['push'](_0x399bf8(0x1c4))):this[_0x399bf8(0x3e9)]();},BattleManager[_0x3ffb9d(0xa2a)]=function(){const _0x1b5df0=_0x3ffb9d,_0x57a50f=this[_0x1b5df0(0xa98)];_0x57a50f&&this['isTpb']()&&_0x57a50f['setActionState'](_0x1b5df0(0x403));for(;;){if(_0x1b5df0(0x80a)!==_0x1b5df0(0x80a))this[_0x1b5df0(0x75e)]();else{const _0x355c96=this['getNextSubjectFromPool']();if(!_0x355c96)return null;if(_0x355c96[_0x1b5df0(0x273)]()&&_0x355c96[_0x1b5df0(0x3ad)]())return _0x355c96;}}},BattleManager['getNextSubjectFromPool']=function(){const _0x3c46cf=_0x3ffb9d;if(this[_0x3c46cf(0x966)]['length']>0x0){if('buRas'===_0x3c46cf(0x967)){const _0x36d04d=this[_0x3c46cf(0x735)]();return _0x36d04d[_0x12fbc4[_0x3c46cf(0x3ab)](_0x36d04d[_0x3c46cf(0x205)])];}else{const _0x581d4e=this[_0x3c46cf(0x966)][_0x3c46cf(0x928)](),_0x2c0a5b=_0x581d4e[0x0];return _0x2c0a5b['_actions']=_0x2c0a5b[_0x3c46cf(0xabb)]||[],_0x2c0a5b[_0x3c46cf(0xabb)][0x0]=_0x581d4e[0x1],_0x2c0a5b;}}else return'yeQCP'===_0x3c46cf(0x2d2)?this[_0x3c46cf(0x8a0)]*this[_0x3c46cf(0xae8)]():this['_actionBattlers']['shift']();},VisuMZ[_0x3ffb9d(0x80e)]['Game_Battler_forceAction']=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x571)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x571)]=function(_0x206ccf,_0x51fc9c){const _0xf0f5bd=_0x3ffb9d;VisuMZ[_0xf0f5bd(0x80e)][_0xf0f5bd(0x1da)][_0xf0f5bd(0x73d)](this,_0x206ccf,_0x51fc9c),this[_0xf0f5bd(0xabb)][this['_actions']['length']-0x1][_0xf0f5bd(0x2fa)]=!![];},Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x92e)]=function(_0x3d1c44){const _0x332d79=_0x3ffb9d;return this[_0x332d79(0x287)](_0x3d1c44[0x0],_0x3d1c44[0x1],_0x3ecacc=>{const _0x2ae07e=_0x332d79;if(!_0x3ecacc[_0x2ae07e(0x4fd)]()){if(_0x2ae07e(0x359)!==_0x2ae07e(0x510))_0x3ecacc[_0x2ae07e(0x571)](_0x3d1c44[0x2],_0x3d1c44[0x3]),BattleManager[_0x2ae07e(0x571)](_0x3ecacc);else{if(!_0x53ae64[_0x2ae07e(0x94e)]())return![];if(!_0x3d03db[_0x2ae07e(0x22a)]())return![];if(!_0x409968[_0x2ae07e(0x623)]())return![];return _0x18cfd1[_0x2ae07e(0x80e)][_0x2ae07e(0x901)]['ActionSequence'][_0x2ae07e(0x69d)];}}}),!![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x9e9)]=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3ef)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3ef)]=function(){const _0x75ca76=_0x3ffb9d;VisuMZ['BattleCore']['Game_Battler_makeSpeed'][_0x75ca76(0x73d)](this),this['_actions'][_0x75ca76(0x205)]<=0x0&&(this[_0x75ca76(0x1d1)]=Number['MIN_SAFE_INTEGER']);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x49e)]=BattleManager[_0x3ffb9d(0x81b)],BattleManager['selectNextCommand']=function(){const _0x32dcca=_0x3ffb9d;if(this[_0x32dcca(0x4e4)]()){if(_0x32dcca(0x489)===_0x32dcca(0xba8)){if(this['_dimmerSprite']){const _0x694d37=this[_0x32dcca(0xbfb)][_0x32dcca(0x6a0)],_0x5fb35d=this[_0x32dcca(0x7d6)]-0x8,_0x3a370d=this['height'],_0x539533=this[_0x32dcca(0xc1f)],_0x4c8272=_0x3d0780[_0x32dcca(0xc2a)](),_0x510f26=_0x3eb147[_0x32dcca(0x98f)]();this[_0x32dcca(0xbfb)]['x']=0x4,_0x694d37[_0x32dcca(0x218)](_0x5fb35d,_0x3a370d),_0x694d37['gradientFillRect'](0x0,0x0,_0x5fb35d,_0x539533,_0x510f26,_0x4c8272,!![]),_0x694d37[_0x32dcca(0x355)](0x0,_0x539533,_0x5fb35d,_0x3a370d-_0x539533*0x2,_0x4c8272),_0x694d37['gradientFillRect'](0x0,_0x3a370d-_0x539533,_0x5fb35d,_0x539533,_0x4c8272,_0x510f26,!![]),this[_0x32dcca(0xbfb)][_0x32dcca(0x452)](0x0,0x0,_0x5fb35d,_0x3a370d);}}else this[_0x32dcca(0x96c)]();}else'tHZKD'===_0x32dcca(0x41b)?VisuMZ[_0x32dcca(0x80e)][_0x32dcca(0x49e)][_0x32dcca(0x73d)](this):this[_0x32dcca(0x32f)]();},BattleManager[_0x3ffb9d(0x96c)]=function(){const _0x317efc=_0x3ffb9d;if(this['_currentActor']){if(this[_0x317efc(0xa76)][_0x317efc(0x81b)]()){if('cSsye'==='VdeGR'){const _0x4c5a23=this[_0x317efc(0x33b)]()[_0x317efc(0x983)];return _0x4c5a23['match'](/(?:ENEMY|ENEMIES|FOE|FOES)/i);}else return;}this[_0x317efc(0x91d)](),this[_0x317efc(0x999)](),!this['_subject']&&!this['_currentActor']&&SceneManager['_scene'][_0x317efc(0x88f)]();}else!this[_0x317efc(0xa98)]&&(_0x317efc(0xa8e)===_0x317efc(0xa8e)?this[_0x317efc(0x47d)]():(this[_0x317efc(0x373)]=_0x1d5802[_0x317efc(0x211)]>=0x0?0x2:0x3,this['createDigits'](_0x38cc4f[_0x317efc(0x211)])));},BattleManager['checkTpbInputClose']=function(){const _0x5de09c=_0x3ffb9d;(!this[_0x5de09c(0x30f)]()||this[_0x5de09c(0x3a0)]())&&(this[_0x5de09c(0xa85)]&&(!$gameParty[_0x5de09c(0xbf4)]()['includes'](this['_tpbSceneChangeCacheActor'])&&(_0x5de09c(0x630)!=='FUFFr'?this['_tpbSceneChangeCacheActor']=null:this[_0x5de09c(0x884)]())),!this[_0x5de09c(0xa85)]?_0x5de09c(0x74d)===_0x5de09c(0x74d)?(this[_0x5de09c(0x883)](),this[_0x5de09c(0xa76)]=null,this[_0x5de09c(0x743)]=![]):this['_waitCount']=_0x5d7226:this[_0x5de09c(0x82b)]());},BattleManager[_0x3ffb9d(0x82b)]=function(){const _0x509393=_0x3ffb9d;if(!$gameParty[_0x509393(0xbf4)]()[_0x509393(0x802)](this[_0x509393(0xa85)])){if(_0x509393(0x548)===_0x509393(0x8bd)){_0x29cf44=_0x4b9925[_0x509393(0x80e)]['Game_Action_makeTargets'][_0x509393(0x73d)](this);const _0x8622d6=_0x581034['BattleCore'][_0x509393(0xb88)](this['item'](),_0x509393(0x692));return _0x57ba3a=_0x4f243f[_0x509393(0x80e)]['JS'][_0x8622d6][_0x509393(0x73d)](this,this[_0x509393(0x913)](),_0x56d05d),this[_0x509393(0xa95)](_0x19a976);}else this[_0x509393(0xa85)]=null;}this[_0x509393(0xa85)]?(this[_0x509393(0xa76)]=this[_0x509393(0xa85)],this[_0x509393(0xa76)][_0x509393(0xa3b)]=_0x509393(0x1b6),this[_0x509393(0x743)]=!![],this[_0x509393(0xa85)]=null):(this[_0x509393(0x883)](),this[_0x509393(0xa76)]=null,this[_0x509393(0x743)]=![]);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x624)]=BattleManager[_0x3ffb9d(0x280)],BattleManager[_0x3ffb9d(0x280)]=function(){const _0x144a52=_0x3ffb9d;if(this[_0x144a52(0x627)]==='custom'){if('QWkej'!==_0x144a52(0x4fe))this[_0x144a52(0x539)][_0x144a52(0x7dd)](_0x5f336b),this[_0x144a52(0x96b)](),this['callNextMethod']();else return this[_0x144a52(0x89e)]();}else return VisuMZ[_0x144a52(0x80e)][_0x144a52(0x624)][_0x144a52(0x73d)](this);},BattleManager['battleCoreTpbMainPhase']=function(){return this['isActiveTpb']();},VisuMZ['BattleCore'][_0x3ffb9d(0xa7e)]=BattleManager[_0x3ffb9d(0x883)],BattleManager[_0x3ffb9d(0x883)]=function(){const _0x242177=_0x3ffb9d;this['isTpb']()&&this[_0x242177(0x627)]===_0x242177(0x7ea)&&(this['_currentActor']=null),VisuMZ[_0x242177(0x80e)]['BattleManager_cancelActorInput'][_0x242177(0x73d)](this);},VisuMZ['BattleCore'][_0x3ffb9d(0x738)]=BattleManager[_0x3ffb9d(0x6e9)],BattleManager[_0x3ffb9d(0x6e9)]=function(){const _0x509e4f=_0x3ffb9d,_0x380307=this['_currentActor'];if(_0x380307&&!_0x380307[_0x509e4f(0x6e9)]()){const _0x2936eb=_0x380307['_actionInputIndex'];_0x380307[_0x509e4f(0xabb)][_0x2936eb]=new Game_Action(_0x380307);}return VisuMZ[_0x509e4f(0x80e)][_0x509e4f(0x738)]['call'](this);},VisuMZ[_0x3ffb9d(0x80e)]['BattleManager_checkSubstitute']=BattleManager[_0x3ffb9d(0x519)],BattleManager['checkSubstitute']=function(_0xb57502){const _0x5e8d04=_0x3ffb9d;if(this[_0x5e8d04(0x58b)]['isForFriend']())return![];return VisuMZ[_0x5e8d04(0x80e)][_0x5e8d04(0x3d4)]['call'](this,_0xb57502);},SceneManager['isSceneBattle']=function(){const _0x5d942d=_0x3ffb9d;return this[_0x5d942d(0x947)]&&this[_0x5d942d(0x947)][_0x5d942d(0x4a3)]===Scene_Battle;},SceneManager['isBattleFlipped']=function(){return Spriteset_Battle['prototype']['isFlipped']();},SceneManager[_0x3ffb9d(0x6bd)]=function(){const _0x27523e=_0x3ffb9d;if(SceneManager[_0x27523e(0x4ac)](Scene_Options))return!![];return![];},SceneManager[_0x3ffb9d(0x5f4)]=function(){const _0x499b31=_0x3ffb9d;if(SceneManager[_0x499b31(0x3b9)](Scene_Options))return!![];return![];},SceneManager['checkSceneBattleTransitionable']=function(_0x1a9b68){const _0x58305f=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return!![];const _0x285b42=[_0x58305f(0x5ac),_0x58305f(0x27a)];return _0x285b42[_0x58305f(0x802)](_0x1a9b68['name']);},VisuMZ[_0x3ffb9d(0x80e)]['SceneManager_push']=SceneManager[_0x3ffb9d(0x7dd)],SceneManager[_0x3ffb9d(0x7dd)]=function(_0x2c0ec1){const _0x4d0b92=_0x3ffb9d;if(!SceneManager[_0x4d0b92(0x9fd)](_0x2c0ec1))return this['displayBattleCoreTransitionErrorMsg'](_0x2c0ec1);VisuMZ[_0x4d0b92(0x80e)]['SceneManager_push'][_0x4d0b92(0x73d)](this,_0x2c0ec1);},SceneManager[_0x3ffb9d(0x1ba)]=function(_0x1fb22b){const _0x2a8949=_0x3ffb9d;if(!$gameTemp[_0x2a8949(0x2aa)]())return;if(this['_displayBattleCoreTransitionErrorMsg'])return;this[_0x2a8949(0xb10)]=!![];let _0x5e75b0='';_0x5e75b0+=_0x2a8949(0x51d),_0x5e75b0+='\x20to\x20%1\x20midbattle.'[_0x2a8949(0x4a7)](_0x1fb22b[_0x2a8949(0x453)]),alert(_0x5e75b0);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x7d0)]=Game_Temp[_0x3ffb9d(0xb66)][_0x3ffb9d(0x418)],Game_Temp[_0x3ffb9d(0xb66)][_0x3ffb9d(0x418)]=function(_0x575df9,_0x13ee5d,_0xa2ccc4){const _0x33f7ac=_0x3ffb9d;_0x575df9=_0x575df9['filter']((_0x29a0c5,_0x2e1840,_0x51a91d)=>_0x51a91d['indexOf'](_0x29a0c5)===_0x2e1840);SceneManager[_0x33f7ac(0x341)]()&&SceneManager['isBattleFlipped']()&&(_0xa2ccc4=!_0xa2ccc4);VisuMZ[_0x33f7ac(0x80e)][_0x33f7ac(0x7d0)][_0x33f7ac(0x73d)](this,_0x575df9,_0x13ee5d,_0xa2ccc4);if(SceneManager[_0x33f7ac(0x341)]()){if(_0x33f7ac(0x189)!==_0x33f7ac(0x189))return this[_0x33f7ac(0x233)]()[_0x33f7ac(0x365)][_0x33f7ac(0x1b7)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)?_0x15adab(_0x37fbd8['$1'])[_0x33f7ac(0x83d)](/[\r\n]+/):_0x261d0a[_0x33f7ac(0x80e)]['Settings'][_0x33f7ac(0x606)][_0x33f7ac(0xa8f)];else BattleManager[_0x33f7ac(0x9da)][_0x33f7ac(0x8b8)]();}},Game_Temp['prototype'][_0x3ffb9d(0x8d3)]=function(_0x439af1){const _0x38da3a=_0x3ffb9d;this[_0x38da3a(0x48c)]=_0x439af1;},Game_Temp[_0x3ffb9d(0xb66)][_0x3ffb9d(0x292)]=function(){return this['_lastPluginCommandInterpreter'];},Game_Temp[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6d5)]=function(){const _0xf2c25f=_0x3ffb9d;this[_0xf2c25f(0x4ce)]=undefined;},Game_Temp[_0x3ffb9d(0xb66)]['applyForcedGameTroopSettingsBattleCore']=function(_0x2abea7){const _0x30449a=_0x3ffb9d;$gameMap&&$dataMap&&$dataMap[_0x30449a(0x365)]&&(_0x30449a(0xc27)===_0x30449a(0xc27)?this['parseForcedGameTroopSettingsBattleCore']($dataMap[_0x30449a(0x365)]):this[_0x30449a(0x81b)]());const _0x28124e=$dataTroops[_0x2abea7];if(_0x28124e){let _0x32e394=DataManager['createTroopNote'](_0x28124e['id']);this['parseForcedGameTroopSettingsBattleCore'](_0x32e394);}},Game_Temp['prototype'][_0x3ffb9d(0x221)]=function(_0x3b6b82){const _0x2c8f52=_0x3ffb9d;if(!_0x3b6b82)return;if(_0x3b6b82[_0x2c8f52(0x1b7)](/<(?:BATTLELAYOUT|BATTLE LAYOUT|LAYOUT):[ ](.*)>/i)){const _0xcd31c8=String(RegExp['$1']);if(_0xcd31c8[_0x2c8f52(0x1b7)](/DEFAULT/i)){if('HfDIZ'!==_0x2c8f52(0x88d))return _0x49b48a[_0x2c8f52(0x1f6)];else this[_0x2c8f52(0x4ce)]=_0x2c8f52(0x232);}else{if(_0xcd31c8[_0x2c8f52(0x1b7)](/LIST/i))this['_forcedBattleLayout']=_0x2c8f52(0x728);else{if(_0xcd31c8['match'](/XP/i))_0x2c8f52(0x413)==='CludF'?(_0x1f0858*=-0x1,_0xca24ac*=-0x1):this['_forcedBattleLayout']='xp';else{if(_0xcd31c8['match'](/PORTRAIT/i))this[_0x2c8f52(0x4ce)]='portrait';else{if(_0xcd31c8[_0x2c8f52(0x1b7)](/BORDER/i))'XkpXI'===_0x2c8f52(0x250)?this[_0x2c8f52(0xc1f)]=0x0:this['_forcedBattleLayout']=_0x2c8f52(0x94f);else _0xcd31c8['match'](/(?:SIDEVIEW UI|SIDEVIEW)/i)&&(Imported[_0x2c8f52(0x509)]?this[_0x2c8f52(0x4ce)]=_0x2c8f52(0xaa2):this['_forcedBattleLayout']=_0x2c8f52(0x232));}}}}}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x534)]=Game_System[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)],Game_System['prototype'][_0x3ffb9d(0xacd)]=function(){const _0x59f1e1=_0x3ffb9d;VisuMZ[_0x59f1e1(0x80e)][_0x59f1e1(0x534)]['call'](this),this['initBattleCore']();},Game_System['prototype']['initBattleCore']=function(){this['_defeatedEnemies']=this['_defeatedEnemies']||[];},Game_System[_0x3ffb9d(0xb66)][_0x3ffb9d(0x30e)]=function(){const _0x541a87=_0x3ffb9d;if(this[_0x541a87(0x2ff)]===undefined)this[_0x541a87(0xbe2)]();return this[_0x541a87(0x2ff)];},Game_System[_0x3ffb9d(0xb66)]['registerDefeatedEnemy']=function(_0x1d4596){const _0x5bb7a7=_0x3ffb9d;if(this[_0x5bb7a7(0x2ff)]===undefined)this[_0x5bb7a7(0xbe2)]();if(!_0x1d4596)return;if(this[_0x5bb7a7(0x2ff)][_0x5bb7a7(0x802)](_0x1d4596))return;this[_0x5bb7a7(0x2ff)][_0x5bb7a7(0x7dd)](_0x1d4596),this[_0x5bb7a7(0x2ff)][_0x5bb7a7(0x3e3)]((_0x232340,_0x31ed9d)=>_0x232340-_0x31ed9d);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x4f8)]=Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x59f)],Game_BattlerBase[_0x3ffb9d(0xb66)]['addNewState']=function(_0x3844a8){const _0x50c5fc=_0x3ffb9d,_0x502961=this['isAlive'](),_0x4c7b17=this['stateMotionIndex']();VisuMZ[_0x50c5fc(0x80e)][_0x50c5fc(0x4f8)][_0x50c5fc(0x73d)](this,_0x3844a8);if(this[_0x50c5fc(0x2a7)]()&&_0x502961&&this['isDead']()){if(_0x50c5fc(0x95d)!=='LfIVv'){let _0x2b2a22=-0x10,_0x10fc35=this['height']*0.5;const _0x163236=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x3686a2=this['_battler'][_0x50c5fc(0x388)]()['map'](_0x2b1bad=>_0x2b1bad&&_0x2b1bad[_0x50c5fc(0x365)][_0x50c5fc(0x1b7)](_0x163236)?_0x4eccfa(_0x1b75a0['$1']):0x0),_0x4e53a2=this[_0x50c5fc(0x8fa)][_0x50c5fc(0x388)]()[_0x50c5fc(0x2e9)](_0x2e9e78=>_0x2e9e78&&_0x2e9e78[_0x50c5fc(0x365)]['match'](_0x163236)?_0x58ad20(_0x42fc23['$2']):0x0);_0x2b2a22=_0x3686a2['reduce']((_0x41f0b7,_0x1f6b13)=>_0x41f0b7+_0x1f6b13,_0x2b2a22),_0x10fc35=_0x4e53a2['reduce']((_0xd14a96,_0x9b96f)=>_0xd14a96+_0x9b96f,_0x10fc35),this['_weaponSprite']['x']=_0x2b2a22,this['_weaponSprite']['y']=_0x10fc35,this[_0x50c5fc(0x5d2)][_0x50c5fc(0x1e3)]();}else this[_0x50c5fc(0x411)]=!this[_0x50c5fc(0xb6f)](),$gameSystem['registerDefeatedEnemy'](this[_0x50c5fc(0x8df)]());}SceneManager['isSceneBattle']()&&_0x4c7b17!==this[_0x50c5fc(0x9d4)]()&&(this['battler']()&&this['battler']()[_0x50c5fc(0xa68)]());},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb6f)]=function(){const _0x2f2c06=_0x3ffb9d;return $gameSystem['getDefeatedEnemies']()[_0x2f2c06(0x802)](this[_0x2f2c06(0x33c)]);},VisuMZ['BattleCore'][_0x3ffb9d(0x706)]=Game_BattlerBase['prototype'][_0x3ffb9d(0x61a)],Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x61a)]=function(_0x4f3cd1){const _0x32cd15=_0x3ffb9d;VisuMZ['BattleCore'][_0x32cd15(0x706)]['call'](this,_0x4f3cd1),this[_0x32cd15(0x2a7)]()&&_0x4f3cd1===this[_0x32cd15(0x597)]()&&this['isAlive']()&&(_0x32cd15(0x374)==='DhHdH'?(this[_0x32cd15(0x836)]=!![],this[_0x32cd15(0x492)][_0x32cd15(0x7dd)]('addText',_0x59779f[_0x32cd15(0x80e)][_0x32cd15(0x901)][_0x32cd15(0x9d6)][_0x32cd15(0x65f)])):this[_0x32cd15(0x411)]=![]),!this[_0x32cd15(0xbdf)]&&!this[_0x32cd15(0xb22)]&&SceneManager[_0x32cd15(0x341)]()&&this['requestMotionRefresh']();},VisuMZ['BattleCore'][_0x3ffb9d(0x5fc)]=Game_Action['prototype']['clear'],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x75e)]=function(){const _0x167c40=_0x3ffb9d;VisuMZ['BattleCore']['Game_Action_clear'][_0x167c40(0x73d)](this),this[_0x167c40(0xaee)]={'arPenRate':0x0,'arPenFlat':0x0,'arRedRate':0x0,'arRedFlat':0x0},this[_0x167c40(0x56f)]={'criticalHitRate':0x1,'criticalHitFlat':0x0,'criticalDmgRate':0x1,'criticalDmgFlat':0x0,'damageRate':0x1,'damageFlat':0x0,'hitRate':0x1,'hitFlat':0x0},this['_customDamageFormula']=_0x167c40(0x232);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2ab)]=function(_0x2753d9,_0x423ed1){const _0x47f2fb=_0x3ffb9d;return VisuMZ[_0x47f2fb(0x80e)]['Settings'][_0x47f2fb(0xa45)]['OverallFormulaJS'][_0x47f2fb(0x73d)](this,_0x2753d9,_0x423ed1);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8da)]=function(_0x4219a0,_0x2ce926){const _0x5eb5f0=_0x3ffb9d;return VisuMZ[_0x5eb5f0(0x80e)][_0x5eb5f0(0x901)]['Damage'][_0x5eb5f0(0x94d)]['call'](this,_0x4219a0,_0x2ce926);},Game_Action['prototype'][_0x3ffb9d(0x69a)]=function(_0x101c4e,_0x30d22e){const _0x4a66c3=_0x3ffb9d;return VisuMZ[_0x4a66c3(0x80e)][_0x4a66c3(0x901)][_0x4a66c3(0xa45)]['GuardFormulaJS']['call'](this,_0x101c4e,_0x30d22e);},VisuMZ[_0x3ffb9d(0x80e)]['Game_Action_itemHit']=Game_Action['prototype'][_0x3ffb9d(0x779)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x779)]=function(_0x47dc0e){const _0x1dcd37=_0x3ffb9d,_0x363e2c=this[_0x1dcd37(0x33b)]()[_0x1dcd37(0x365)];if(_0x363e2c['match'](/<ALWAYS HIT>/i))return 0x1;else{if(_0x363e2c[_0x1dcd37(0x1b7)](/<ALWAYS HIT RATE: (\d+)([%％])>/i))return Number(RegExp['$1'])/0x64;else{if('QpMun'===_0x1dcd37(0x227)){let _0x52d765=VisuMZ[_0x1dcd37(0x80e)]['Game_Action_itemHit'][_0x1dcd37(0x73d)](this,_0x47dc0e);return _0x52d765=this[_0x1dcd37(0x56f)][_0x1dcd37(0x3c0)]*_0x52d765+this[_0x1dcd37(0x56f)][_0x1dcd37(0x5bc)],_0x52d765;}else _0x3fdadb--,_0x206167++;}}},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x705)]=function(_0x480248){const _0x2387e2=_0x3ffb9d;if(!this[_0x2387e2(0x33b)]()[_0x2387e2(0xbfc)]['critical'])return 0x0;let _0x121572=VisuMZ[_0x2387e2(0x80e)][_0x2387e2(0x901)][_0x2387e2(0xa45)][_0x2387e2(0xa5b)]['call'](this,_0x480248);return _0x121572=this['_multipliers'][_0x2387e2(0xb9e)]*_0x121572+this[_0x2387e2(0x56f)][_0x2387e2(0x59c)],_0x121572;},Game_Action[_0x3ffb9d(0xb66)]['applyCritical']=function(_0x5ccf3a){const _0x1c35b4=_0x3ffb9d;return _0x5ccf3a=VisuMZ[_0x1c35b4(0x80e)][_0x1c35b4(0x901)][_0x1c35b4(0xa45)][_0x1c35b4(0xbe4)][_0x1c35b4(0x73d)](this,_0x5ccf3a),_0x5ccf3a=this[_0x1c35b4(0x56f)][_0x1c35b4(0x1ae)]*_0x5ccf3a+this[_0x1c35b4(0x56f)][_0x1c35b4(0x5e0)],_0x5ccf3a;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x651)]=Game_Action['prototype']['evalDamageFormula'],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x843)]=function(_0x32a4e7){const _0x4b36cd=_0x3ffb9d;if(this[_0x4b36cd(0x720)]!==_0x4b36cd(0x232))return this[_0x4b36cd(0x1ea)](_0x32a4e7);else{if(DataManager[_0x4b36cd(0x690)](this['item']())===_0x4b36cd(0x1b3))return VisuMZ['BattleCore'][_0x4b36cd(0x651)][_0x4b36cd(0x73d)](this,_0x32a4e7);else{if(_0x4b36cd(0x2c8)!=='Hgphg')return this[_0x4b36cd(0x9a7)](_0x32a4e7);else{if(this[_0x4b36cd(0x2ff)]===_0x31da87)this[_0x4b36cd(0xbe2)]();if(!_0x34bbde)return;if(this[_0x4b36cd(0x2ff)][_0x4b36cd(0x802)](_0x55ef2f))return;this['_defeatedEnemies'][_0x4b36cd(0x7dd)](_0x966c9e),this['_defeatedEnemies'][_0x4b36cd(0x3e3)]((_0x5c99a9,_0x3cb5db)=>_0x5c99a9-_0x3cb5db);}}}},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x97c)]=function(_0x45c0d6){this['_customDamageFormula']=_0x45c0d6;},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1ea)]=function(_0x5f804b){const _0x19fd15=_0x3ffb9d,_0x4ab42c=this[_0x19fd15(0x33b)](),_0x50e53a=_0x4ab42c[_0x19fd15(0xbfc)][_0x19fd15(0xa83)];_0x4ab42c[_0x19fd15(0xbfc)][_0x19fd15(0xa83)]=this[_0x19fd15(0x720)];let _0x23d342=VisuMZ[_0x19fd15(0x80e)]['Game_Action_evalDamageFormula'][_0x19fd15(0x73d)](this,_0x5f804b);return _0x4ab42c[_0x19fd15(0xbfc)][_0x19fd15(0xa83)]=_0x50e53a,_0x23d342;},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x497)]=function(){const _0x48b3e8=_0x3ffb9d;if(this['item']()['note']['match'](/<DAMAGE STYLE:[ ](.*)>/i)){const _0x175a9d=String(RegExp['$1'])[_0x48b3e8(0x614)]()[_0x48b3e8(0x33a)]();return _0x175a9d;}return'MANUAL';},Game_Action['prototype'][_0x3ffb9d(0x9a7)]=function(_0x4f20f1){const _0x1af7b2=_0x3ffb9d,_0x599d10=DataManager[_0x1af7b2(0x690)](this[_0x1af7b2(0x33b)]()),_0xff7c3=VisuMZ[_0x1af7b2(0xbc8)][_0x599d10];try{return _0xff7c3[_0x1af7b2(0x188)][_0x1af7b2(0x73d)](this,_0x4f20f1);}catch(_0x33eae6){if($gameTemp[_0x1af7b2(0x2aa)]())console[_0x1af7b2(0x9ce)](_0x33eae6);return VisuMZ[_0x1af7b2(0x80e)][_0x1af7b2(0x651)]['call'](this);}},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3a2)]=function(_0x6137e4,_0x4a347a){const _0xc60a41=_0x3ffb9d;if(this[_0xc60a41(0x477)]())return _0x4a347a;const _0xe8b257=this[_0xc60a41(0x913)](),_0x2bffca=_0x6137e4;let _0x3a925e=[],_0xa829cd=[];_0x3a925e['push'](this[_0xc60a41(0xaee)][_0xc60a41(0x72a)],this['_armorPenetration']['arRedFlat']),_0xa829cd[_0xc60a41(0x7dd)](this[_0xc60a41(0xaee)][_0xc60a41(0x1f8)],this['_armorPenetration'][_0xc60a41(0x34e)]);const _0x3326a6=this[_0xc60a41(0x94e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x275e2f=this[_0xc60a41(0x94e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x4bf0ef=this[_0xc60a41(0x94e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x23a363=this['isPhysical']()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x3a925e=_0x3a925e['concat'](_0x2bffca[_0xc60a41(0x388)]()[_0xc60a41(0x2e9)](_0x541874=>_0x541874&&_0x541874[_0xc60a41(0x365)][_0xc60a41(0x1b7)](_0x3326a6)?Number(RegExp['$1']):0x0)),_0xa829cd=_0xa829cd[_0xc60a41(0x416)](_0x2bffca[_0xc60a41(0x388)]()['map'](_0x274acc=>_0x274acc&&_0x274acc[_0xc60a41(0x365)][_0xc60a41(0x1b7)](_0x275e2f)?Number(RegExp['$1'])/0x64:0x0)),_0x3a925e=_0x3a925e['concat'](_0xe8b257[_0xc60a41(0x388)]()[_0xc60a41(0x2e9)](_0x1b0e0f=>_0x1b0e0f&&_0x1b0e0f[_0xc60a41(0x365)]['match'](_0x4bf0ef)?Number(RegExp['$1']):0x0)),_0xa829cd=_0xa829cd[_0xc60a41(0x416)](_0xe8b257[_0xc60a41(0x388)]()[_0xc60a41(0x2e9)](_0x1d0ade=>_0x1d0ade&&_0x1d0ade[_0xc60a41(0x365)][_0xc60a41(0x1b7)](_0x23a363)?Number(RegExp['$1'])/0x64:0x0)),this[_0xc60a41(0x33b)]()[_0xc60a41(0x365)]['match'](_0x4bf0ef)&&_0x3a925e['push'](Number(RegExp['$1'])),this['item']()[_0xc60a41(0x365)]['match'](_0x23a363)&&_0xa829cd[_0xc60a41(0x7dd)](Number(RegExp['$1'])),_0x4a347a=_0x3a925e[_0xc60a41(0x47f)]((_0x70e603,_0x2d205b)=>_0x70e603-_0x2d205b,_0x4a347a),_0x4a347a>0x0&&(_0x4a347a=_0xa829cd[_0xc60a41(0x47f)]((_0x5a63c9,_0x36e2ec)=>_0x5a63c9*(0x1-_0x36e2ec),_0x4a347a)),_0x4a347a;},VisuMZ[_0x3ffb9d(0x80e)]['Game_Action_executeDamage']=Game_Action['prototype'][_0x3ffb9d(0x665)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x665)]=function(_0x55d1f7,_0x5d1ad5){const _0x396395=_0x3ffb9d;_0x5d1ad5=_0x5d1ad5*this[_0x396395(0x56f)][_0x396395(0x4ed)],_0x5d1ad5+=this[_0x396395(0x56f)][_0x396395(0x942)]*(_0x5d1ad5>=0x0?0x1:-0x1),_0x5d1ad5=this[_0x396395(0x2cc)](_0x396395(0x203),_0x55d1f7,_0x5d1ad5,![]),_0x5d1ad5=this[_0x396395(0x6f6)](_0x5d1ad5),_0x5d1ad5=Math[_0x396395(0x68f)](_0x5d1ad5),this[_0x396395(0x46c)]=_0x5d1ad5,this[_0x396395(0x52d)]=this[_0x396395(0x52d)]||0x0,this[_0x396395(0x52d)]+=_0x5d1ad5,VisuMZ[_0x396395(0x80e)][_0x396395(0x5d1)]['call'](this,_0x55d1f7,_0x5d1ad5),this[_0x396395(0x2cc)](_0x396395(0x804),_0x55d1f7,_0x5d1ad5,!![]);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6f6)]=function(_0x3a3f69){const _0x29c4bd=_0x3ffb9d;if(this[_0x29c4bd(0x1b9)]())return _0x3a3f69;return _0x3a3f69=this[_0x29c4bd(0x813)](_0x3a3f69),_0x3a3f69=this[_0x29c4bd(0x1ac)](_0x3a3f69),_0x3a3f69;},Game_Action[_0x3ffb9d(0xb66)]['isBypassDamageCap']=function(){const _0x5c3f08=_0x3ffb9d,_0x5d6c6c=/<BYPASS DAMAGE CAP>/i;if(this[_0x5c3f08(0x33b)]()[_0x5c3f08(0x365)][_0x5c3f08(0x1b7)](_0x5d6c6c))return!![];if(this['subject']()['traitObjects']()['some'](_0x1d710d=>_0x1d710d&&_0x1d710d[_0x5c3f08(0x365)][_0x5c3f08(0x1b7)](_0x5d6c6c)))return!![];return!VisuMZ[_0x5c3f08(0x80e)][_0x5c3f08(0x901)][_0x5c3f08(0xa45)][_0x5c3f08(0x266)];},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x813)]=function(_0x443889){const _0x4ac935=_0x3ffb9d;if(!VisuMZ['BattleCore'][_0x4ac935(0x901)][_0x4ac935(0xa45)][_0x4ac935(0x755)])return _0x443889;const _0x39387b=/<BYPASS SOFT DAMAGE CAP>/i;if(this[_0x4ac935(0x33b)]()[_0x4ac935(0x365)]['match'](_0x39387b))return _0x443889;if(this['subject']()[_0x4ac935(0x388)]()[_0x4ac935(0x9e3)](_0xea1e81=>_0xea1e81&&_0xea1e81[_0x4ac935(0x365)][_0x4ac935(0x1b7)](_0x39387b)))return _0x443889;const _0x246ca6=_0x443889<0x0?-0x1:0x1;_0x443889=Math[_0x4ac935(0x8f4)](_0x443889);let _0x2cde6d=this[_0x4ac935(0x913)]()[_0x4ac935(0x9ec)]();this[_0x4ac935(0x33b)]()['note']['match'](/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i)&&(_0x2cde6d+=Number(RegExp['$1'])/0x64);_0x2cde6d=_0x2cde6d[_0x4ac935(0x6cc)](0.01,0x1);const _0x2fafaa=this['getHardDamageCap'](),_0x5191dd=_0x2cde6d*_0x2fafaa;if(_0x443889>_0x5191dd&&_0x2fafaa>_0x5191dd){if('YgKKY'!==_0x4ac935(0xbf7)){_0x443889-=_0x5191dd;const _0x224720=VisuMZ[_0x4ac935(0x80e)][_0x4ac935(0x901)][_0x4ac935(0xa45)][_0x4ac935(0x231)],_0x315920=Math[_0x4ac935(0x87e)](0x1-_0x443889/((_0x2fafaa-_0x5191dd)*_0x224720+_0x443889),0.01);_0x443889*=_0x315920,_0x443889+=_0x5191dd;}else _0x44af94['command119']([_0x36f4b1]);}return _0x443889*_0x246ca6;},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4ec)]=function(){const _0x24fa7b=_0x3ffb9d;return this[_0x24fa7b(0x33b)]()[_0x24fa7b(0x365)]['match'](/<DAMAGE CAP:[ ](\d+)>/i)?Number(RegExp['$1']):this['subject']()['hardDamageCap']();},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1ac)]=function(_0x272b21){const _0x34eea6=_0x3ffb9d;console[_0x34eea6(0x9ce)](_0x272b21);let _0x2a12eb=this[_0x34eea6(0x4ec)]();return _0x272b21[_0x34eea6(0x6cc)](-_0x2a12eb,_0x2a12eb);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x971)]=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x522)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x522)]=function(_0x59d06e){const _0x3a5cc0=_0x3ffb9d;this[_0x3a5cc0(0x2cc)](_0x3a5cc0(0x3ea),_0x59d06e,0x0,!![]),VisuMZ['BattleCore'][_0x3a5cc0(0x971)][_0x3a5cc0(0x73d)](this,_0x59d06e),this['applyBattleCoreJS'](_0x3a5cc0(0x83e),_0x59d06e,this[_0x3a5cc0(0x46c)]||0x0,!![]),this[_0x3a5cc0(0x974)](_0x59d06e);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2cc)]=function(_0x3851fc,_0x15ecb9,_0x2d2cc6,_0x3fb4ec){const _0x5e8616=_0x3ffb9d;if(this['_tempBattler']||this[_0x5e8616(0xbdf)])return;_0x2d2cc6=_0x2d2cc6||0x0;const _0x5cdc21=_0x2d2cc6,_0x122562=VisuMZ['BattleCore'][_0x5e8616(0x901)][_0x5e8616(0xbd3)],_0x2d43ef=_0x3851fc[_0x5e8616(0x4a7)]('');if(_0x122562[_0x2d43ef]){_0x2d2cc6=_0x122562[_0x2d43ef][_0x5e8616(0x73d)](this,_0x2d2cc6,_0x15ecb9);if(_0x3fb4ec)_0x2d2cc6=_0x5cdc21;}let _0x71a4a4=VisuMZ[_0x5e8616(0x80e)][_0x5e8616(0xb88)](this[_0x5e8616(0x33b)](),_0x3851fc[_0x5e8616(0x4a7)](''));if(VisuMZ['BattleCore']['JS'][_0x71a4a4]){_0x2d2cc6=VisuMZ[_0x5e8616(0x80e)]['JS'][_0x71a4a4][_0x5e8616(0x73d)](this,this['subject'](),_0x15ecb9,this['item'](),_0x2d2cc6);if(_0x3fb4ec)_0x2d2cc6=_0x5cdc21;}for(const _0x11d483 of this[_0x5e8616(0x913)]()['traitObjects']()){if(!_0x11d483)continue;_0x71a4a4=VisuMZ['BattleCore'][_0x5e8616(0xb88)](_0x11d483,_0x3851fc['format'](_0x5e8616(0x3ee)));if(VisuMZ[_0x5e8616(0x80e)]['JS'][_0x71a4a4]){_0x2d2cc6=VisuMZ[_0x5e8616(0x80e)]['JS'][_0x71a4a4][_0x5e8616(0x73d)](this,this['subject'](),_0x15ecb9,_0x11d483,_0x2d2cc6);if(_0x3fb4ec)_0x2d2cc6=_0x5cdc21;}}for(const _0x3713be of _0x15ecb9[_0x5e8616(0x388)]()){if(!_0x3713be)continue;_0x71a4a4=VisuMZ[_0x5e8616(0x80e)]['createKeyJS'](_0x3713be,_0x3851fc['format'](_0x5e8616(0x3ae)));if(VisuMZ[_0x5e8616(0x80e)]['JS'][_0x71a4a4]){_0x2d2cc6=VisuMZ[_0x5e8616(0x80e)]['JS'][_0x71a4a4]['call'](this,this[_0x5e8616(0x913)](),_0x15ecb9,_0x3713be,_0x2d2cc6);if(_0x3fb4ec)_0x2d2cc6=_0x5cdc21;}}return _0x2d2cc6;},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8a9)]=function(_0x2e7785){const _0x1f4668=_0x3ffb9d,_0x5bb265=this[_0x1f4668(0x52d)]||0x0,_0x41637b=VisuMZ['BattleCore'][_0x1f4668(0x901)]['Mechanics'],_0x4ce0de=_0x2e7785[_0x1f4668(0x4a7)]('');if(_0x41637b[_0x4ce0de]){if(_0x1f4668(0xa0b)===_0x1f4668(0xa0b))_0x41637b[_0x4ce0de][_0x1f4668(0x73d)](this,_0x5bb265);else{if(_0x4be980[_0x1f4668(0x341)]()){const _0x46c683=this[_0x1f4668(0x350)]();this[_0x1f4668(0x1cb)](_0x46c683);}}}let _0x8b222a=VisuMZ[_0x1f4668(0x80e)][_0x1f4668(0xb88)](this['item'](),_0x2e7785);if(VisuMZ[_0x1f4668(0x80e)]['JS'][_0x8b222a]){if('YStyn'==='YStyn')VisuMZ[_0x1f4668(0x80e)]['JS'][_0x8b222a][_0x1f4668(0x73d)](this,this[_0x1f4668(0x913)](),this[_0x1f4668(0x913)](),this[_0x1f4668(0x33b)](),_0x5bb265);else return this[_0x1f4668(0x4c7)]>0x0;}for(const _0x39d314 of this[_0x1f4668(0x913)]()[_0x1f4668(0x388)]()){if('FvYWL'!==_0x1f4668(0xb16))return _0x1831ee[_0x1f4668(0x80e)][_0x1f4668(0x901)]['AutoBattle'][_0x1f4668(0x67b)];else{if(!_0x39d314)continue;_0x8b222a=VisuMZ[_0x1f4668(0x80e)][_0x1f4668(0xb88)](_0x39d314,_0x2e7785);if(VisuMZ[_0x1f4668(0x80e)]['JS'][_0x8b222a]){if(_0x1f4668(0x7b3)!==_0x1f4668(0x6ec))VisuMZ[_0x1f4668(0x80e)]['JS'][_0x8b222a][_0x1f4668(0x73d)](this,this[_0x1f4668(0x913)](),this[_0x1f4668(0x913)](),_0x39d314,_0x5bb265);else{_0x431f92['VisuMZ_0_CoreEngine']&&this[_0x1f4668(0x215)]()&&this['repositionEnemiesByResolution']();const _0x379ea1=_0x35f6e4[_0x1f4668(0x794)](),_0x27c025=[];for(const _0x3bb0b9 of _0x379ea1){_0x27c025[_0x1f4668(0x7dd)](new _0x3e04d3(_0x3bb0b9));}_0x27c025[_0x1f4668(0x3e3)](this['compareEnemySprite'][_0x1f4668(0x92c)](this));for(const _0x29b0c8 of _0x27c025){this[_0x1f4668(0xb18)][_0x1f4668(0x237)](_0x29b0c8);}this['_enemySprites']=_0x27c025;}}}}},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x21f)]=function(){const _0x417513=_0x3ffb9d;return VisuMZ[_0x417513(0x80e)][_0x417513(0x901)][_0x417513(0xbd3)]['CalcActionSpeedJS'][_0x417513(0x73d)](this);},Game_Action[_0x3ffb9d(0xb66)]['allowRandomSpeed']=function(){const _0x46798d=_0x3ffb9d;return VisuMZ['BattleCore'][_0x46798d(0x901)][_0x46798d(0xbd3)]['AllowRandomSpeed'];},Game_Action[_0x3ffb9d(0xb66)]['isCustomBattleScope']=function(){const _0x11f7f0=_0x3ffb9d;return this[_0x11f7f0(0x33b)]()[_0x11f7f0(0x365)][_0x11f7f0(0x1b7)](/<JS TARGETS>/i);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1f5)]=function(){const _0x28acd3=_0x3ffb9d;if(!this[_0x28acd3(0x8c3)]&&this[_0x28acd3(0x913)]()['isConfused']())return![];if(this[_0x28acd3(0x672)]())return!![];return typeof this[_0x28acd3(0x33b)]()[_0x28acd3(0x983)]===_0x28acd3(0x866);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x8af)]=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x623)],Game_Action['prototype'][_0x3ffb9d(0x623)]=function(){const _0x4cebb8=_0x3ffb9d;if(this[_0x4cebb8(0x1f5)]()&&!this[_0x4cebb8(0x672)]()){if(_0x4cebb8(0x7c2)!==_0x4cebb8(0x845))return this[_0x4cebb8(0xc34)]();else{if(this[_0x4cebb8(0x991)]()===_0x4cebb8(0x94f))return this[_0x4cebb8(0xc16)]();else return this[_0x4cebb8(0x655)]()?this[_0x4cebb8(0x550)]():_0x31a380['BattleCore']['Scene_Battle_skillWindowRect']['call'](this);}}else{if('dlUQe'==='UVFBO')this[_0x4cebb8(0x3ff)]['setFrame'](0x0,0x0,this[_0x4cebb8(0x3ff)][_0x4cebb8(0x7d6)],this[_0x4cebb8(0xb13)]);else return VisuMZ[_0x4cebb8(0x80e)][_0x4cebb8(0x8af)][_0x4cebb8(0x73d)](this);}},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc34)]=function(){const _0x56e040=_0x3ffb9d,_0x3317f4=this['item']()[_0x56e040(0x983)];return _0x3317f4[_0x56e040(0x1b7)](/(?:ENEMY|ENEMIES|FOE|FOES)/i);},VisuMZ['BattleCore'][_0x3ffb9d(0x561)]=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x876)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x876)]=function(){const _0x564948=_0x3ffb9d;return this['isBattleCoreTargetScope']()&&!this[_0x564948(0x672)]()?this[_0x564948(0x8ad)]():VisuMZ['BattleCore'][_0x564948(0x561)][_0x564948(0x73d)](this);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8ad)]=function(){const _0x1bfffd=_0x3ffb9d,_0x183bd4=this['item']()[_0x1bfffd(0x983)];return _0x183bd4[_0x1bfffd(0x1b7)](/(?:ALLY|ALLIES|FRIEND|FRIENDS)/i);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x807)]=Game_Action[_0x3ffb9d(0xb66)]['isForRandom'],Game_Action['prototype']['isForRandom']=function(){const _0x327fcf=_0x3ffb9d;return this[_0x327fcf(0x1f5)]()&&!this['isCustomBattleScope']()?_0x327fcf(0xc06)==='Wzmup'?this[_0x327fcf(0xb1a)]():![]:_0x327fcf(0x7b9)!==_0x327fcf(0x349)?VisuMZ[_0x327fcf(0x80e)]['Game_Action_isForRandom'][_0x327fcf(0x73d)](this):'iconText';},Game_Action[_0x3ffb9d(0xb66)]['isForRandomBattleCore']=function(){const _0x1830ea=_0x3ffb9d,_0x284b2a=this[_0x1830ea(0x33b)]()[_0x1830ea(0x983)];return _0x284b2a[_0x1830ea(0x1b7)](/(?:RAND|RANDOM)/i);},VisuMZ['BattleCore']['Game_Action_needsSelection']=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x34d)],Game_Action[_0x3ffb9d(0xb66)]['needsSelection']=function(){const _0x288eba=_0x3ffb9d;if(this[_0x288eba(0x1f5)]()&&!this[_0x288eba(0x672)]()){if('PnIjw'!==_0x288eba(0x3f9))return this[_0x288eba(0xc30)]();else{if(!_0x28ee56[_0x288eba(0x2aa)]())return;_0x37a03a[_0x288eba(0x9ce)](this[_0x288eba(0x513)]['map'](_0xadfdca=>_0xadfdca[_0x288eba(0x453)])[_0x288eba(0x7ee)]('\x0a'));}}else return VisuMZ['BattleCore']['Game_Action_needsSelection'][_0x288eba(0x73d)](this);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc30)]=function(){const _0xe433d6=_0x3ffb9d,_0x5a5847=this[_0xe433d6(0x33b)]()[_0xe433d6(0x983)];if(_0x5a5847[_0xe433d6(0x1b7)](/RANDOM/i))return![];if(_0x5a5847[_0xe433d6(0x1b7)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS)/i))return![];if(_0x5a5847[_0xe433d6(0x1b7)](/ALL (?:ENEMY|ENEMIES|FOE|FOES)/i))return![];return VisuMZ[_0xe433d6(0x80e)][_0xe433d6(0x84f)][_0xe433d6(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x9f8)]=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x425)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x425)]=function(){const _0x258e9a=_0x3ffb9d;let _0x509523=[];return this[_0x258e9a(0x1f5)]()?_0x509523=this[_0x258e9a(0x3d7)]():_0x258e9a(0x1be)===_0x258e9a(0x1be)?_0x509523=VisuMZ['BattleCore'][_0x258e9a(0x9f8)][_0x258e9a(0x73d)](this):(_0x4e2ca3=_0x343aef[_0x258e9a(0x657)](_0xf831b6),_0x37f48d[_0x258e9a(0x80e)][_0x258e9a(0x200)][_0x258e9a(0x73d)](this,_0xb0eb9a,_0x1332f6,_0x107389),_0x35648e[_0x258e9a(0x800)]&&this[_0x258e9a(0x7d4)](),this[_0x258e9a(0x9cb)](),this[_0x258e9a(0x406)](),_0x32cf2c[_0x258e9a(0x800)]&&this[_0x258e9a(0xbcb)]()),_0x509523=this['applyTargetFilters'](_0x509523),_0x509523;},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3d7)]=function(){const _0x108ab3=_0x3ffb9d;let _0x4cccee=[];const _0x2b114d=String(this[_0x108ab3(0x33b)]()[_0x108ab3(0x983)]),_0x80dab8=VisuMZ[_0x108ab3(0x80e)][_0x108ab3(0xb88)](this['item'](),_0x108ab3(0x692));if(VisuMZ[_0x108ab3(0x80e)]['JS'][_0x80dab8]){if(_0x108ab3(0x914)!==_0x108ab3(0x1d7)){_0x4cccee=VisuMZ['BattleCore'][_0x108ab3(0x9f8)][_0x108ab3(0x73d)](this);const _0x19983e=VisuMZ[_0x108ab3(0x80e)][_0x108ab3(0xb88)](this['item'](),_0x108ab3(0x692));return _0x4cccee=VisuMZ['BattleCore']['JS'][_0x19983e][_0x108ab3(0x73d)](this,this[_0x108ab3(0x913)](),_0x4cccee),this['repeatTargets'](_0x4cccee);}else this[_0x108ab3(0x601)]=new _0x4bd0d4(),this[_0x108ab3(0x601)][_0x108ab3(0x6a0)]=_0x44d968[_0x108ab3(0x56b)](_0x108ab3(0x2bc)),this['_shadowSprite'][_0x108ab3(0x6a0)][_0x108ab3(0x6f0)]=_0x261662[_0x108ab3(0x80e)]['Settings']['Actor'][_0x108ab3(0x27e)],this[_0x108ab3(0x601)][_0x108ab3(0xab2)]['x']=0.5,this[_0x108ab3(0x601)]['anchor']['y']=0.5,this[_0x108ab3(0x601)]['y']=-0x2,this[_0x108ab3(0x601)][_0x108ab3(0x54f)]=![],this[_0x108ab3(0x237)](this[_0x108ab3(0x601)]);}if(_0x2b114d['match'](/(\d+) RANDOM ANY/i)){if(_0x108ab3(0x214)!==_0x108ab3(0x214))this[_0x108ab3(0x627)]='turn';else{let _0x16afdf=Number(RegExp['$1']);while(_0x16afdf--){if(_0x108ab3(0x750)!==_0x108ab3(0x750)){const _0x56168c=_0x580e67[_0x108ab3(0x80e)][_0x108ab3(0x901)][_0x108ab3(0xa45)],_0x2ec26e=new _0x55728d();_0x2ec26e[_0x108ab3(0x62c)]=_0x56168c[_0x108ab3(0x564)],this[_0x108ab3(0x22c)](_0x2ec26e),_0x2ec26e[_0x108ab3(0x2eb)](this[_0x108ab3(0x8fa)]),_0x2ec26e[_0x108ab3(0x26e)](this['_battler']),this[_0x108ab3(0xb1f)](_0x2ec26e);}else{const _0x29c251=Math['randomInt'](0x2)===0x0?this[_0x108ab3(0x943)]():this[_0x108ab3(0x432)]();_0x4cccee[_0x108ab3(0x7dd)](_0x29c251[_0x108ab3(0xbf1)]());}}return this['repeatTargets'](_0x4cccee);}}if(_0x2b114d[_0x108ab3(0x1b7)](/(\d+) RANDOM (?:ENEMY|ENEMIES|FOE|FOES)/i)){if(_0x108ab3(0x2e3)===_0x108ab3(0xb29)){if(!this[_0x108ab3(0x91c)])return;this['_lineHeight']=this[_0x108ab3(0x50a)]||_0x5bc703['prototype']['lineHeight'](),this['x']=this[_0x108ab3(0x91c)][_0x108ab3(0x904)],this['y']=this[_0x108ab3(0x91c)][_0x108ab3(0x531)]-this[_0x108ab3(0x50a)]*0.5;const _0x50fb5b=_0x2e38c7[_0x108ab3(0x80e)]['Settings']['Enemy'];this['x']+=_0x50fb5b[_0x108ab3(0x457)]||0x0,this['y']+=_0x50fb5b[_0x108ab3(0x7ad)]||0x0;}else{let _0x1683c3=Number(RegExp['$1']);while(_0x1683c3--){_0x4cccee['push'](this[_0x108ab3(0x943)]()[_0x108ab3(0xbf1)]());}return this[_0x108ab3(0xa95)](_0x4cccee);}}if(_0x2b114d['match'](/(\d+) RANDOM (?:ALLY|ALLIES|FRIEND|FRIENDS)/i)){let _0x2587d8=Number(RegExp['$1']);while(_0x2587d8--){_0x108ab3(0x5c5)===_0x108ab3(0x629)?_0x5cb7db[_0x108ab3(0xafd)]=![]:_0x4cccee['push'](this['friendsUnit']()[_0x108ab3(0xbf1)]());}return this[_0x108ab3(0xa95)](_0x4cccee);}if(_0x2b114d[_0x108ab3(0x1b7)](/ALL (?:ALLY|ALLIES|FRIEND|FRIENDS) (?:BUT|EXCEPT) (?:USER|SELF)/i)){if('rtOHC'!==_0x108ab3(0xb74))this[_0x108ab3(0x8d7)]();else return _0x4cccee[_0x108ab3(0x7dd)](...this[_0x108ab3(0x432)]()[_0x108ab3(0x735)]()['filter'](_0x8edab9=>_0x8edab9!==this['subject']())),this['repeatTargets'](_0x4cccee);}return VisuMZ[_0x108ab3(0x80e)][_0x108ab3(0x9f8)]['call'](this);},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x652)]=function(_0x55ca4f){const _0x582c62=_0x3ffb9d,_0x3e6210=[];for(let _0x558c0e=0x0;_0x558c0e<this['numTargets']();_0x558c0e++){if(_0x582c62(0x2e1)!==_0x582c62(0x825))_0x3e6210[_0x582c62(0x7dd)](_0x55ca4f['trueRandomTarget']());else return _0xa828f8[_0x582c62(0x80e)][_0x582c62(0x901)][_0x582c62(0x5e5)][_0x582c62(0x643)]?this[_0x582c62(0x8fa)][_0x582c62(0x4d8)]():_0x32c8f5[_0x582c62(0x947)][_0x582c62(0xadb)]&&_0x33274c[_0x582c62(0x947)][_0x582c62(0xadb)][_0x582c62(0x85c)]&&_0x1dcddb[_0x582c62(0x947)][_0x582c62(0xadb)][_0x582c62(0x24f)][_0x582c62(0x802)](this[_0x582c62(0x8fa)]);}return _0x3e6210;},Game_Action[_0x3ffb9d(0xb66)]['applyTargetFilters']=function(_0x4ef948){const _0x2804b8=_0x3ffb9d;if(!this['item']())return _0x4ef948;const _0xb65aae=this['item']()[_0x2804b8(0x365)];return _0xb65aae[_0x2804b8(0x1b7)](/(?:BUT|EXCEPT) (?:USER|SELF)/i)&&_0x4ef948[_0x2804b8(0x7bc)](this[_0x2804b8(0x913)]()),_0x4ef948;},VisuMZ[_0x3ffb9d(0x80e)]['Game_Action_itemEffectAddAttackState']=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x815)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x815)]=function(_0x1edf65,_0x3b05d9){const _0x33bf09=_0x3ffb9d;VisuMZ['BattleCore'][_0x33bf09(0x85f)]['call'](this,_0x1edf65,_0x3b05d9);if(!_0x1edf65[_0x33bf09(0x469)]())return;for(const _0x116654 of this[_0x33bf09(0x913)]()['attackStates']()){if(_0x33bf09(0x897)!=='jUtNh'){if(_0x116654===_0x1edf65[_0x33bf09(0x597)]()){let _0x15b32f=_0x3b05d9['value1'];_0x15b32f*=_0x1edf65[_0x33bf09(0x2cb)](_0x116654),_0x15b32f*=this['subject']()[_0x33bf09(0x566)](_0x116654),_0x15b32f*=this[_0x33bf09(0xaa1)](_0x1edf65),Math['random']()<_0x15b32f&&('opGro'===_0x33bf09(0x609)?(_0x1edf65[_0x33bf09(0x34c)]=!![],this[_0x33bf09(0x612)](_0x1edf65)):(_0x3ea162=_0x255b81[_0x33bf09(0x9bd)](_0x8e4318['random']()*(_0x5cd217+0x1)),_0xe15c58=_0x2ddd58[_0x47dbb3],_0x238263[_0x55283e]=_0x161ef1[_0x9e7787],_0x220759[_0x1ba6c5]=_0x5f051e));}}else _0x4745e1[_0x33bf09(0xb66)][_0x33bf09(0xacd)][_0x33bf09(0x73d)](this),this[_0x33bf09(0xbb9)]();}},VisuMZ['BattleCore'][_0x3ffb9d(0xa58)]=Game_Action['prototype'][_0x3ffb9d(0x46e)],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x46e)]=function(_0x802f55,_0x3a1f46){const _0x448ccf=_0x3ffb9d;VisuMZ[_0x448ccf(0x80e)][_0x448ccf(0xa58)][_0x448ccf(0x73d)](this,_0x802f55,_0x3a1f46);if(!_0x802f55[_0x448ccf(0x469)]())return;if(_0x3a1f46[_0x448ccf(0x8e6)]!==_0x802f55[_0x448ccf(0x597)]())return;let _0x428dda=_0x3a1f46[_0x448ccf(0x2fd)];if(!this['isCertainHit']()){if('TkvRK'!==_0x448ccf(0xa62))_0x428dda*=_0x802f55[_0x448ccf(0x2cb)](_0x3a1f46['dataId']),_0x428dda*=this[_0x448ccf(0xaa1)](_0x802f55);else{if(this[_0x448ccf(0x4fc)]<=0x0)return;const _0x2b9ffc=this[_0x448ccf(0x4fc)],_0x48224f=this[_0x448ccf(0x36d)],_0x33fa98=this[_0x448ccf(0x478)];_0x3d31de[_0x448ccf(0x820)]?(this[_0x448ccf(0xb48)]=this[_0x448ccf(0xb7d)](this[_0x448ccf(0xb48)],this[_0x448ccf(0xaf8)],_0x2b9ffc,_0x48224f,_0x33fa98),this[_0x448ccf(0xb27)]=this[_0x448ccf(0xb7d)](this[_0x448ccf(0xb27)],this[_0x448ccf(0x381)],_0x2b9ffc,_0x48224f,_0x33fa98)):(this[_0x448ccf(0xb48)]=(this[_0x448ccf(0xb48)]*(_0x2b9ffc-0x1)+this[_0x448ccf(0xaf8)])/_0x2b9ffc,this[_0x448ccf(0xb27)]=(this[_0x448ccf(0xb27)]*(_0x2b9ffc-0x1)+this[_0x448ccf(0x381)])/_0x2b9ffc);this[_0x448ccf(0x4fc)]--;if(this['_homeDuration']<=0x0)this[_0x448ccf(0x38b)]();}}if(Math[_0x448ccf(0xbdb)]()<_0x428dda){if('dvXBf'!==_0x448ccf(0x47e))_0x802f55[_0x448ccf(0x34c)]=!![],this[_0x448ccf(0x612)](_0x802f55);else return 0x1;}},VisuMZ['BattleCore'][_0x3ffb9d(0x1eb)]=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x734)],Game_Action['prototype'][_0x3ffb9d(0x734)]=function(){const _0x5e8b7f=_0x3ffb9d;VisuMZ[_0x5e8b7f(0x80e)][_0x5e8b7f(0x1eb)]['call'](this),this[_0x5e8b7f(0x956)](),this['resetResultSwitches']();},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x956)]=function(){const _0x709731=_0x3ffb9d;if(!SceneManager[_0x709731(0x341)]())return;const _0x23e94e=/<COMMON (?:EVENT|EVENTS):[ ](.*)>/gi,_0x23faee=this['item']()[_0x709731(0x365)][_0x709731(0x1b7)](_0x23e94e);if(_0x23faee)for(const _0x47aa4a of _0x23faee){if(!_0x47aa4a)continue;_0x47aa4a[_0x709731(0x1b7)](_0x23e94e);const _0x42431f=String(RegExp['$1'])[_0x709731(0x83d)](',')[_0x709731(0x2e9)](_0x2ea2bb=>String(_0x2ea2bb)['trim']()),_0x3d424c=_0x42431f[_0x709731(0x2e9)](_0x4a1d6a=>DataManager['getCommonEventIdWithName'](_0x4a1d6a));for(const _0x18a53a of _0x3d424c){const _0x35b8ef=$dataCommonEvents[_0x18a53a];_0x35b8ef&&$gameTemp[_0x709731(0x9fc)](_0x18a53a);}}},DataManager[_0x3ffb9d(0x71d)]=function(_0x57ad67){const _0x4aa2ff=_0x3ffb9d;_0x57ad67=_0x57ad67[_0x4aa2ff(0x614)]()[_0x4aa2ff(0x33a)](),this['_commonEventIDs']=this[_0x4aa2ff(0x302)]||{};if(this[_0x4aa2ff(0x302)][_0x57ad67])return this[_0x4aa2ff(0x302)][_0x57ad67];for(const _0x26914f of $dataCommonEvents){if(!_0x26914f)continue;let _0x5c84d9=_0x26914f[_0x4aa2ff(0x453)];_0x5c84d9=_0x5c84d9[_0x4aa2ff(0x515)](/\x1I\[(\d+)\]/gi,''),_0x5c84d9=_0x5c84d9[_0x4aa2ff(0x515)](/\\I\[(\d+)\]/gi,''),this['_commonEventIDs'][_0x5c84d9[_0x4aa2ff(0x614)]()['trim']()]=_0x26914f['id'];}return this[_0x4aa2ff(0x302)][_0x57ad67]||0x0;},Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa07)]=function(){const _0x763ff4=_0x3ffb9d;if(!SceneManager[_0x763ff4(0x341)]())return;const _0x22bfef=VisuMZ[_0x763ff4(0x80e)][_0x763ff4(0x901)][_0x763ff4(0xbd3)];_0x22bfef[_0x763ff4(0xb05)]&&$gameSwitches[_0x763ff4(0x458)](_0x22bfef[_0x763ff4(0xb05)],![]);_0x22bfef[_0x763ff4(0xadd)]&&$gameSwitches[_0x763ff4(0x458)](_0x22bfef[_0x763ff4(0xadd)],![]);_0x22bfef['VariableDmg']&&$gameVariables[_0x763ff4(0x458)](_0x22bfef['VariableDmg'],0x0);if(_0x22bfef[_0x763ff4(0x46a)]){if(_0x763ff4(0x6b7)!==_0x763ff4(0xa3c))$gameVariables[_0x763ff4(0x458)](_0x22bfef[_0x763ff4(0x46a)],0x0);else{const _0x55fd87=_0x201c35['getStypeIdWithName'](_0x184700['$1']);this['addSkillTypeCommand'](_0x55fd87);}}},Game_Action[_0x3ffb9d(0xb66)]['applyResultSwitches']=function(_0x15668d){const _0xc15ae6=_0x3ffb9d;if(!SceneManager[_0xc15ae6(0x341)]())return;if(!_0x15668d)return;const _0x4554f6=_0x15668d[_0xc15ae6(0x436)](),_0x52dbb3=VisuMZ[_0xc15ae6(0x80e)][_0xc15ae6(0x901)]['Mechanics'];_0x52dbb3[_0xc15ae6(0xb05)]&&_0x4554f6[_0xc15ae6(0x54d)]&&$gameSwitches['setValue'](_0x52dbb3[_0xc15ae6(0xb05)],!![]);_0x52dbb3['SwitchMissEvade']&&(_0x4554f6[_0xc15ae6(0x278)]||_0x4554f6[_0xc15ae6(0x252)])&&$gameSwitches[_0xc15ae6(0x458)](_0x52dbb3['SwitchMissEvade'],!![]);if(_0x52dbb3['VariableDmg']){if(_0xc15ae6(0x9ff)==='nOvSF')return _0x568316['filter'](_0x65ca98=>_0x65ca98['isAlive']()&&_0x65ca98!==_0xec3bf5);else{let _0x433dc1=$gameVariables[_0xc15ae6(0x338)](_0x52dbb3['VariableDmg']);_0x4554f6[_0xc15ae6(0xa10)]>0x0&&(_0xc15ae6(0x4f3)!==_0xc15ae6(0x4f3)?(_0x2854a6['BattleCore'][_0xc15ae6(0x901)]['HpGauge'][_0xc15ae6(0xa24)]&&this[_0xc15ae6(0x19a)](),_0x597460['BattleCore'][_0xc15ae6(0x414)][_0xc15ae6(0x73d)](this)):_0x433dc1+=Math['abs'](_0x4554f6[_0xc15ae6(0xa10)])),$gameVariables[_0xc15ae6(0x458)](_0x52dbb3['VariableDmg'],_0x433dc1);}}if(_0x52dbb3['VariableHeal']){let _0x82e167=$gameVariables[_0xc15ae6(0x338)](_0x52dbb3[_0xc15ae6(0x46a)]);_0x4554f6[_0xc15ae6(0xa10)]<0x0&&(_0xc15ae6(0x1cc)===_0xc15ae6(0xb92)?_0x4a641c[_0xc15ae6(0x82b)]():_0x82e167+=Math['abs'](_0x4554f6['hpDamage'])),$gameVariables[_0xc15ae6(0x458)](_0x52dbb3[_0xc15ae6(0x46a)],_0x82e167);}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x23d)]=Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa0c)],Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa0c)]=function(){const _0x4bffc8=_0x3ffb9d;VisuMZ[_0x4bffc8(0x80e)][_0x4bffc8(0x23d)][_0x4bffc8(0x73d)](this),this[_0x4bffc8(0x704)]();},Game_BattlerBase['prototype']['initMembersBattleCore']=function(){const _0x558b58=_0x3ffb9d;this[_0x558b58(0x4df)]=![];},VisuMZ['BattleCore']['Game_BattlerBase_refresh']=Game_BattlerBase['prototype'][_0x3ffb9d(0x96b)],Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x96b)]=function(){const _0x30b6bb=_0x3ffb9d;this[_0x30b6bb(0x6d7)]={},VisuMZ[_0x30b6bb(0x80e)][_0x30b6bb(0x90f)][_0x30b6bb(0x73d)](this);},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x24e)]=function(_0x3fd087){const _0x38cbe3=_0x3ffb9d;return this[_0x38cbe3(0x6d7)]=this[_0x38cbe3(0x6d7)]||{},this[_0x38cbe3(0x6d7)][_0x3fd087]!==undefined;},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2a5)]=function(){const _0x13453b=_0x3ffb9d;if(this['_cache'][_0x13453b(0x2a5)]!==undefined)return this[_0x13453b(0x6d7)][_0x13453b(0x2a5)];const _0x38b78e=/<DAMAGE CAP:[ ](\d+)>/i,_0x8a732f=this[_0x13453b(0x388)]()[_0x13453b(0x2e9)](_0x2a286f=>_0x2a286f&&_0x2a286f[_0x13453b(0x365)][_0x13453b(0x1b7)](_0x38b78e)?Number(RegExp['$1']):0x0);let _0x8731cd=_0x8a732f[_0x13453b(0x205)]>0x0?Math[_0x13453b(0x87e)](..._0x8a732f):0x0;if(_0x8731cd<=0x0)_0x8731cd=VisuMZ[_0x13453b(0x80e)]['Settings'][_0x13453b(0xa45)][_0x13453b(0xc0d)];return this[_0x13453b(0x6d7)][_0x13453b(0x2a5)]=_0x8731cd,this['_cache']['hardDamageCap'];},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9ec)]=function(){const _0x468328=_0x3ffb9d;if(this[_0x468328(0x6d7)]['softDamageCap']!==undefined)return this[_0x468328(0x6d7)][_0x468328(0x1a0)];let _0x26d544=VisuMZ[_0x468328(0x80e)]['Settings'][_0x468328(0xa45)][_0x468328(0xb3c)];const _0x489f40=/<SOFT DAMAGE CAP:[ ]([\+\-]\d+)([%％])>/i,_0x5aba74=this[_0x468328(0x388)]()[_0x468328(0x2e9)](_0x34b5c3=>_0x34b5c3&&_0x34b5c3[_0x468328(0x365)][_0x468328(0x1b7)](_0x489f40)?Number(RegExp['$1'])/0x64:0x0);return _0x26d544=_0x5aba74[_0x468328(0x47f)]((_0x3fd0b0,_0x1b75fb)=>_0x3fd0b0+_0x1b75fb,_0x26d544),this[_0x468328(0x6d7)][_0x468328(0x1a0)]=_0x26d544,this[_0x468328(0x6d7)][_0x468328(0x1a0)][_0x468328(0x6cc)](0.01,0x1);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x72b)]=Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4b5)],Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4b5)]=function(){const _0x34cead=_0x3ffb9d;VisuMZ['BattleCore'][_0x34cead(0x72b)][_0x34cead(0x73d)](this),SceneManager[_0x34cead(0x341)]()&&('bRcBw'===_0x34cead(0x882)?this[_0x34cead(0x42c)]('dead'):this[_0x34cead(0x430)]=0x0);},Game_BattlerBase['prototype'][_0x3ffb9d(0x491)]=function(){const _0x1e0acc=_0x3ffb9d;if(!SceneManager[_0x1e0acc(0x341)]())return null;if(!SceneManager['_scene'][_0x1e0acc(0x9da)])return null;return SceneManager[_0x1e0acc(0x947)][_0x1e0acc(0x9da)][_0x1e0acc(0x3d1)](this);},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7d5)]=function(){const _0x461db2=_0x3ffb9d;return VisuMZ[_0x461db2(0x80e)][_0x461db2(0x901)][_0x461db2(0x772)]['AnchorX'];},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x572)]=function(){const _0x47b959=_0x3ffb9d;return VisuMZ[_0x47b959(0x80e)]['Settings']['Actor'][_0x47b959(0x451)];},Game_BattlerBase['prototype'][_0x3ffb9d(0x506)]=function(){const _0x28db96=_0x3ffb9d;return this[_0x28db96(0x2bb)]&&this[_0x28db96(0x2bb)]()?VisuMZ[_0x28db96(0x80e)]['Settings'][_0x28db96(0x772)]['Shadow']:VisuMZ[_0x28db96(0x80e)][_0x28db96(0x901)][_0x28db96(0x5e5)]['Shadow'];},Game_BattlerBase['prototype'][_0x3ffb9d(0x23c)]=function(){return!![];},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x881)]=function(){return 0x0;},Game_BattlerBase['prototype']['battleUIOffsetY']=function(){return 0x0;},Game_BattlerBase['prototype'][_0x3ffb9d(0xaa9)]=function(_0x4c7e42){const _0x12d020=_0x3ffb9d;if(!_0x4c7e42)return 0x0;let _0x373cee=0x0;const _0xcccf7a=_0x4c7e42['note'];return _0xcccf7a['match'](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x373cee+=Number(RegExp['$1'])),_0xcccf7a[_0x12d020(0x1b7)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x373cee+=Number(RegExp['$1'])),_0x373cee;},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1a6)]=function(_0x2c0f28){const _0x450c6c=_0x3ffb9d;if(!_0x2c0f28)return 0x0;let _0xaa99da=0x0;const _0x23bc21=_0x2c0f28[_0x450c6c(0x365)];return _0x23bc21[_0x450c6c(0x1b7)](/<BATTLE UI OFFSET Y:[ ]([\+\-]\d+)>/i)&&('JqgqP'!=='uOyot'?_0xaa99da+=Number(RegExp['$1']):_0x5b746a+=_0x875a62/0x2),_0x23bc21[_0x450c6c(0x1b7)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0xaa99da+=Number(RegExp['$2'])),_0xaa99da;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x19b)]=Game_BattlerBase[_0x3ffb9d(0xb66)]['isStateResist'],Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x682)]=function(_0x5b3fd6){const _0x3e082f=_0x3ffb9d;if(_0x5b3fd6===this[_0x3e082f(0x597)]()&&this['isImmortal']())return!![];return VisuMZ['BattleCore'][_0x3e082f(0x19b)][_0x3e082f(0x73d)](this,_0x5b3fd6);},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x469)]=function(){const _0x377592=_0x3ffb9d;return this[_0x377592(0x4df)];},Game_BattlerBase['prototype'][_0x3ffb9d(0xafb)]=function(_0x3ca733){const _0x2897ea=_0x3ffb9d;if(_0x3ca733){if('xLXre'!=='xLXre'){if(this['_angleDuration']<=0x0)return;const _0x350c0a=this[_0x2897ea(0x745)],_0x505898=this['_angleWholeDuration'],_0x5128ba=this[_0x2897ea(0x490)];_0x60a769['VisuMZ_0_CoreEngine']?this[_0x2897ea(0x911)]=this[_0x2897ea(0xb7d)](this[_0x2897ea(0x911)],this['_targetAngle'],_0x350c0a,_0x505898,_0x5128ba):this['_currentAngle']=(this[_0x2897ea(0x911)]*(_0x350c0a-0x1)+this[_0x2897ea(0x71f)])/_0x350c0a;this['_angleDuration']--;if(this['_angleDuration']<=0x0)this[_0x2897ea(0x989)]();}else this['addImmortal']();}else this[_0x2897ea(0x37d)]();},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x259)]=function(){const _0x110010=_0x3ffb9d;if(this['isDead']())return;this['_immortal']=!![],this[_0x110010(0x34c)]=![];},Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x37d)]=function(){const _0x8ad319=_0x3ffb9d,_0x5219a6=this[_0x8ad319(0x3ad)]();this[_0x8ad319(0x4df)]=![],_0x5219a6&&this['_deathStateApplied']&&this[_0x8ad319(0x4b5)](),this['_deathStateApplied']=![],this[_0x8ad319(0x96b)](),this['isDead']()&&_0x5219a6&&(this[_0x8ad319(0x4b3)](),this[_0x8ad319(0x884)]());},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2c9)]=Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x25e)],Game_Action['prototype'][_0x3ffb9d(0x25e)]=function(){const _0x548227=_0x3ffb9d;if(this[_0x548227(0x33b)]()){if('MMvdi'===_0x548227(0x700))this[_0x548227(0x42c)](_0x548227(0xc13));else return VisuMZ['BattleCore'][_0x548227(0x2c9)][_0x548227(0x73d)](this);}else return 0x0;},VisuMZ[_0x3ffb9d(0x80e)]['Game_Action_setAttack']=Game_Action[_0x3ffb9d(0xb66)]['setAttack'],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa61)]=function(){const _0x1ff3a4=_0x3ffb9d;if(this[_0x1ff3a4(0x913)]()&&this[_0x1ff3a4(0x913)]()[_0x1ff3a4(0x2f8)]()){if(_0x1ff3a4(0x9be)!=='uxfnK')return _0x41a2c9[_0x1ff3a4(0x80e)][_0x1ff3a4(0x901)][_0x1ff3a4(0x772)][_0x1ff3a4(0x339)];else VisuMZ[_0x1ff3a4(0x80e)][_0x1ff3a4(0x5c1)][_0x1ff3a4(0x73d)](this);}else this[_0x1ff3a4(0x75e)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x57d)]=Game_BattlerBase[_0x3ffb9d(0xb66)]['canAttack'],Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2f8)]=function(){const _0x125c34=_0x3ffb9d;if(!this[_0x125c34(0xc38)]())return![];return VisuMZ[_0x125c34(0x80e)][_0x125c34(0x57d)][_0x125c34(0x73d)](this);},Game_BattlerBase['prototype'][_0x3ffb9d(0xc38)]=function(){const _0x2af9aa=_0x3ffb9d;for(const _0x3f3263 of this['traitObjects']()){if(_0x2af9aa(0x994)===_0x2af9aa(0x65c))return this['_enemy']['allowCollapse']();else{if(!_0x3f3263)continue;if(_0x3f3263[_0x2af9aa(0x365)]['match'](/<(?:ATTACK SEAL|SEAL ATTACK)>/i))return![];}}return!![];},VisuMZ[_0x3ffb9d(0x80e)]['Game_Action_setGuard']=Game_Action[_0x3ffb9d(0xb66)]['setGuard'],Game_Action[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1b4)]=function(){const _0x50c77d=_0x3ffb9d;this[_0x50c77d(0x913)]()[_0x50c77d(0x78d)]()&&VisuMZ[_0x50c77d(0x80e)][_0x50c77d(0x961)][_0x50c77d(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xbf6)]=Game_BattlerBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x78d)],Game_BattlerBase[_0x3ffb9d(0xb66)]['canGuard']=function(){const _0x55264b=_0x3ffb9d;if(!this[_0x55264b(0x422)]())return![];return VisuMZ[_0x55264b(0x80e)][_0x55264b(0xbf6)][_0x55264b(0x73d)](this);},Game_BattlerBase['prototype'][_0x3ffb9d(0x422)]=function(){const _0x3fe88c=_0x3ffb9d;for(const _0x2d3513 of this[_0x3fe88c(0x388)]()){if(_0x3fe88c(0x9cc)!==_0x3fe88c(0x9cc))_0x1cb655=_0x27948a;else{if(!_0x2d3513)continue;if(_0x2d3513['note'][_0x3fe88c(0x1b7)](/<(?:GUARD SEAL|SEAL GUARD)>/i))return![];}}return!![];},Game_BattlerBase['prototype']['canUseItemCommand']=function(){const _0x4cf3ab=_0x3ffb9d;for(const _0x1d2ee6 of this['traitObjects']()){if(!_0x1d2ee6)continue;if(_0x1d2ee6[_0x4cf3ab(0x365)]['match'](/<(?:ITEM SEAL|SEAL ITEM|SEAL ITEMS)>/i))return![];}return!![];},Game_Battler['prototype'][_0x3ffb9d(0x709)]=function(){const _0x28bd93=_0x3ffb9d;return VisuMZ[_0x28bd93(0x80e)][_0x28bd93(0x901)][_0x28bd93(0xbd3)]['AllowRandomSpeed'];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x621)]=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7e7)],Game_Battler['prototype']['regenerateAll']=function(){const _0x18def6=_0x3ffb9d;if(SceneManager[_0x18def6(0x341)]()){if(_0x18def6(0xa44)===_0x18def6(0xa44)){if(BattleManager[_0x18def6(0x4e4)]()){if(_0x18def6(0x75d)!==_0x18def6(0x75d))return _0x54475c;else{if(this[_0x18def6(0x52a)]()<=0x0)return;}}else{if($gameTroop['turnCount']()<=0x0)return;}}else{if(this['getBattlePortrait']()!=='')return this[_0x18def6(0x21c)]();else{if(_0x5cb6d5[_0x18def6(0x9b8)]&&this['getMenuImage']()!=='')return this['getMenuImage']();}return'';}}if(SceneManager[_0x18def6(0x341)]()&&BattleManager['isTpb']()&&this['_lastRegenFrameCount']===Graphics['frameCount']){if(_0x18def6(0x9f9)===_0x18def6(0xc2f)){if(_0x34d873[_0x18def6(0x55c)])return![];return _0x1863e8['BattleCore'][_0x18def6(0x295)][_0x18def6(0x73d)](this);}else return;}this['_lastRegenFrameCount']=Graphics[_0x18def6(0x45f)],SceneManager[_0x18def6(0x341)]()&&(_0x18def6(0x494)===_0x18def6(0x89d)?this[_0x18def6(0x42c)]('swing'):this[_0x18def6(0x722)](_0x18def6(0x8cd))),VisuMZ[_0x18def6(0x80e)][_0x18def6(0x621)][_0x18def6(0x73d)](this),SceneManager[_0x18def6(0x341)]()&&(this[_0x18def6(0xb7b)](),this[_0x18def6(0x722)]('PostRegenerateJS'));},Game_Battler[_0x3ffb9d(0xb66)]['regenerateAllBattleCore']=function(){const _0x28fdcb=_0x3ffb9d;if(SceneManager[_0x28fdcb(0x341)]())for(const _0x4e672e of this[_0x28fdcb(0x388)]()){if(_0x28fdcb(0x450)!=='gpSdQ')return _0x1c2589['weapons']()[_0x28fdcb(0x205)]||0x1;else{if(!_0x4e672e)continue;this[_0x28fdcb(0x4d6)](_0x4e672e);}}},Game_Battler['prototype'][_0x3ffb9d(0x4d6)]=function(_0x24dc34){const _0x8b7bac=_0x3ffb9d;if(!Imported[_0x8b7bac(0x820)])return;if(!SceneManager['isSceneBattle']())return;if(this[_0x8b7bac(0xb78)]())return;if(this['isHidden']())return;if(_0x24dc34[_0x8b7bac(0x365)]['match'](/<(?:REGENERATE|REGEN|DEGEN|DOT|SLIP)[ ]ANIMATION:[ ](\d+)>/i)){if(_0x8b7bac(0x39f)==='WWXrX'){const _0x555cbf=Number(RegExp['$1']);$gameTemp[_0x8b7bac(0x5c3)]([this],_0x555cbf,![],![]);}else{_0x1eaa6e[_0x8b7bac(0x80e)]['Scene_ItemBase_applyItem']['call'](this);if(this[_0x8b7bac(0x33b)]()['note'][_0x8b7bac(0x1b7)](/<BYPASS AUTO ACTION SEQUENCE>/i))return;this[_0x8b7bac(0x33b)]()[_0x8b7bac(0x365)][_0x8b7bac(0x1b7)](/<CUSTOM ACTION SEQUENCE>/i)&&(_0xa90684[_0x8b7bac(0x3ed)]=[]),_0x253150['checkAutoCustomActionSequenceNotetagEffect'](this[_0x8b7bac(0x33b)]())&&(_0x54d813[_0x8b7bac(0x3ed)]=[]);}}},VisuMZ[_0x3ffb9d(0x80e)]['Game_Battler_startTpbTurn']=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x72d)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x72d)]=function(){const _0x24915a=_0x3ffb9d;this[_0x24915a(0x722)](_0x24915a(0x7a9)),VisuMZ['BattleCore'][_0x24915a(0x59d)][_0x24915a(0x73d)](this),this['processBattleCoreJS'](_0x24915a(0x269));},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6f8)]=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3d6)],Game_Battler['prototype']['onTurnEnd']=function(){const _0xa4ac00=_0x3ffb9d;this[_0xa4ac00(0x722)](_0xa4ac00(0x842)),VisuMZ[_0xa4ac00(0x80e)][_0xa4ac00(0x6f8)][_0xa4ac00(0x73d)](this),this[_0xa4ac00(0x722)](_0xa4ac00(0x958));},Game_Battler[_0x3ffb9d(0xb66)]['processBattleCoreJS']=function(_0x35b956){const _0x1f6f68=_0x3ffb9d;if(this[_0x1f6f68(0xb22)]||this[_0x1f6f68(0xbdf)])return;const _0x292604=VisuMZ['BattleCore'][_0x1f6f68(0x901)]['Mechanics'];if(_0x292604[_0x35b956])_0x292604[_0x35b956][_0x1f6f68(0x73d)](this);for(const _0x207b33 of this[_0x1f6f68(0x388)]()){if(!_0x207b33)continue;key=VisuMZ[_0x1f6f68(0x80e)][_0x1f6f68(0xb88)](_0x207b33,_0x35b956),VisuMZ[_0x1f6f68(0x80e)]['JS'][key]&&VisuMZ['BattleCore']['JS'][key][_0x1f6f68(0x73d)](this,this,this,_0x207b33,0x0);}},Game_Battler[_0x3ffb9d(0xb66)]['chantStyle']=function(){const _0x569032=_0x3ffb9d;return VisuMZ['BattleCore'][_0x569032(0x901)][_0x569032(0x772)][_0x569032(0x31c)]||![];},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x870)]=function(){const _0x26a8c8=_0x3ffb9d;if(this[_0x26a8c8(0xb0f)]()){if(_0x26a8c8(0x853)!==_0x26a8c8(0x76f)){if(this[_0x26a8c8(0x677)]()){if(_0x26a8c8(0x5e2)!==_0x26a8c8(0x5e2)){if(this[_0x26a8c8(0x923)])return this[_0x26a8c8(0x923)];return this[_0x26a8c8(0x923)]=_0x47df09[_0x26a8c8(0x947)]['battleLayoutStyle'](),this[_0x26a8c8(0x923)];}else{if(this[_0x26a8c8(0xabb)][_0x26a8c8(0x9e3)](_0x18898b=>_0x18898b[_0x26a8c8(0x33b)]()&&_0x18898b[_0x26a8c8(0x225)]()))return!![];}}else{if(this[_0x26a8c8(0xabb)][_0x26a8c8(0x9e3)](_0x438eaf=>_0x438eaf['item']()&&_0x438eaf[_0x26a8c8(0xa93)]()))return!![];}}else{const _0x568523=_0x2661b6[_0x26a8c8(0x80e)][_0x26a8c8(0x901)][_0x26a8c8(0x190)],_0x242042=_0x22afaf[_0x26a8c8(0xb66)][_0x26a8c8(0x1c7)](),_0x2841a2=_0x410359[_0x26a8c8(0x8f0)]-(_0x568523['CommandWidth']||0xc0),_0x250bc2=this['windowAreaHeight']()+_0x242042,_0x5db0d6=this[_0x26a8c8(0x4b4)]()?0x0:_0x5b352f[_0x26a8c8(0x8f0)]-_0x2841a2,_0x5d28f4=_0x1ee30e[_0x26a8c8(0xbd1)]-_0x250bc2+_0x242042;return new _0x3ad19d(_0x5db0d6,_0x5d28f4,_0x2841a2,_0x250bc2);}}if(BattleManager['isTpb']()&&this[_0x26a8c8(0xa3b)]===_0x26a8c8(0x2f9)){if(this[_0x26a8c8(0x677)]())return this[_0x26a8c8(0x33f)]()&&this[_0x26a8c8(0x33f)]()[_0x26a8c8(0x33b)]()&&this[_0x26a8c8(0x33f)]()[_0x26a8c8(0x225)]();else{if(_0x26a8c8(0x91f)!=='zQimA')_0x1e2bf4['BattleCore'][_0x26a8c8(0x73b)]['call'](this),this[_0x26a8c8(0x42a)]();else return this[_0x26a8c8(0x33f)]()&&this[_0x26a8c8(0x33f)]()[_0x26a8c8(0x33b)]()&&this['currentAction']()[_0x26a8c8(0xa93)]();}}return![];},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xaef)]=function(){const _0x417907=_0x3ffb9d;if(BattleManager[_0x417907(0x4e4)]()&&this['_tpbState']==='casting'){if(this[_0x417907(0x677)]()){if('bYTjt'===_0x417907(0x6fd))return this[_0x417907(0x33f)]()&&this['currentAction']()[_0x417907(0x33b)]()&&!this['currentAction']()[_0x417907(0x225)]();else{this['width']=_0x31bd96[_0x417907(0x7d6)],this[_0x417907(0x8a0)]=_0x576951[_0x417907(0x8a0)];const _0x786f23=0x1;this[_0x417907(0x530)]['x']=_0x786f23,this[_0x417907(0x530)]['y']=_0x786f23,this['x']=0x0,this['y']=0x0;}}else return _0x417907(0xa9f)===_0x417907(0xa9f)?this[_0x417907(0x33f)]()&&this[_0x417907(0x33f)]()['item']()&&!this[_0x417907(0x33f)]()[_0x417907(0xa93)]():!this[_0x417907(0x7f2)]()&&!this[_0x417907(0xc1b)]();}return![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6e3)]=Game_Battler[_0x3ffb9d(0xb66)]['clearDamagePopup'],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x31b)]=function(){const _0xbdc6ad=_0x3ffb9d;VisuMZ['BattleCore'][_0xbdc6ad(0x6e3)][_0xbdc6ad(0x73d)](this),this[_0xbdc6ad(0x3bf)]=[];},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x337)]=function(){const _0x67f620=_0x3ffb9d;if(!this[_0x67f620(0x3bf)])this['clearDamagePopup']();return this[_0x67f620(0x3bf)][_0x67f620(0x205)]>0x0;},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xba3)]=function(){const _0x3e19aa=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!this[_0x3e19aa(0x3bf)])this[_0x3e19aa(0x31b)]();this[_0x3e19aa(0x28d)]();const _0x514905=this[_0x3e19aa(0x491)]();if(_0x514905)_0x514905[_0x3e19aa(0xbc6)]();},Game_Battler[_0x3ffb9d(0xb66)]['createSeparateDamagePopups']=function(){const _0x2c7b57=_0x3ffb9d,_0x11bc0f=this[_0x2c7b57(0x436)]();if(_0x11bc0f['missed']||_0x11bc0f[_0x2c7b57(0x252)]){const _0x43df33=JsonEx[_0x2c7b57(0x965)](_0x11bc0f);_0x43df33[_0x2c7b57(0x3e4)]=![],_0x43df33[_0x2c7b57(0x211)]=0x0,this['_damagePopupArray'][_0x2c7b57(0x7dd)](_0x43df33);}if(_0x11bc0f[_0x2c7b57(0x3e4)]){const _0x41f58a=JsonEx['makeDeepCopy'](_0x11bc0f);_0x41f58a['missed']=![],_0x41f58a[_0x2c7b57(0x252)]=![],_0x41f58a[_0x2c7b57(0x211)]=0x0,this[_0x2c7b57(0x3bf)][_0x2c7b57(0x7dd)](_0x41f58a);}if(_0x11bc0f[_0x2c7b57(0x211)]!==0x0){const _0x36daae=JsonEx['makeDeepCopy'](_0x11bc0f);_0x36daae[_0x2c7b57(0x278)]=![],_0x36daae['evaded']=![],_0x36daae['hpAffected']=![],this['_damagePopupArray'][_0x2c7b57(0x7dd)](_0x36daae);}},Game_Battler[_0x3ffb9d(0xb66)]['getNextDamagePopup']=function(){const _0x43b34c=_0x3ffb9d;if(!this['_damagePopupArray'])this[_0x43b34c(0x31b)]();return VisuMZ[_0x43b34c(0x80e)][_0x43b34c(0x901)]['Damage'][_0x43b34c(0x3be)]?this[_0x43b34c(0x3bf)][_0x43b34c(0x928)]():this[_0x43b34c(0x3bf)][_0x43b34c(0x424)]();},Game_Battler[_0x3ffb9d(0xb66)]['setupTextPopup']=function(_0x42d03f,_0x34a16b){const _0x579827=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return;if(!this['battler']())return;if(_0x42d03f[_0x579827(0x205)]<=0x0)return;_0x34a16b=_0x34a16b||{},_0x34a16b[_0x579827(0xc17)]=_0x34a16b[_0x579827(0xc17)]||_0x579827(0x401),_0x34a16b['flashColor']=_0x34a16b[_0x579827(0xa02)]||[0x0,0x0,0x0,0x0],_0x34a16b['flashDuration']=_0x34a16b[_0x579827(0x345)]||0x0,this[_0x579827(0x491)]()['setupTextPopup'](_0x42d03f,_0x34a16b);},Game_Battler[_0x3ffb9d(0xb66)]['setupIconTextPopup']=function(_0x2a08b4,_0x457ab6,_0x19b274){const _0x56f62b=_0x3ffb9d;if(!SceneManager[_0x56f62b(0x341)]())return;if(!this[_0x56f62b(0x491)]())return;if(_0x457ab6[_0x56f62b(0x205)]<=0x0)return;_0x19b274=_0x19b274||{},_0x19b274[_0x56f62b(0xc17)]=_0x19b274[_0x56f62b(0xc17)]||'#ffffff',_0x19b274[_0x56f62b(0xa02)]=_0x19b274[_0x56f62b(0xa02)]||[0x0,0x0,0x0,0x0],_0x19b274[_0x56f62b(0x345)]=_0x19b274[_0x56f62b(0x345)]||0x0,this[_0x56f62b(0x491)]()[_0x56f62b(0x523)](_0x2a08b4,_0x457ab6,_0x19b274);},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x514)]=function(){const _0x44ca67=_0x3ffb9d;if(this[_0x44ca67(0x86a)]())return![];if(this[_0x44ca67(0x3ad)]()&&this[_0x44ca67(0xc10)]())return!![];if(this[_0x44ca67(0x2a7)]()&&this['hasSvBattler']()){if(_0x44ca67(0x6c3)===_0x44ca67(0xac2))this['_endBattle']=!![],this[_0x44ca67(0x710)]=![],this[_0x44ca67(0x722)](_0x44ca67(0xb04)),_0x373606[_0x44ca67(0x80e)][_0x44ca67(0x358)][_0x44ca67(0x73d)](this,_0xbe1b39),this[_0x44ca67(0x722)]('PostEndBattleJS');else{if(this[_0x44ca67(0xb78)]()&&this['allowCollapse']())return![];}}else{if(this[_0x44ca67(0xb78)]())return![];}return!![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x45d)]=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x754)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x754)]=function(){const _0x140928=_0x3ffb9d;VisuMZ[_0x140928(0x80e)]['Game_Battler_clearMotion'][_0x140928(0x73d)](this),this[_0x140928(0x463)]();},Game_Battler[_0x3ffb9d(0xb66)]['canBattlerMove']=function(){return!![];},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3f8)]=function(){return![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x9ee)]=Game_Battler[_0x3ffb9d(0xb66)]['onBattleStart'],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x575)]=function(_0xbd94c0){const _0x52c290=_0x3ffb9d;VisuMZ[_0x52c290(0x80e)][_0x52c290(0x9ee)]['call'](this,_0xbd94c0),this['onBattleStartBattleCore'](_0xbd94c0);},Game_Battler['prototype'][_0x3ffb9d(0x7c1)]=function(_0x1f3660){const _0xf315cd=_0x3ffb9d;this[_0xf315cd(0xa88)](![]),this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x73b)]=Game_Battler['prototype'][_0x3ffb9d(0x8d8)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8d8)]=function(){const _0x435527=_0x3ffb9d;VisuMZ['BattleCore']['Game_Battler_onBattleEnd'][_0x435527(0x73d)](this),this[_0x435527(0x42a)]();},Game_Battler['prototype']['onBattleEndBattleCore']=function(){this['_forcedHomeX']=undefined,this['_forcedHomeY']=undefined;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xa81)]=Game_Battler[_0x3ffb9d(0xb66)]['performActionStart'],Game_Battler['prototype'][_0x3ffb9d(0xb4c)]=function(_0x1fd667){const _0x4d207f=_0x3ffb9d;VisuMZ[_0x4d207f(0x80e)][_0x4d207f(0xa81)][_0x4d207f(0x73d)](this,_0x1fd667);if(!_0x1fd667[_0x4d207f(0xb19)]()){const _0x357b32=this[_0x4d207f(0x491)]();_0x357b32&&_0x357b32[_0x4d207f(0x1b8)]();}this[_0x4d207f(0xa88)](![]);},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x30d)]=function(){const _0x232b39=_0x3ffb9d,_0x3a1f13=this[_0x232b39(0xbaf)];this['_flinched']=![];if(BattleManager['isActiveTpb']()&&this[_0x232b39(0x90c)]()){const _0x4424c2=this[_0x232b39(0x491)]();if(_0x4424c2&&_0x3a1f13)_0x4424c2[_0x232b39(0x1b8)]();return;}const _0x1ec1a2=this[_0x232b39(0x491)]();if(_0x1ec1a2)_0x1ec1a2[_0x232b39(0xaa6)]();this[_0x232b39(0xa88)](![]),this[_0x232b39(0x884)]();},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6a3)]=function(_0x3f92be){const _0x4b9074=_0x3ffb9d;if(_0x3f92be[_0x4b9074(0xaf5)]())this[_0x4b9074(0xa13)]();else{if(_0x3f92be[_0x4b9074(0xb19)]()){if('CbtaH'===_0x4b9074(0x503))this[_0x4b9074(0x42c)](_0x4b9074(0x61b));else{const _0x3c617c=this[_0x4b9074(0xba0)];_0x3c617c[_0x4b9074(0x3d3)]['clear']();const _0x4b2069=this['commandStyleCheck'](this[_0x4b9074(0x2bd)]());if(_0x4b2069==='icon'&&this[_0x4b9074(0x7d9)]()>0x0){const _0x1cc959=this['itemLineRect'](this[_0x4b9074(0x2bd)]());let _0x321344=this[_0x4b9074(0x1d3)](this['index']());_0x321344=_0x321344[_0x4b9074(0x515)](/\\I\[(\d+)\]/gi,''),_0x3c617c[_0x4b9074(0xa4c)](),this[_0x4b9074(0x262)](_0x321344,_0x1cc959),this[_0x4b9074(0x319)](_0x321344,_0x1cc959),this[_0x4b9074(0x352)](_0x321344,_0x1cc959);}}}else{if(_0x3f92be[_0x4b9074(0x225)]())this[_0x4b9074(0x42c)](_0x4b9074(0x880));else{if(_0x3f92be[_0x4b9074(0x493)]()){if('OFBSk'===_0x4b9074(0x992)){const _0x13e3d8=this[_0x4b9074(0x3fd)](this[_0x4b9074(0x2bd)]());let _0x4a834b=this[_0x4b9074(0x1d3)](this['index']());_0x4a834b=_0x4a834b['replace'](/\\I\[(\d+)\]/gi,''),_0x4a0c3b[_0x4b9074(0xa4c)](),this[_0x4b9074(0x262)](_0x4a834b,_0x13e3d8),this[_0x4b9074(0x319)](_0x4a834b,_0x13e3d8),this['commandNameWindowCenter'](_0x4a834b,_0x13e3d8);}else{if(_0x3f92be['item']()[_0x4b9074(0xbfc)][_0x4b9074(0x97d)]>0x0){if('xHTcv'==='jMICx'){if(this[_0x4b9074(0xb70)]())_0x19984f['BattleCore'][_0x4b9074(0xa60)][_0x4b9074(0x73d)](this);}else this[_0x4b9074(0xa13)]();}else this[_0x4b9074(0x42c)](_0x4b9074(0x8d6));}}else _0x3f92be[_0x4b9074(0x562)]()&&this[_0x4b9074(0x42c)](_0x4b9074(0x33b));}}}},Game_Battler[_0x3ffb9d(0xb66)]['getAttackMotion']=function(){const _0x470f25=_0x3ffb9d;return $dataSystem[_0x470f25(0x85a)][0x0];},Game_Battler['prototype'][_0x3ffb9d(0x350)]=function(){const _0x41e5d5=_0x3ffb9d,_0x539134=this[_0x41e5d5(0x5df)]();return _0x539134?_0x539134[_0x41e5d5(0x29b)]:0x0;},Game_Battler['prototype']['performSubstitute']=function(_0x4f6939){const _0x55e44e=_0x3ffb9d;if(!$gameSystem[_0x55e44e(0x6de)]())return;const _0x2eea9c=this[_0x55e44e(0x491)](),_0x3824ff=_0x4f6939['battler']();if(!_0x2eea9c||!_0x3824ff)return;const _0x24381d=_0x3824ff['_baseX'],_0x4aa83a=_0x3824ff['_baseY'];this[_0x55e44e(0x4d9)](_0x24381d,_0x4aa83a,0x0,![],_0x55e44e(0xb45),-0x1),_0x2eea9c[_0x55e44e(0x712)]();const _0x244b18=VisuMZ['BattleCore']['Settings']['ActionSequence'];let _0x1de906=(_0x3824ff[_0x55e44e(0x7d6)]+_0x2eea9c[_0x55e44e(0x7d6)])/0x2;_0x1de906*=this['isActor']()?0x1:-0x1;let _0x5cd350=_0x244b18['StepDistanceY']*(this[_0x55e44e(0x2bb)]()?0x1:-0x1);_0x4f6939[_0x55e44e(0x7fb)](_0x1de906,_0x5cd350,0x0,![],_0x55e44e(0xb45)),_0x3824ff[_0x55e44e(0x712)]();},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x42c)]=function(_0x43844c){const _0x1ee4f8=_0x3ffb9d;if(SceneManager[_0x1ee4f8(0x341)]()){const _0x330136=this[_0x1ee4f8(0x491)]();if(_0x330136){_0x330136[_0x1ee4f8(0x26c)](_0x43844c);if(['swing',_0x1ee4f8(0x8d5),'missile'][_0x1ee4f8(0x802)](_0x43844c)){if(_0x1ee4f8(0x468)!==_0x1ee4f8(0x468))return _0x295da2[_0x1ee4f8(0x80e)][_0x1ee4f8(0x901)][_0x1ee4f8(0x190)][_0x1ee4f8(0xb68)];else this['performWeaponAnimation']();}}}this[_0x1ee4f8(0x463)]();},Game_Battler['prototype']['performWeaponAnimation']=function(){},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1cb)]=function(_0x1c86f8){const _0x3d98b4=_0x3ffb9d;if(SceneManager[_0x3d98b4(0x341)]()){const _0x564575=this[_0x3d98b4(0x491)]();if(_0x564575)_0x564575[_0x3d98b4(0x6c5)](_0x1c86f8);}},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x44a)]=function(){const _0x2f23bc=_0x3ffb9d;if(SceneManager[_0x2f23bc(0x341)]()){const _0x553468=this['getAttackWeaponAnimationId']();this[_0x2f23bc(0x1cb)](_0x553468);}},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x680)]=function(_0x1bbe7f,_0x3b860b){const _0x1701e1=_0x3ffb9d;if(!_0x1bbe7f)return;if(!_0x1bbe7f['item']())return;if(_0x1bbe7f[_0x1701e1(0xaf5)]())return;if(_0x1bbe7f[_0x1701e1(0xb19)]())return;if(_0x1bbe7f[_0x1701e1(0x562)]())return;let _0xab908c=0x0;const _0x5a0652=VisuMZ[_0x1701e1(0x80e)]['Settings']['ActionSequence'],_0x104bc5=_0x1bbe7f[_0x1701e1(0x33b)]()['note'];if(_0x104bc5['match'](/<CAST ANIMATION: (\d+)>/i)){if(_0x1701e1(0x9e2)===_0x1701e1(0x1ad)){if(this[_0x1701e1(0x8fa)]&&this[_0x1701e1(0x8fa)][_0x1701e1(0xb78)]())return![];if(this['_battler']&&!this[_0x1701e1(0x8fa)]['canBattlerMove']())return![];return _0x179a11[_0x1701e1(0x6de)]();}else _0xab908c=Number(RegExp['$1']);}else{if(_0x104bc5[_0x1701e1(0x1b7)](/<NO CAST ANIMATION>/i))return;else{if(_0x1bbe7f['isCertainHit']())_0xab908c=_0x5a0652[_0x1701e1(0x69b)];else{if(_0x1bbe7f[_0x1701e1(0x94e)]())_0xab908c=_0x5a0652['CastPhysical'];else{if(_0x1bbe7f['isMagical']()){if(_0x1701e1(0x968)==='gtKpz'){const _0x5b7a3e=this[_0x1701e1(0x3fd)](_0x472b2a),_0x1b4f29=this[_0x1701e1(0x95f)](_0x5a9a64)[_0x1701e1(0x7d6)];return _0x1b4f29<=_0x5b7a3e[_0x1701e1(0x7d6)]?'iconText':_0x1701e1(0x9c9);}else _0xab908c=_0x5a0652[_0x1701e1(0xbcc)];}}}}}_0xab908c>0x0&&(_0x1701e1(0x746)!==_0x1701e1(0x746)?this[_0x1701e1(0x393)]=_0x133818[_0x1701e1(0x56b)](_0x40bfcd['StatusWindowSkinFilename']):$gameTemp['requestAnimation']([this],_0xab908c,!!_0x3b860b));},Game_Battler['prototype'][_0x3ffb9d(0x224)]=function(){const _0x201451=_0x3ffb9d;SoundManager[_0x201451(0x245)]();let _0x1c2f5c=VisuMZ['BattleCore'][_0x201451(0x901)][_0x201451(0x1aa)]['ReflectAnimation'];if(_0x1c2f5c>0x0){if(Imported[_0x201451(0x820)])$gameTemp['requestFauxAnimation']([this],_0x1c2f5c);else{if(_0x201451(0x617)!==_0x201451(0x791))$gameTemp[_0x201451(0x418)]([this],_0x1c2f5c);else return _0x27a6ed[_0x201451(0x80e)][_0x201451(0x901)][_0x201451(0x190)][_0x201451(0x70f)];}}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x8a3)]=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x887)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x887)]=function(){const _0x4ec8ae=_0x3ffb9d;VisuMZ[_0x4ec8ae(0x80e)][_0x4ec8ae(0x8a3)][_0x4ec8ae(0x73d)](this),this['performFlinch']();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6fb)]=Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x580)],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x580)]=function(){const _0x5c6085=_0x3ffb9d;VisuMZ['BattleCore'][_0x5c6085(0x6fb)][_0x5c6085(0x73d)](this),this[_0x5c6085(0xa71)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x67e)]=Game_Battler[_0x3ffb9d(0xb66)]['performEvasion'],Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x96f)]=function(){const _0x49757d=_0x3ffb9d;VisuMZ['BattleCore']['Game_Battler_performEvasion'][_0x49757d(0x73d)](this),this[_0x49757d(0xa71)]();},Game_Battler[_0x3ffb9d(0xb66)]['performFlinch']=function(){const _0x3a7978=_0x3ffb9d;if(!$gameSystem[_0x3a7978(0x6de)]())return;if(this[_0x3a7978(0xbaf)])return;this[_0x3a7978(0xbaf)]=!![];const _0x49e2e2=this[_0x3a7978(0x491)]();if(_0x49e2e2)_0x49e2e2[_0x3a7978(0x7af)]();},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x884)]=function(){const _0x26afdd=_0x3ffb9d;if(this[_0x26afdd(0xb78)]()&&this[_0x26afdd(0x4d5)]!=='dead'){this['requestMotion'](_0x26afdd(0x268));return;}if(this[_0x26afdd(0xb78)]()&&this['_motionType']===_0x26afdd(0x268))return;if(!!this['_freezeMotionData'])return;if(this[_0x26afdd(0x2a7)]()){if(!this[_0x26afdd(0x1a3)]()&&this!==BattleManager[_0x26afdd(0xa98)]){if(_0x26afdd(0x5a2)!==_0x26afdd(0x7eb)){if(this[_0x26afdd(0x491)]())this[_0x26afdd(0x491)]()['refreshMotion']();}else{_0x21a4b2&&_0x1c7f5f&&_0x4c5214[_0x26afdd(0x365)]&&this[_0x26afdd(0x221)](_0x52f73b[_0x26afdd(0x365)]);const _0x3a5432=_0x1cb7b3[_0x218ec2];if(_0x3a5432){let _0x5df8a6=_0x238873[_0x26afdd(0xa86)](_0x3a5432['id']);this[_0x26afdd(0x221)](_0x5df8a6);}}}this[_0x26afdd(0x463)]();return;}if(this[_0x26afdd(0x4d5)]===_0x26afdd(0xbdd))return;if(this[_0x26afdd(0x4d5)]===_0x26afdd(0x590)&&!BattleManager[_0x26afdd(0x90c)]())return;if(this[_0x26afdd(0x4d5)]===_0x26afdd(0x61b)&&!BattleManager[_0x26afdd(0x90c)]())return;this[_0x26afdd(0x754)]();if(this['battler']()&&BattleManager['isInputting']()){this[_0x26afdd(0x491)]()[_0x26afdd(0xa68)](),this[_0x26afdd(0x463)]();return;}},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1a3)]=function(){const _0x3c5199=_0x3ffb9d;if(!this[_0x3c5199(0xc11)]())return![];const _0x17b2b3=this[_0x3c5199(0x491)]();if(!_0x17b2b3)return![];const _0x45b859=_0x17b2b3[_0x3c5199(0x4c1)];if(!_0x45b859)return![];const _0x4652ae=_0x45b859[_0x3c5199(0x83a)];return _0x4652ae&&!_0x4652ae[_0x3c5199(0x1ce)];},Game_Battler[_0x3ffb9d(0xb66)]['isBattlerFlipped']=function(){const _0x3dceab=_0x3ffb9d;return this[_0x3dceab(0x48e)];},Game_Battler['prototype'][_0x3ffb9d(0xa88)]=function(_0x2422d4){const _0x56ef0f=_0x3ffb9d;if(!$gameSystem['isSideView']())return;this[_0x56ef0f(0x48e)]=_0x2422d4;const _0x249161=this[_0x56ef0f(0x491)]();if(_0x249161)_0x249161['updateFlip']();},Game_Battler['prototype'][_0x3ffb9d(0x2b8)]=function(_0x139dd7,_0x3b1fbd,_0x229a12){const _0x57a96b=_0x3ffb9d;if(!$gameSystem[_0x57a96b(0x6de)]())return;const _0x136bfd=this[_0x57a96b(0x491)]();if(!_0x136bfd)return;if(_0x139dd7===_0x136bfd['_baseX'])return;let _0x367d4e=![];if(this[_0x57a96b(0x2bb)]()){if(_0x139dd7>_0x136bfd[_0x57a96b(0x904)])_0x367d4e=!![];if(_0x139dd7<_0x136bfd['_baseX'])_0x367d4e=![];}else{if(this[_0x57a96b(0x2a7)]()){if(_0x139dd7>_0x136bfd[_0x57a96b(0x904)])_0x367d4e=![];if(_0x139dd7<_0x136bfd['_baseX'])_0x367d4e=!![];}};this[_0x57a96b(0xa88)](_0x229a12?!_0x367d4e:_0x367d4e),_0x136bfd[_0x57a96b(0xc32)]();},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7fb)]=function(_0x500f42,_0x122371,_0x4c6c98,_0x24395d,_0x5e701d){const _0x3ca5e0=_0x3ffb9d;if(!$gameSystem[_0x3ca5e0(0x6de)]())return;const _0x1a75b5=this['battler']();if(!_0x1a75b5)return;if(_0x24395d)this['setBattlerFacePoint'](_0x500f42+_0x1a75b5[_0x3ca5e0(0x904)],_0x122371+_0x1a75b5['_baseY'],![]);_0x500f42+=_0x1a75b5[_0x3ca5e0(0x904)]-_0x1a75b5[_0x3ca5e0(0xb48)],_0x122371+=_0x1a75b5[_0x3ca5e0(0x531)]-_0x1a75b5['_homeY'],_0x1a75b5[_0x3ca5e0(0x638)](_0x500f42,_0x122371,_0x4c6c98);if(Imported['VisuMZ_0_CoreEngine'])_0x1a75b5['setMoveEasingType'](_0x5e701d||'Linear');},Game_Battler['prototype']['moveBattlerToPoint']=function(_0x3bb503,_0x518fe1,_0x3de3af,_0xc39811,_0x2e3886,_0x471f68){const _0x51d5b1=_0x3ffb9d;if(!$gameSystem[_0x51d5b1(0x6de)]())return;const _0x220b21=this['battler']();if(!_0x220b21)return;if(_0x3bb503===Infinity||_0x518fe1===Infinity)return;if(isNaN(_0x3bb503)||isNaN(_0x518fe1))return;_0x471f68=_0x471f68||0x0;if(_0x471f68>0x0){if(_0x51d5b1(0xaa5)==='sLoLl'){if(_0x220b21[_0x51d5b1(0x904)]>_0x3bb503)_0x3bb503+=_0x220b21['width']/0x2+_0x471f68;if(_0x220b21[_0x51d5b1(0x904)]<_0x3bb503)_0x3bb503-=_0x220b21[_0x51d5b1(0x7d6)]/0x2+_0x471f68;}else return!![];}if(_0xc39811)this[_0x51d5b1(0x2b8)](_0x3bb503,_0x518fe1,![]);_0x3bb503-=_0x220b21[_0x51d5b1(0xb48)],_0x518fe1-=_0x220b21['_homeY'],_0x220b21[_0x51d5b1(0x638)](_0x3bb503,_0x518fe1,_0x3de3af);if(Imported[_0x51d5b1(0x820)])_0x220b21[_0x51d5b1(0x332)](_0x2e3886||_0x51d5b1(0xb45));},Game_Battler['prototype'][_0x3ffb9d(0x7d2)]=function(_0x5ecdd1,_0x25eabf,_0x5c7089,_0x2d67e8,_0x329626){const _0x4a1c01=_0x3ffb9d;if(!$gameSystem[_0x4a1c01(0x6de)]())return;const _0x56d37a=this['battler']();if(!_0x56d37a)return;if(_0x2d67e8)this[_0x4a1c01(0x2b8)](_0x5ecdd1+_0x56d37a[_0x4a1c01(0x904)],_0x25eabf+_0x56d37a[_0x4a1c01(0x531)],![]);_0x5ecdd1+=_0x56d37a['_homeX'],_0x25eabf+=_0x56d37a[_0x4a1c01(0xb27)],_0x56d37a[_0x4a1c01(0xb32)](_0x5ecdd1,_0x25eabf,_0x5c7089,_0x329626),this[_0x4a1c01(0x229)]=_0x5ecdd1,this['_forcedHomeY']=_0x25eabf;},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1dc)]=function(_0x4bb482,_0x48841c,_0x3d3b18,_0x56ff05,_0xd059e9,_0x51b541){const _0x32425e=_0x3ffb9d;if(!$gameSystem['isSideView']())return;const _0xdd0a65=this[_0x32425e(0x491)]();if(!_0xdd0a65)return;_0x51b541=_0x51b541||0x0;if(_0x51b541>0x0){if(_0xdd0a65[_0x32425e(0x904)]>_0x4bb482)_0x4bb482+=_0xdd0a65[_0x32425e(0x7d6)]/0x2+_0x51b541;if(_0xdd0a65[_0x32425e(0x904)]<_0x4bb482)_0x4bb482-=_0xdd0a65[_0x32425e(0x7d6)]/0x2+_0x51b541;}if(_0x56ff05)this[_0x32425e(0x2b8)](_0x4bb482,_0x48841c,![]);_0xdd0a65[_0x32425e(0xb32)](_0x4bb482,_0x48841c,_0x3d3b18,_0xd059e9),this[_0x32425e(0x229)]=_0x4bb482,this[_0x32425e(0xb9d)]=_0x48841c;},Game_Battler['prototype'][_0x3ffb9d(0x408)]=function(_0x14adb7,_0x5e8877,_0x1ca981){const _0x302ab9=_0x3ffb9d;if(!$gameSystem[_0x302ab9(0x6de)]())return;const _0x37556b=this['battler']();if(!_0x37556b)return;_0x37556b[_0x302ab9(0x64e)](_0x14adb7,_0x5e8877,_0x1ca981);},Game_Battler[_0x3ffb9d(0xb66)]['jumpBattler']=function(_0x500181,_0x1edb95){const _0x502ba3=_0x3ffb9d;if(!$gameSystem[_0x502ba3(0x6de)]())return;const _0x2b670f=this[_0x502ba3(0x491)]();if(!_0x2b670f)return;_0x2b670f[_0x502ba3(0xb40)](_0x500181,_0x1edb95);},Game_Battler[_0x3ffb9d(0xb66)]['spinBattler']=function(_0x36e64d,_0x152708,_0x75e67e,_0x3f5819){const _0x394aa5=_0x3ffb9d;if(!$gameSystem[_0x394aa5(0x6de)]())return;const _0x3f4436=this[_0x394aa5(0x491)]();if(!_0x3f4436)return;_0x3f4436[_0x394aa5(0x60d)](_0x36e64d,_0x152708,_0x75e67e,_0x3f5819);},Game_Battler['prototype'][_0x3ffb9d(0x667)]=function(_0x4e369f,_0xe037d1,_0x337509,_0x22536f){const _0x359e62=_0x3ffb9d;if(!$gameSystem[_0x359e62(0x6de)]())return;const _0x4d747b=this[_0x359e62(0x491)]();if(!_0x4d747b)return;if(this['isActor']()){if('ILoEm'!==_0x359e62(0x1de))_0x4e369f*=-0x1,_0xe037d1*=-0x1;else{if(this[_0x359e62(0x991)]()===_0x359e62(0x94f))return this['skillItemWindowRectBorderStyle']();else return this[_0x359e62(0x655)]()?this['skillItemWindowRectMiddle']():_0x39e199[_0x359e62(0x80e)][_0x359e62(0xb97)][_0x359e62(0x73d)](this);}}_0x4d747b[_0x359e62(0x6c8)](_0x4e369f,_0xe037d1,_0x337509,_0x22536f);},Game_Battler['prototype']['growBattler']=function(_0x3cea54,_0x69f3ea,_0x267b72,_0x208aa0){const _0x2461e0=_0x3ffb9d;if(!$gameSystem[_0x2461e0(0x6de)]())return;const _0x56d6e9=this[_0x2461e0(0x491)]();if(!_0x56d6e9)return;_0x56d6e9[_0x2461e0(0x45e)](_0x3cea54,_0x69f3ea,_0x267b72,_0x208aa0);},Game_Battler['prototype'][_0x3ffb9d(0xb67)]=function(_0x121760,_0x465682,_0x378452){const _0x1055e5=_0x3ffb9d;if(!$gameSystem[_0x1055e5(0x6de)]())return;const _0x579fe8=this[_0x1055e5(0x491)]();if(!_0x579fe8)return;_0x579fe8[_0x1055e5(0x300)](_0x121760,_0x465682,_0x378452);},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x463)]=function(){const _0x13e039=_0x3ffb9d,_0x4b4168=!!this[_0x13e039(0xaed)];this[_0x13e039(0xaed)]=undefined;if(_0x4b4168){if(_0x13e039(0x297)===_0x13e039(0x297))this['requestMotionRefresh'](),this[_0x13e039(0x990)]();else{const _0x44b6fb=_0x3e56e0['BattleCore']['Settings'][_0x13e039(0x6c4)],_0x17883f=_0xb4848a[_0x13e039(0x436)]();if(_0x44b6fb[_0x13e039(0x3f5)])this[_0x13e039(0xb8a)](_0x2a1dce,_0x17883f[_0x13e039(0xb33)],_0x593b53[_0x13e039(0x445)]);if(_0x44b6fb[_0x13e039(0x45a)])this[_0x13e039(0xb8a)](_0x4d4a63,_0x17883f[_0x13e039(0x3a7)],_0x2ac9f9[_0x13e039(0x860)]);if(_0x44b6fb['ShowRemovedBuff'])this['displayBuffs'](_0x5ea099,_0x17883f[_0x13e039(0x421)],_0x29a6a4['buffRemove']);}}},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x990)]=function(){const _0x39110=_0x3ffb9d;if(!SceneManager[_0x39110(0x341)]())return;const _0x573114=this['battler']();if(!_0x573114)return;let _0x2a9461=this[_0x39110(0x2bb)]()?_0x573114[_0x39110(0x5d2)]:_0x573114[_0x39110(0x4c1)][_0x39110(0x5d2)];_0x2a9461&&_0x2a9461['setup'](0x0);},Game_Battler['prototype'][_0x3ffb9d(0x79e)]=function(_0x38cd63,_0x36c79e,_0x2b4350){const _0x19b904=_0x3ffb9d;if(this['isEnemy']()&&!this[_0x19b904(0xc11)]())return;let _0x20a2c6=0x0,_0xeb3f5e=0x0;_0x38cd63[_0x19b904(0x1b7)](/ATTACK[ ](\d+)/i)&&(_0xeb3f5e=Number(RegExp['$1']),_0xeb3f5e--);if(this['isActor']()){const _0xd48c1f=this[_0x19b904(0xa0d)]();_0x20a2c6=_0xd48c1f[_0xeb3f5e]?_0xd48c1f[_0xeb3f5e][_0x19b904(0xae6)]:0x0;}else this[_0x19b904(0x2a7)]()&&(_0x20a2c6=this[_0x19b904(0x376)]()[_0x19b904(0xae6)]||0x0);const _0x365e45=$dataSystem['attackMotions'][_0x20a2c6];_0x38cd63[_0x19b904(0x1b7)](/attack/i)&&('KiNuG'!==_0x19b904(0x5f5)?(_0x939718[_0x19b904(0x80e)][_0x19b904(0xa91)][_0x19b904(0x73d)](this,_0x101b04),this[_0x19b904(0x717)](_0x22a7fc)):_0x38cd63=[_0x19b904(0x8d5),_0x19b904(0x243),_0x19b904(0xc13)][_0x365e45['type']]||'swing'),this[_0x19b904(0xaed)]={'motionType':_0x38cd63,'weaponImageId':_0x36c79e?_0x365e45['weaponImageId']:0x0,'pattern':_0x2b4350};},Game_Battler[_0x3ffb9d(0xb66)]['isFriendly']=function(_0xfdeecb){if(!_0xfdeecb)return![];return _0xfdeecb['friendsUnit']()===this['friendsUnit']();},Game_Battler[_0x3ffb9d(0xb66)]['isOpponent']=function(_0x26ff02){const _0x11fe52=_0x3ffb9d;if(!_0x26ff02)return![];return _0x26ff02[_0x11fe52(0x943)]()===this[_0x11fe52(0x432)]();},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x26f)]=function(){return![];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x26f)]=function(){const _0x15a6ee=_0x3ffb9d;return this[_0x15a6ee(0x41a)]()[_0x15a6ee(0x1b7)](/\$/i);},Game_Enemy[_0x3ffb9d(0xb66)]['hasStaticSvBattler']=function(){const _0x239973=_0x3ffb9d;return this[_0x239973(0xc11)]()&&this[_0x239973(0x3aa)]()[_0x239973(0x1b7)](/\$/i);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xbba)]=Game_Actor[_0x3ffb9d(0xb66)]['setup'],Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2eb)]=function(_0x44ab42){const _0x5d6c4c=_0x3ffb9d;VisuMZ[_0x5d6c4c(0x80e)][_0x5d6c4c(0xbba)][_0x5d6c4c(0x73d)](this,_0x44ab42),this[_0x5d6c4c(0x9b4)]();},Game_Actor[_0x3ffb9d(0xb66)]['initBattlePortrait']=function(){const _0x5cdb7b=_0x3ffb9d;this[_0x5cdb7b(0x939)]='',this[_0x5cdb7b(0x6aa)]()&&this['actor']()['note'][_0x5cdb7b(0x1b7)](/<BATTLE (?:IMAGE|PORTRAIT):[ ](.*)>/i)&&(this[_0x5cdb7b(0x939)]=String(RegExp['$1']));},Game_Actor['prototype'][_0x3ffb9d(0xa30)]=function(){const _0x475533=_0x3ffb9d;if(this[_0x475533(0x21c)]()!=='')return this[_0x475533(0x21c)]();else{if(Imported['VisuMZ_1_MainMenuCore']&&this['getMenuImage']()!=='')return this[_0x475533(0x9cd)]();}return'';},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x21c)]=function(){const _0x56034b=_0x3ffb9d;if(this[_0x56034b(0x939)]===undefined)this[_0x56034b(0x9b4)]();return this[_0x56034b(0x939)];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x70b)]=function(_0x5a261d){const _0x5cf2f8=_0x3ffb9d;if(this[_0x5cf2f8(0x939)]===undefined)this[_0x5cf2f8(0x9b4)]();this[_0x5cf2f8(0x939)]=_0x5a261d;if(SceneManager[_0x5cf2f8(0x341)]()&&$gameParty[_0x5cf2f8(0xbf4)]()[_0x5cf2f8(0x802)](this)){const _0x445571=SceneManager[_0x5cf2f8(0x947)][_0x5cf2f8(0x1bb)];if(_0x445571)_0x445571['refreshActorPortrait'](this);}},Game_Actor['prototype']['isSpriteVisible']=function(){return!![];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa03)]=function(){const _0x52aa23=_0x3ffb9d;if(!this[_0x52aa23(0xbb4)]()&&BattleManager['_autoBattle'])return!![];return Game_Battler[_0x52aa23(0xb66)][_0x52aa23(0xa03)][_0x52aa23(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)]['Game_Actor_makeActionList']=Game_Actor['prototype'][_0x3ffb9d(0x2c1)],Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2c1)]=function(){const _0x202180=_0x3ffb9d;if(BattleManager[_0x202180(0x710)]&&!ConfigManager['autoBattleUseSkills']){if(_0x202180(0x85b)===_0x202180(0x85b))return this[_0x202180(0x96e)]();else{if(_0x15e7b4[_0x202180(0x898)]&&_0x4530d1[_0x202180(0x964)]!==_0x1159b9)return _0x230881[_0x202180(0x964)];else{if(this[_0x202180(0x991)]()===_0x202180(0x94f))return![];else{return _0x3534bc[_0x202180(0xb66)]['isRightInputMode'][_0x202180(0x73d)](this);;}}}}else{if(_0x202180(0x662)!==_0x202180(0x8c9)){return VisuMZ[_0x202180(0x80e)][_0x202180(0xa1f)][_0x202180(0x73d)](this);;}else _0x58f9c8[_0x202180(0xb66)][_0x202180(0xacd)][_0x202180(0x73d)](this);}},Game_Actor[_0x3ffb9d(0xb66)]['makeActionListAutoAttack']=function(){const _0x3e141c=_0x3ffb9d,_0x47c718=[],_0x357dd6=new Game_Action(this);return _0x357dd6[_0x3e141c(0xa61)](),_0x47c718['push'](_0x357dd6),_0x47c718;},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5ce)]=function(){const _0x5039a2=_0x3ffb9d;if(this[_0x5039a2(0x233)]()[_0x5039a2(0x365)][_0x5039a2(0x1b7)](/<BATTLE COMMANDS>\s*([\s\S]*)\s*<\/BATTLE COMMANDS>/i)){if(_0x5039a2(0x4da)===_0x5039a2(0x4da))return String(RegExp['$1'])['split'](/[\r\n]+/);else _0x3cb4e4[_0x5039a2(0x418)]([this],_0x57e16d,!!_0x1b943e);}else return VisuMZ[_0x5039a2(0x80e)]['Settings'][_0x5039a2(0x606)][_0x5039a2(0xa8f)];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7d5)]=function(){const _0xa89f1=_0x3ffb9d;if(this[_0xa89f1(0x6d7)][_0xa89f1(0x549)]!==undefined)return this[_0xa89f1(0x6d7)]['svAnchorX'];return this[_0xa89f1(0x6aa)]()[_0xa89f1(0x365)][_0xa89f1(0x1b7)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?(this[_0xa89f1(0x6d7)][_0xa89f1(0x549)]=eval(RegExp['$1']),this[_0xa89f1(0x6d7)][_0xa89f1(0x4ad)]=eval(RegExp['$2'])):this[_0xa89f1(0x6d7)]['svAnchorX']=Game_Battler[_0xa89f1(0xb66)][_0xa89f1(0x7d5)][_0xa89f1(0x73d)](this),this[_0xa89f1(0x6d7)][_0xa89f1(0x549)];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x572)]=function(){const _0x3a3bf0=_0x3ffb9d;if(this[_0x3a3bf0(0x6d7)]['svAnchorY']!==undefined)return this[_0x3a3bf0(0x6d7)][_0x3a3bf0(0x4ad)];return this[_0x3a3bf0(0x6aa)]()[_0x3a3bf0(0x365)][_0x3a3bf0(0x1b7)](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)?'whRaA'!=='EqGAJ'?(this['_cache'][_0x3a3bf0(0x549)]=eval(RegExp['$1']),this[_0x3a3bf0(0x6d7)]['svAnchorY']=eval(RegExp['$2'])):this[_0x3a3bf0(0xa84)](_0x3a3bf0(0x7c9)):this[_0x3a3bf0(0x6d7)]['svAnchorY']=Game_Battler[_0x3a3bf0(0xb66)][_0x3a3bf0(0x572)]['call'](this),this[_0x3a3bf0(0x6d7)]['svAnchorY'];},Game_Actor[_0x3ffb9d(0xb66)]['svBattlerShadowVisible']=function(){const _0x3f1426=_0x3ffb9d;if(this['_cache'][_0x3f1426(0x3b5)]!==undefined)return this[_0x3f1426(0x6d7)][_0x3f1426(0x3b5)];if(this['actor']()[_0x3f1426(0x365)]['match'](/<SIDEVIEW SHOW SHADOW>/i))_0x3f1426(0x615)===_0x3f1426(0x615)?this[_0x3f1426(0x6d7)][_0x3f1426(0x3b5)]=!![]:(this['_effectsContainer']['x']=this['x'],this[_0x3f1426(0x1e6)]['y']=this['y']);else{if(this[_0x3f1426(0x6aa)]()[_0x3f1426(0x365)][_0x3f1426(0x1b7)](/<SIDEVIEW HIDE SHADOW>/i)){if(_0x3f1426(0xb42)===_0x3f1426(0x88a))return _0x13859f=_0x338103[_0x3f1426(0x614)]()[_0x3f1426(0x33a)](),this[_0x3f1426(0x65a)]()===_0x19e8df;else this[_0x3f1426(0x6d7)]['svShadow']=![];}else this[_0x3f1426(0x6d7)][_0x3f1426(0x3b5)]=Game_Battler[_0x3f1426(0xb66)][_0x3f1426(0x506)][_0x3f1426(0x73d)](this);}return this['_cache'][_0x3f1426(0x3b5)];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x23c)]=function(){const _0x5b0ae7=_0x3ffb9d;return VisuMZ['BattleCore'][_0x5b0ae7(0x901)][_0x5b0ae7(0x772)][_0x5b0ae7(0x27e)];},Game_Actor['prototype']['performWeaponAnimation']=function(){const _0x5ddcbd=_0x3ffb9d,_0x4bad41=this[_0x5ddcbd(0xa0d)](),_0x1d885d=_0x4bad41[0x0]?_0x4bad41[0x0][_0x5ddcbd(0xae6)]:0x0,_0x35b58e=$dataSystem['attackMotions'][_0x1d885d];_0x35b58e&&this[_0x5ddcbd(0x1cb)](_0x35b58e[_0x5ddcbd(0x29b)]);},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8f9)]=function(_0x88cd3a){const _0x1e2a50=_0x3ffb9d;Game_Battler[_0x1e2a50(0xb66)][_0x1e2a50(0x8f9)][_0x1e2a50(0x73d)](this,_0x88cd3a),this[_0x1e2a50(0x6a3)](_0x88cd3a);},Game_Actor[_0x3ffb9d(0xb66)]['getAttackMotion']=function(){const _0x417cb2=_0x3ffb9d,_0x251ee7=this['weapons'](),_0x3b747e=_0x251ee7[0x0]?_0x251ee7[0x0][_0x417cb2(0xae6)]:0x0;return $dataSystem['attackMotions'][_0x3b747e];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x67d)]=function(_0x82a4b0){const _0x5a4aca=_0x3ffb9d;_0x82a4b0=_0x82a4b0||0x1,_0x82a4b0--;const _0x267a83=this[_0x5a4aca(0xa0d)]();return _0x267a83[_0x82a4b0]?_0x267a83[_0x82a4b0][_0x5a4aca(0xacf)]:0x0;},Game_Actor['prototype'][_0x3ffb9d(0x653)]=function(_0x20ad73){const _0x1da87c=_0x3ffb9d;_0x20ad73=_0x20ad73||0x1,_0x20ad73--;const _0x56a107=this[_0x1da87c(0xa0d)](),_0x49412e=_0x56a107[_0x20ad73]?_0x56a107[_0x20ad73][_0x1da87c(0xae6)]:0x0;return $dataSystem[_0x1da87c(0x85a)][_0x49412e];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x70a)]=function(_0x2f662b){const _0x5287f7=_0x3ffb9d;_0x2f662b=_0x2f662b||0x1,_0x2f662b--;const _0x29124c=this[_0x5287f7(0xa0d)](),_0x191a10=_0x29124c[_0x2f662b]?_0x29124c[_0x2f662b][_0x5287f7(0xae6)]:0x0,_0x24e662=$dataSystem[_0x5287f7(0x85a)][_0x191a10];if(_0x24e662){if(_0x5287f7(0xbef)==='szfXf')_0x3efae7[_0x5287f7(0x80e)]['Settings']['Actor'][_0x5287f7(0xbe3)][_0x5287f7(0x73d)](this,_0x402a62);else{if(_0x24e662['type']===0x0)this[_0x5287f7(0x42c)](_0x5287f7(0x8d5));else{if(_0x24e662[_0x5287f7(0x97d)]===0x1)this[_0x5287f7(0x42c)](_0x5287f7(0x243));else _0x24e662['type']===0x2&&this[_0x5287f7(0x42c)](_0x5287f7(0xc13));}this['startWeaponAnimation'](_0x24e662['weaponImageId']);}}},Game_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7d1)]=function(_0x38d89e){const _0x283109=_0x3ffb9d;this[_0x283109(0x7c8)]=_0x38d89e||0x0,this[_0x283109(0x6d7)]={};},Game_Battler[_0x3ffb9d(0xb66)]['nextActiveWeaponSlot']=function(){const _0x45830d=_0x3ffb9d;this['_activeWeaponSlot']=this[_0x45830d(0x7c8)]||0x0,this[_0x45830d(0x7c8)]++,this[_0x45830d(0x6d7)]={};},Game_Battler['prototype'][_0x3ffb9d(0x73f)]=function(){this['_activeWeaponSlot']=undefined,this['_cache']={};},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xa3e)]=Game_Actor['prototype'][_0x3ffb9d(0x1b0)],Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1b0)]=function(){const _0x1fb527=_0x3ffb9d;let _0x503b11=VisuMZ['BattleCore']['Game_Actor_equips'][_0x1fb527(0x73d)](this);if(this['_tempEquipCheck'])return _0x503b11;if(this[_0x1fb527(0x7c8)]!==undefined){this[_0x1fb527(0xa8c)]=!![];const _0x5c398b=this[_0x1fb527(0xbde)]();for(let _0x22bf1a=0x0;_0x22bf1a<_0x5c398b[_0x1fb527(0x205)];_0x22bf1a++){_0x5c398b[_0x22bf1a]===0x1&&this[_0x1fb527(0x7c8)]!==_0x22bf1a&&(_0x503b11[_0x22bf1a]=null);}this[_0x1fb527(0xa8c)]=undefined;}return _0x503b11;},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1c9)]=function(_0x9b34df){const _0x2f3738=_0x3ffb9d;if(_0x9b34df[_0x2f3738(0x2bb)]()){if(_0x2f3738(0x8d1)==='zEWAF'){if(!_0x1acce2[_0x2f3738(0xb66)][_0x2f3738(0x49d)]['call'](this,_0x34635d))return!![];if(!_0x2892ee[_0x2f3738(0xb66)][_0x2f3738(0x584)]['call'](this,_0x5bd3dd))return!![];if(!_0x698e29[_0x2f3738(0xb66)][_0x2f3738(0x6d8)]['call'](this,_0x191063))return!![];return![];}else return _0x9b34df[_0x2f3738(0xa0d)]()[_0x2f3738(0x205)]||0x1;}else return 0x1;},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x348)]=function(_0x9560cc,_0x1065f6){const _0x1d726d=_0x3ffb9d;if(_0x9560cc&&_0x9560cc[_0x1d726d(0x2bb)]()){if('uyZin'===_0x1d726d(0x57c))_0x9560cc[_0x1d726d(0x7d1)](_0x1065f6);else{const _0x23800b=_0x3e0cd8[_0x1d726d(0x365)];if(_0x23800b[_0x1d726d(0x1b7)](/<COMMAND REQUIRE LEARN>/i)){if(!this[_0x1d726d(0x4c8)][_0x1d726d(0xa22)](_0x57756c['id']))return![];}if(_0x23800b['match'](/<COMMAND REQUIRE ACCESS>/i)){if(!this[_0x1d726d(0x4c8)][_0x1d726d(0x33d)](_0x5e5d1e['id']))return![];}const _0x558381=_0x22b90a[_0x1d726d(0x80e)][_0x1d726d(0xb88)](_0x4186ff,_0x1d726d(0x9d7));if(_0x1589d4[_0x1d726d(0x80e)]['JS'][_0x558381]){if(!_0x3e2850[_0x1d726d(0x80e)]['JS'][_0x558381][_0x1d726d(0x73d)](this,this[_0x1d726d(0x4c8)],_0x10726c))return![];}return _0x601579['BattleCore']['CheckSkillCommandShowSwitches'](_0x3e6aad);}}this[_0x1d726d(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)]['clearActiveWeaponSet']=function(_0x34c7ee){const _0x5556f=_0x3ffb9d;_0x34c7ee&&_0x34c7ee['isActor']()&&_0x34c7ee['clearActiveWeaponSlot'](),this[_0x5556f(0x8d7)]();},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x881)]=function(){const _0x27b46d=_0x3ffb9d;let _0x4df774='battleUIOffsetX';if(this[_0x27b46d(0x24e)](_0x4df774))return this['_cache'][_0x4df774];return this[_0x27b46d(0x6d7)][_0x4df774]=this[_0x27b46d(0xaa9)](this[_0x27b46d(0x6aa)]()),this[_0x27b46d(0x6d7)][_0x4df774];},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2b5)]=function(){const _0x3a3a95=_0x3ffb9d;let _0x23c14a=_0x3a3a95(0x2b5);if(this[_0x3a3a95(0x24e)](_0x23c14a))return this[_0x3a3a95(0x6d7)][_0x23c14a];return this[_0x3a3a95(0x6d7)][_0x23c14a]=this[_0x3a3a95(0x1a6)](this[_0x3a3a95(0x6aa)]()),this['_cache'][_0x23c14a];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x200)]=Game_Enemy['prototype'][_0x3ffb9d(0x2eb)],Game_Enemy[_0x3ffb9d(0xb66)]['setup']=function(_0x1ed866,_0x185626,_0x5abcdd){const _0x434415=_0x3ffb9d;_0x1ed866=DataManager[_0x434415(0x657)](_0x1ed866),VisuMZ[_0x434415(0x80e)][_0x434415(0x200)][_0x434415(0x73d)](this,_0x1ed866,_0x185626,_0x5abcdd),Imported[_0x434415(0x800)]&&this[_0x434415(0x7d4)](),this[_0x434415(0x9cb)](),this['setupBattleCoreData'](),Imported[_0x434415(0x800)]&&(_0x434415(0x51f)!==_0x434415(0x51f)?this['createHpGaugeSprite']():this[_0x434415(0xbcb)]());},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9cb)]=function(){const _0x5efc22=_0x3ffb9d,_0x431e5b=VisuMZ[_0x5efc22(0x80e)][_0x5efc22(0x901)][_0x5efc22(0x5e5)];this['_attackAnimationId']=_0x431e5b[_0x5efc22(0x99d)],this[_0x5efc22(0xc23)]={};},Game_Enemy['prototype'][_0x3ffb9d(0x406)]=function(){const _0xd28c45=_0x3ffb9d,_0x3afd3c=VisuMZ[_0xd28c45(0x80e)][_0xd28c45(0x901)][_0xd28c45(0x5e5)],_0x43d0f5=this['enemy']()[_0xd28c45(0x365)];this[_0xd28c45(0xc23)]={'name':'','wtypeId':_0x3afd3c['WtypeId'],'collapse':_0x3afd3c['AllowCollapse'],'motionIdle':_0x3afd3c[_0xd28c45(0xa59)],'width':_0x3afd3c[_0xd28c45(0xc2e)]||0x40,'height':_0x3afd3c['Height']||0x40,'anchorX':_0x3afd3c[_0xd28c45(0x339)]||0x0,'anchorY':_0x3afd3c[_0xd28c45(0x451)]||0x0,'shadow':_0x3afd3c['Shadow']};_0x43d0f5[_0xd28c45(0x1b7)](/<ATTACK ANIMATION:[ ](\d+)>/i)&&(this['_attackAnimationId']=Number(RegExp['$1']));const _0x5ac98f=this[_0xd28c45(0xc23)];if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW BATTLER: (.*)>/i))_0x5ac98f[_0xd28c45(0x453)]=String(RegExp['$1']);else{if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW BATTLERS>\s*([\s\S]*)\s*<\/SIDEVIEW BATTLERS>/i)){const _0x303ee5=String(RegExp['$1'])['split'](/[\r\n]+/)['remove']('');_0x5ac98f[_0xd28c45(0x453)]=DataManager['processRandomizedData'](_0x303ee5);}}_0x43d0f5['match'](/<SIDEVIEW ANCHOR: (.*), (.*)>/i)&&(_0x5ac98f[_0xd28c45(0x1d0)]=eval(RegExp['$1']),_0x5ac98f[_0xd28c45(0xc0c)]=eval(RegExp['$2']));if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW COLLAPSE>/i))_0x5ac98f[_0xd28c45(0xafd)]=!![];else{if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW NO COLLAPSE>/i)){if(_0xd28c45(0x41f)!==_0xd28c45(0x41f)){const _0x1e196b=_0x570fb2(_0x55651e['$1'])[_0xd28c45(0x33a)](),_0x33feb9=_0x567fae(_0x539622['$2']);_0xdcf560[_0x1e196b]=_0x33feb9,_0x318d76+=_0x33feb9;}else _0x5ac98f[_0xd28c45(0xafd)]=![];}}if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW SHOW SHADOW>/i))'SVtDs'===_0xd28c45(0x993)?_0x51da80[_0xd28c45(0x80e)][_0xd28c45(0x809)][_0xd28c45(0x73d)](this,_0x226e5e):_0x5ac98f[_0xd28c45(0xbc9)]=!![];else _0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW HIDE SHADOW>/i)&&(_0x5ac98f['shadow']=![]);if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW IDLE MOTION: (.*)>/i)){if(_0xd28c45(0x61d)===_0xd28c45(0x191)){const _0x3fbf13=_0x4e3304[_0xd28c45(0x80e)][_0xd28c45(0x4ef)][_0xd28c45(0x73d)](this);return _0x3fbf13['autoBattleAtStart']=this['autoBattleAtStart'],_0x3fbf13[_0xd28c45(0xb59)]=this['autoBattleUseSkills'],_0x3fbf13[_0xd28c45(0x585)]=this[_0xd28c45(0x585)],_0x3fbf13;}else _0x5ac98f[_0xd28c45(0xae5)]=String(RegExp['$1'])[_0xd28c45(0x456)]()[_0xd28c45(0x33a)]();}else{if(_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW IDLE MOTIONS>\s*([\s\S]*)\s*<\/SIDEVIEW IDLE MOTIONS>/i)){if(_0xd28c45(0x5a6)===_0xd28c45(0x793)){const _0x458f5c=this[_0xd28c45(0x1e5)](_0x297457),_0x11662c=new(_0x458f5c?_0x45494b:_0x416086)(),_0x5c5b51=this[_0xd28c45(0x985)](_0x506242);this[_0xd28c45(0xa6f)](_0x13e60f[0x0])&&(_0x1324d6=!_0x4b0eb6),_0x11662c[_0xd28c45(0xb8d)]=_0x4c540d,_0x11662c[_0xd28c45(0x2eb)](_0x5c5b51,_0x311085,_0x31e73d,_0x45bb0c),this[_0xd28c45(0xbaa)](_0x11662c);}else{const _0x2babad=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xd28c45(0x7bc)]('');_0x5ac98f['motionIdle']=DataManager[_0xd28c45(0xb80)](_0x2babad);}}}_0x43d0f5[_0xd28c45(0x1b7)](/<SIDEVIEW SIZE: (\d+), (\d+)>/i)&&(_0x5ac98f[_0xd28c45(0x7d6)]=Number(RegExp['$1']),_0x5ac98f[_0xd28c45(0x8a0)]=Number(RegExp['$2']));if(_0x43d0f5['match'](/<SIDEVIEW WEAPON: (.*)>/i)){if(_0xd28c45(0x679)===_0xd28c45(0x284)){let _0x5c1f2b=_0x1d3708[_0xd28c45(0xa86)](_0x13983f['id']);this[_0xd28c45(0x221)](_0x5c1f2b);}else _0x5ac98f[_0xd28c45(0xae6)]=DataManager['getWtypeIdWithName'](RegExp['$1']);}else{if(_0x43d0f5['match'](/<SIDEVIEW WEAPONS>\s*([\s\S]*)\s*<\/SIDEVIEW WEAPONS>/i)){const _0x56a8cc=String(RegExp['$1'])[_0xd28c45(0x83d)](/[\r\n]+/)[_0xd28c45(0x7bc)](''),_0x1ba199=DataManager[_0xd28c45(0xb80)](_0x56a8cc);_0x5ac98f[_0xd28c45(0xae6)]=DataManager['getWtypeIdWithName'](_0x1ba199);}}if(Imported[_0xd28c45(0x800)]){if('EAuci'!==_0xd28c45(0xaa8)){const _0x1093ee=this['getTraitSetKeys']();for(const _0x4197b4 of _0x1093ee){if('zYBlA'==='zYBlA'){const _0x4c2995=this['traitSet'](_0x4197b4)['Name']['toUpperCase']()[_0xd28c45(0x33a)](),_0xb49905=_0x4197b4[_0xd28c45(0x614)]()[_0xd28c45(0x33a)]();if(_0x43d0f5[_0xd28c45(0x1b7)](VisuMZ[_0xd28c45(0x73e)][_0xd28c45(0xbd2)][_0xd28c45(0xada)[_0xd28c45(0x4a7)](_0xb49905,_0x4c2995)])){if(_0xd28c45(0x8be)!==_0xd28c45(0x9e8))_0x5ac98f[_0xd28c45(0x453)]=String(RegExp['$1']);else{if(!this['_battler'][_0xd28c45(0x77f)]())return;const _0x38c5d0=_0xd195e9[_0xd28c45(0x80e)][_0xd28c45(0x901)][_0xd28c45(0xa45)],_0x4f0ee6=new _0x5554bc();_0x4f0ee6[_0xd28c45(0x62c)]=_0x38c5d0[_0xd28c45(0x564)],this[_0xd28c45(0x22c)](_0x4f0ee6),_0x4f0ee6['setupTextPopup'](_0x227a16,_0x19fc16),this['addDamageSprite'](_0x4f0ee6);}}else{if(_0x43d0f5[_0xd28c45(0x1b7)](VisuMZ[_0xd28c45(0x73e)][_0xd28c45(0xbd2)]['SvBattlerMass-%1-%2'[_0xd28c45(0x4a7)](_0xb49905,_0x4c2995)])){const _0x39882f=String(RegExp['$1'])['split'](/[\r\n]+/)[_0xd28c45(0x7bc)]('');_0x5ac98f[_0xd28c45(0x453)]=DataManager['processRandomizedData'](_0x39882f);}}if(_0x43d0f5[_0xd28c45(0x1b7)](VisuMZ[_0xd28c45(0x73e)]['RegExp'][_0xd28c45(0x5ca)['format'](_0xb49905,_0x4c2995)]))_0x5ac98f[_0xd28c45(0xae6)]=DataManager[_0xd28c45(0x8fb)](RegExp['$1']);else{if(_0x43d0f5[_0xd28c45(0x1b7)](VisuMZ[_0xd28c45(0x73e)][_0xd28c45(0xbd2)]['SvWeaponMass-%1-%2'[_0xd28c45(0x4a7)](_0xb49905,_0x4c2995)])){if(_0xd28c45(0x9c0)==='EGEiQ'){const _0x515be7=String(RegExp['$1'])['split'](/[\r\n]+/)['remove'](''),_0x2e7004=DataManager[_0xd28c45(0xb80)](_0x515be7);_0x5ac98f['wtypeId']=DataManager[_0xd28c45(0x8fb)](_0x2e7004);}else{const _0x11048e=_0x208997[_0xd28c45(0x6aa)]();if(_0x11048e&&_0x11048e['battler'])_0x11048e[_0xd28c45(0x491)]()[_0xd28c45(0xaa6)]();_0x2359a4[_0xd28c45(0x80e)][_0xd28c45(0x4cf)]['call'](this);}}}if(_0x43d0f5[_0xd28c45(0x1b7)](VisuMZ[_0xd28c45(0x73e)][_0xd28c45(0xbd2)][_0xd28c45(0x53f)[_0xd28c45(0x4a7)](_0xb49905,_0x4c2995)]))_0x5ac98f[_0xd28c45(0xae5)]=String(RegExp['$1'])[_0xd28c45(0x456)]()[_0xd28c45(0x33a)]();else{if(_0x43d0f5[_0xd28c45(0x1b7)](VisuMZ[_0xd28c45(0x73e)][_0xd28c45(0xbd2)][_0xd28c45(0x4b9)[_0xd28c45(0x4a7)](_0xb49905,_0x4c2995)])){const _0x104c1c=String(RegExp['$1'])[_0xd28c45(0x83d)](/[\r\n]+/)[_0xd28c45(0x7bc)]('');_0x5ac98f['motionIdle']=DataManager[_0xd28c45(0xb80)](_0x104c1c);}}}else{const _0x18f966=_0x19bb0d['x']+_0x529f9e[_0xd28c45(0x9bd)]((_0x4f78f6[_0xd28c45(0x7d6)]-_0x5829f4)/0x2);this[_0xd28c45(0xb91)](_0x22df78,_0x18f966,_0xb6db73['y'],_0x37aa52);}}}else return _0x2d6d5b[_0xd28c45(0x80e)][_0xd28c45(0x901)][_0xd28c45(0xbd3)]['CalcActionSpeedJS']['call'](this);}},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x93f)]=function(){const _0x3b7afc=_0x3ffb9d;return this[_0x3b7afc(0x52b)]||0x0;},Game_Enemy['prototype'][_0x3ffb9d(0xa63)]=function(){return this['attackAnimationId1']();},Game_Enemy[_0x3ffb9d(0xb66)]['attackAnimationIdSlot']=function(_0x61e19b){return this['attackAnimationId1']();},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa78)]=function(){const _0x47f94d=_0x3ffb9d;if(this[_0x47f94d(0x402)]()[_0x47f94d(0x365)][_0x47f94d(0x1b7)](/<BATTLER SPRITE CANNOT MOVE>/i))return![];return Game_Battler[_0x47f94d(0xb66)][_0x47f94d(0xa78)]['call'](this);},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3f8)]=function(){const _0x5ba795=_0x3ffb9d;if(this[_0x5ba795(0x402)]()[_0x5ba795(0x365)][_0x5ba795(0x1b7)](/<BATTLER SPRITE GROUNDED>/i))return!![];return![];},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x919)]=function(){const _0x1544f4=_0x3ffb9d,_0x10b34a=[];for(const _0x19a6d5 of this[_0x1544f4(0x402)]()[_0x1544f4(0x2d4)]){const _0x38c8f1=$dataSkills[_0x19a6d5[_0x1544f4(0x207)]];if(_0x38c8f1&&!_0x10b34a[_0x1544f4(0x802)](_0x38c8f1))_0x10b34a[_0x1544f4(0x7dd)](_0x38c8f1);}return _0x10b34a;},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x881)]=function(){const _0x5b5582=_0x3ffb9d;let _0x15a95e=_0x5b5582(0x881);if(this[_0x5b5582(0x24e)](_0x15a95e))return this['_cache'][_0x15a95e];return this[_0x5b5582(0x6d7)][_0x15a95e]=this[_0x5b5582(0xaa9)](this[_0x5b5582(0x402)]()),this['_cache'][_0x15a95e];},Game_Enemy['prototype']['battleUIOffsetY']=function(){const _0x5e3509=_0x3ffb9d;let _0x4a02a9=_0x5e3509(0x2b5);if(this[_0x5e3509(0x24e)](_0x4a02a9))return this['_cache'][_0x4a02a9];return this['_cache'][_0x4a02a9]=this[_0x5e3509(0x1a6)](this[_0x5e3509(0x402)]()),this[_0x5e3509(0x6d7)][_0x4a02a9];},Game_Enemy['prototype'][_0x3ffb9d(0x376)]=function(){const _0x202e5b=_0x3ffb9d;if(this[_0x202e5b(0xc23)]!==undefined)return this[_0x202e5b(0xc23)];return this[_0x202e5b(0x406)](),this['_svBattlerData'];},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc11)]=function(){const _0xc27420=_0x3ffb9d;return this[_0xc27420(0x376)]()[_0xc27420(0x453)]!=='';},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3aa)]=function(){const _0x277805=_0x3ffb9d;return this[_0x277805(0x376)]()[_0x277805(0x453)];},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x23c)]=function(){const _0x246fae=_0x3ffb9d;return this[_0x246fae(0xc11)]()?VisuMZ[_0x246fae(0x80e)][_0x246fae(0x901)][_0x246fae(0x772)][_0x246fae(0x27e)]:VisuMZ['BattleCore'][_0x246fae(0x901)]['Enemy']['SmoothImage'];},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8f9)]=function(_0x3f92e3){const _0x24170f=_0x3ffb9d;Game_Battler[_0x24170f(0xb66)][_0x24170f(0x8f9)]['call'](this,_0x3f92e3);if(this[_0x24170f(0xc11)]())this[_0x24170f(0x6a3)](_0x3f92e3);},Game_Enemy['prototype'][_0x3ffb9d(0xa13)]=function(){const _0x3bbbe0=_0x3ffb9d,_0x3ecebb=this[_0x3bbbe0(0x376)]()[_0x3bbbe0(0xae6)]||0x0,_0x375d46=$dataSystem[_0x3bbbe0(0x85a)][_0x3ecebb];if(_0x375d46){if(_0x3bbbe0(0xb2b)!==_0x3bbbe0(0xb2b)){_0x42d68a[_0x3bbbe0(0x80e)][_0x3bbbe0(0x3cb)]['call'](this);if(this[_0x3bbbe0(0xb85)])this['processRefresh']();}else{if(_0x375d46['type']===0x0)this['requestMotion'](_0x3bbbe0(0x8d5));else{if(_0x375d46['type']===0x1)this['requestMotion']('swing');else _0x375d46[_0x3bbbe0(0x97d)]===0x2&&this[_0x3bbbe0(0x42c)](_0x3bbbe0(0xc13));}}}},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4de)]=function(){const _0x3a1b76=_0x3ffb9d,_0x1840db=this[_0x3a1b76(0x376)]()['wtypeId']||0x0,_0x1635eb=$dataSystem[_0x3a1b76(0x85a)][_0x1840db];_0x1635eb&&this[_0x3a1b76(0x1cb)](_0x1635eb['weaponImageId']);},Game_Enemy['prototype'][_0x3ffb9d(0x5df)]=function(){const _0x5e7a0d=_0x3ffb9d,_0x5e8931=this[_0x5e7a0d(0x376)]()[_0x5e7a0d(0xae6)]||0x0;return $dataSystem[_0x5e7a0d(0x85a)][_0x5e8931];},Game_Enemy['prototype'][_0x3ffb9d(0x653)]=function(_0x3ea4d8){return this['getAttackMotion']();},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x887)]=function(){const _0x295021=_0x3ffb9d;Game_Battler['prototype'][_0x295021(0x887)][_0x295021(0x73d)](this),this[_0x295021(0x77f)]()&&this['hasSvBattler']()&&(_0x295021(0x66c)===_0x295021(0x66c)?this['requestMotion'](_0x295021(0xbfc)):_0x5976b1[_0x295021(0xb66)]['updatePadding'][_0x295021(0x73d)](this)),SoundManager[_0x295021(0x7be)]();},Game_Enemy[_0x3ffb9d(0xb66)]['performEvasion']=function(){const _0x3c15cd=_0x3ffb9d;Game_Battler[_0x3c15cd(0xb66)][_0x3c15cd(0x96f)][_0x3c15cd(0x73d)](this),this[_0x3c15cd(0x42c)]('evade');},Game_Enemy[_0x3ffb9d(0xb66)]['performMagicEvasion']=function(){const _0x13b142=_0x3ffb9d;Game_Battler[_0x13b142(0xb66)][_0x13b142(0x2a2)][_0x13b142(0x73d)](this),this[_0x13b142(0x42c)](_0x13b142(0x6a2));},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x53d)]=function(){const _0x37d0e0=_0x3ffb9d;Game_Battler[_0x37d0e0(0xb66)][_0x37d0e0(0x53d)]['call'](this),this[_0x37d0e0(0xa13)]();},Game_Enemy['prototype'][_0x3ffb9d(0xb70)]=function(){const _0x5aa3d9=_0x3ffb9d;if(this[_0x5aa3d9(0xc11)]()){if(this['collapseType']()>=0x1)return!![];return this[_0x5aa3d9(0x376)]()[_0x5aa3d9(0xafd)];}else{if('hrWub'==='IZliX')this[_0x5aa3d9(0x28f)]();else return!![];}},Game_Enemy[_0x3ffb9d(0xb66)]['svBattlerAnchorX']=function(){const _0x42cea1=_0x3ffb9d;return this[_0x42cea1(0x376)]()['anchorX'];},Game_Enemy[_0x3ffb9d(0xb66)]['svBattlerAnchorY']=function(){const _0xa917b1=_0x3ffb9d;return this[_0xa917b1(0x376)]()['anchorY'];},Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x506)]=function(){const _0xc34288=_0x3ffb9d;return this[_0xc34288(0x376)]()[_0xc34288(0xbc9)];},VisuMZ['BattleCore']['Game_Enemy_transform']=Game_Enemy[_0x3ffb9d(0xb66)]['transform'],Game_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4b0)]=function(_0x2408c8){const _0x51f411=_0x3ffb9d;VisuMZ['BattleCore'][_0x51f411(0xc09)][_0x51f411(0x73d)](this,_0x2408c8),this['clearBattleCoreData'](),this['setupBattleCoreData']();const _0x555961=this[_0x51f411(0x491)]();if(_0x555961)_0x555961[_0x51f411(0x427)](this);},Game_Unit[_0x3ffb9d(0xb66)][_0x3ffb9d(0x722)]=function(_0x68c16c){const _0x122f2f=_0x3ffb9d;for(const _0x3fca5a of this[_0x122f2f(0x794)]()){if(_0x122f2f(0x6ef)===_0x122f2f(0xa6e))this[_0x122f2f(0x6d7)][_0x122f2f(0x549)]=_0x2ae2c1(_0x115a60['$1']),this['_cache']['svAnchorY']=_0x1cdb07(_0x15bcc5['$2']);else{if(_0x3fca5a)_0x3fca5a[_0x122f2f(0x722)](_0x68c16c);}}},Game_Unit['prototype'][_0x3ffb9d(0xbf1)]=function(){const _0x17a331=_0x3ffb9d,_0x3d5f92=this[_0x17a331(0x735)]();return _0x3d5f92[Math[_0x17a331(0x3ab)](_0x3d5f92[_0x17a331(0x205)])];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xaf3)]=Game_Party['prototype']['addActor'],Game_Party['prototype'][_0x3ffb9d(0xb0d)]=function(_0x2e1246){const _0x242560=_0x3ffb9d;VisuMZ['BattleCore'][_0x242560(0xaf3)]['call'](this,_0x2e1246),BattleManager[_0x242560(0x5d3)]();},VisuMZ[_0x3ffb9d(0x80e)]['Game_Party_removeActor']=Game_Party['prototype'][_0x3ffb9d(0x272)],Game_Party[_0x3ffb9d(0xb66)][_0x3ffb9d(0x272)]=function(_0x343b77){const _0xfcda14=_0x3ffb9d;VisuMZ[_0xfcda14(0x80e)]['Game_Party_removeActor'][_0xfcda14(0x73d)](this,_0x343b77),BattleManager[_0xfcda14(0x5d3)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xafe)]=Game_Troop[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2eb)],Game_Troop[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2eb)]=function(_0x415d32){const _0x5c643d=_0x3ffb9d;$gameTemp['clearForcedGameTroopSettingsBattleCore'](),$gameTemp[_0x5c643d(0x97f)](_0x415d32),VisuMZ['BattleCore'][_0x5c643d(0xafe)][_0x5c643d(0x73d)](this,_0x415d32);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x62d)]=Game_Troop[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2cf)],Game_Troop[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2cf)]=function(){const _0x1dbaea=_0x3ffb9d;let _0x5bd21a=VisuMZ['BattleCore'][_0x1dbaea(0x62d)][_0x1dbaea(0x73d)](this);return this[_0x1dbaea(0x8f6)]&&(_0x5bd21a*=this[_0x1dbaea(0x8f6)]()),Math[_0x1dbaea(0x21e)](_0x5bd21a);},Game_Troop[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8f6)]=function(){return 0x1;},VisuMZ['BattleCore'][_0x3ffb9d(0x47c)]=Game_Map['prototype'][_0x3ffb9d(0x8f2)],Game_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8f2)]=function(){const _0x253f9d=_0x3ffb9d;VisuMZ[_0x253f9d(0x80e)][_0x253f9d(0x47c)][_0x253f9d(0x73d)](this),this[_0x253f9d(0x58f)]();},Game_Map[_0x3ffb9d(0xb66)]['setupBattlebackBattleCore']=function(){const _0x4925a7=_0x3ffb9d;this[_0x4925a7(0x6ce)]={},this[_0x4925a7(0x848)]={};if(!$dataMap)return;const _0xa50fa5=$dataMap[_0x4925a7(0x365)];if(!_0xa50fa5)return;const _0x35c405=_0xa50fa5['match'](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/gi);if(_0x35c405)for(const _0x50f9e9 of _0x35c405){_0x50f9e9[_0x4925a7(0x1b7)](/<REGION (\d+) BATTLEBACK(\d+): (.*)>/i);const _0x25c659=Number(RegExp['$1']),_0x1973ea=Number(RegExp['$2']),_0x4c6cdb=_0x1973ea===0x1?this[_0x4925a7(0x6ce)]:this[_0x4925a7(0x848)],_0x531658=String(RegExp['$3']);_0x4c6cdb[_0x25c659]=_0x531658;}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6d9)]=Game_Map['prototype']['battleback1Name'],Game_Map['prototype'][_0x3ffb9d(0xa2e)]=function(){const _0x196b2a=_0x3ffb9d;if(!BattleManager['isBattleTest']()){if('dLQoo'!==_0x196b2a(0x486))this['battler']()&&this[_0x196b2a(0x491)]()[_0x196b2a(0xa68)]();else{const _0x24bf32=$gamePlayer[_0x196b2a(0x512)]($gamePlayer['x'],$gamePlayer['y']);if(this[_0x196b2a(0x6ce)]&&this[_0x196b2a(0x6ce)][_0x24bf32]){if(_0x196b2a(0x7ac)!==_0x196b2a(0x7ac))this[_0x196b2a(0xaff)](this['_backAttachmentSprite']);else return this[_0x196b2a(0x6ce)][_0x24bf32];}}}return VisuMZ[_0x196b2a(0x80e)]['Game_Map_battleback1Name'][_0x196b2a(0x73d)](this);},VisuMZ['BattleCore']['Game_Map_battleback2Name']=Game_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9ca)],Game_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9ca)]=function(){const _0x5a618b=_0x3ffb9d;if(!BattleManager[_0x5a618b(0x97b)]()){const _0x2874b9=$gamePlayer[_0x5a618b(0x512)]($gamePlayer['x'],$gamePlayer['y']);if(this['_regionBattleback1']&&this[_0x5a618b(0x848)][_0x2874b9])return this[_0x5a618b(0x848)][_0x2874b9];}return VisuMZ[_0x5a618b(0x80e)][_0x5a618b(0x48b)][_0x5a618b(0x73d)](this);},VisuMZ['BattleCore'][_0x3ffb9d(0x88e)]=Game_Map[_0x3ffb9d(0xb66)]['encounterList'],Game_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0x641)]=function(){const _0x51191e=_0x3ffb9d;let _0x2a2cd5=JsonEx[_0x51191e(0x965)](VisuMZ[_0x51191e(0x80e)][_0x51191e(0x88e)][_0x51191e(0x73d)](this));return VisuMZ[_0x51191e(0x80e)][_0x51191e(0x6c9)](_0x2a2cd5);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6c9)]=function(_0x163b84){const _0x27cf27=_0x3ffb9d;var _0x9a38da,_0x44647d,_0x1e2802;for(_0x1e2802=_0x163b84['length']-0x1;_0x1e2802>0x0;_0x1e2802--){_0x9a38da=Math[_0x27cf27(0x9bd)](Math[_0x27cf27(0xbdb)]()*(_0x1e2802+0x1)),_0x44647d=_0x163b84[_0x1e2802],_0x163b84[_0x1e2802]=_0x163b84[_0x9a38da],_0x163b84[_0x9a38da]=_0x44647d;}return _0x163b84;},VisuMZ[_0x3ffb9d(0x80e)]['Game_Interpreter_PluginCommand']=Game_Interpreter['prototype'][_0x3ffb9d(0x6a5)],Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6a5)]=function(_0x300566){const _0x218f48=_0x3ffb9d;return $gameTemp[_0x218f48(0x8d3)](this),VisuMZ[_0x218f48(0x80e)][_0x218f48(0x43f)][_0x218f48(0x73d)](this,_0x300566);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x9f0)]=Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2b9)],Game_Interpreter[_0x3ffb9d(0xb66)]['updateWaitMode']=function(){const _0x5be9f5=_0x3ffb9d;if(SceneManager['isSceneBattle']())switch(this[_0x5be9f5(0x798)]){case'battleAngle':if(Imported[_0x5be9f5(0x8ba)]){if($gameScreen[_0x5be9f5(0x320)]()[_0x5be9f5(0x47b)]>0x0)return!![];this[_0x5be9f5(0x798)]='';}break;case'battleAnimation':if(BattleManager[_0x5be9f5(0x9da)][_0x5be9f5(0x5b9)]())return!![];this['_waitMode']='';break;case _0x5be9f5(0xbf5):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen[_0x5be9f5(0x320)]()[_0x5be9f5(0x4ba)]>0x0)return!![];if($gameScreen['battleCameraData']()['cameraOffsetDuration']>0x0)return!![];this['_waitMode']='';}break;case'battleEffect':if(BattleManager[_0x5be9f5(0x9da)][_0x5be9f5(0x61f)]())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0xa08):if(BattleManager['_spriteset']['isAnyoneFloating']())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0x4a8):if(BattleManager[_0x5be9f5(0x9da)]['isAnyoneJumping']())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0x725):if(BattleManager[_0x5be9f5(0x492)]['isBusy']())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0x5b4):if(BattleManager[_0x5be9f5(0x9da)]['isAnyoneMoving']())return!![];this['_waitMode']='';break;case'battleOpacity':if(BattleManager[_0x5be9f5(0x9da)][_0x5be9f5(0x6a4)]())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0xb1e):if(BattleManager[_0x5be9f5(0x9da)][_0x5be9f5(0x5cb)]())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0x5d8):if(BattleManager['_spriteset'][_0x5be9f5(0xb0e)]())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0x193):if(Imported[_0x5be9f5(0x4ae)]){if(BattleManager[_0x5be9f5(0x9da)][_0x5be9f5(0x937)]())return!![];this['_waitMode']='';}break;case _0x5be9f5(0x6b0):if(Imported[_0x5be9f5(0x8ba)]){if($gameScreen['battleCameraData']()[_0x5be9f5(0xaaf)]>0x0)return!![];this[_0x5be9f5(0x798)]='';}break;case _0x5be9f5(0x3eb):if(BattleManager[_0x5be9f5(0x9da)][_0x5be9f5(0x1ed)]())return!![];this[_0x5be9f5(0x798)]='';break;case _0x5be9f5(0x872):if(Imported['VisuMZ_3_ActSeqCamera']){if($gameScreen['battleCameraData']()[_0x5be9f5(0x93b)]>0x0)return!![];this[_0x5be9f5(0x798)]='';}break;}return VisuMZ[_0x5be9f5(0x80e)]['Game_Interpreter_updateWaitMode']['call'](this);},VisuMZ[_0x3ffb9d(0x80e)]['Game_Interpreter_command301']=Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9b2)],Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9b2)]=function(_0x14d941){const _0x4bde3c=_0x3ffb9d;return!$gameParty[_0x4bde3c(0xa15)]()?this[_0x4bde3c(0x3d9)](_0x14d941):VisuMZ[_0x4bde3c(0x80e)][_0x4bde3c(0x68c)]['call'](this,_0x14d941);},Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x529)]=function(_0x1f7e42){const _0x12b756=_0x3ffb9d;return VisuMZ[_0x12b756(0x80e)]['Game_Interpreter_command301'][_0x12b756(0x73d)](this,_0x1f7e42),BattleManager[_0x12b756(0x51b)](_0x3d06bb=>{const _0x2ac01b=_0x12b756;if('rnSVv'!==_0x2ac01b(0xc1d))this[_0x2ac01b(0xa21)][this[_0x2ac01b(0x443)]]=_0x3d06bb;else{if(!_0x450fe1[_0x2ac01b(0x341)]())return;_0x1c86e2[_0x2ac01b(0xb83)](_0x280ce2,_0x1964b9);const _0x43d52f=_0xd4c16b[_0x2ac01b(0x292)](),_0x4a6ac8=_0x376668[_0x2ac01b(0x58b)],_0x9fc4d1=_0x49e94e[_0x2ac01b(0xa98)],_0x1963f2=_0x1ed7e7[_0x2ac01b(0x4ff)]?_0xbb61c7[_0x2ac01b(0x4ff)][_0x2ac01b(0xa39)](0x0):[],_0x150821=_0xdb222b[_0x2ac01b(0x492)];if(!_0x43d52f||!_0x4a6ac8||!_0x9fc4d1)return;if(!_0x4a6ac8[_0x2ac01b(0x33b)]())return;if(_0x1256c4[_0x2ac01b(0x8a1)])_0x150821[_0x2ac01b(0x7dd)](_0x2ac01b(0x80f),_0x9fc4d1,_0x1963f2,![]);if(_0x5183a0['WaitForNewLine'])_0x150821[_0x2ac01b(0x7dd)](_0x2ac01b(0x1c4));if(_0x1fcadc['WaitForEffect'])_0x150821[_0x2ac01b(0x7dd)](_0x2ac01b(0xb4e));if(_0x1dcf3e['ClearBattleLog'])_0x150821[_0x2ac01b(0x7dd)](_0x2ac01b(0x75e));if(_0x210066[_0x2ac01b(0xac9)])_0x150821[_0x2ac01b(0x7dd)](_0x2ac01b(0xb93),_0x9fc4d1);if(_0x1253a6[_0x2ac01b(0x6dc)])_0x150821[_0x2ac01b(0x7dd)]('waitForMovement');_0x43d52f[_0x2ac01b(0x27b)](_0x2ac01b(0x725));}}),!![];},VisuMZ['BattleCore'][_0x3ffb9d(0xa4b)]=function(_0x37a6eb){const _0x337fae=_0x3ffb9d,_0x5875a3=$dataCommonEvents[_0x37a6eb];if(!_0x5875a3)return![];if(_0x5875a3['list'][_0x337fae(0x205)]<=0x1)return![];return!![];},Game_Interpreter['prototype']['command301_PreBattleEvent']=function(_0x3a71ab){const _0x3b65eb=_0x3ffb9d,_0x37b338=VisuMZ[_0x3b65eb(0x80e)][_0x3b65eb(0x901)][_0x3b65eb(0xbd3)],_0x10a750=_0x37b338[_0x3b65eb(0x1c3)],_0x399073=$dataCommonEvents[_0x10a750];if(_0x399073&&VisuMZ[_0x3b65eb(0x80e)][_0x3b65eb(0xa4b)](_0x10a750)){const _0x12f588=this[_0x3b65eb(0x1fa)]()?this[_0x3b65eb(0xaa3)]:0x0,_0x3b4282=_0x399073[_0x3b65eb(0x728)];this['setupChild'](_0x3b4282,_0x12f588),this['_list']=JsonEx['makeDeepCopy'](this['_list']);const _0x59fd62={'code':0xbc3,'indent':this[_0x3b65eb(0x443)],'parameters':JsonEx['makeDeepCopy'](_0x3a71ab)};return this[_0x3b65eb(0x330)][_0x3b65eb(0xa9d)](this['_index']+0x1,0x0,_0x59fd62),!![];}else{if(_0x3b65eb(0xad5)!==_0x3b65eb(0xad5)){if(!_0x3e0be9[_0x3b65eb(0x341)]())return;if(!_0x2feff9[_0x3b65eb(0x800)])return;_0x17839a[_0x3b65eb(0xb83)](_0xb96523,_0x24afc6);const _0x1a7f82=_0x2e282b['_action'],_0x5e00f2=_0x558fbe['Elements'];if(!_0x1a7f82)return;_0x1a7f82[_0x3b65eb(0x2d6)]=_0x5e00f2;}else return VisuMZ[_0x3b65eb(0x80e)][_0x3b65eb(0x68c)][_0x3b65eb(0x73d)](this,_0x3a71ab);}},VisuMZ['BattleCore'][_0x3ffb9d(0xa36)]=BattleManager['onEncounter'],BattleManager[_0x3ffb9d(0xbd9)]=function(){const _0xf56ac1=_0x3ffb9d;VisuMZ['BattleCore'][_0xf56ac1(0xa36)][_0xf56ac1(0x73d)](this),this[_0xf56ac1(0xa7d)]();},BattleManager['onEncounterBattleCore']=function(){const _0x4615b8=_0x3ffb9d,_0x244ee9=VisuMZ[_0x4615b8(0x80e)][_0x4615b8(0x901)][_0x4615b8(0xbd3)],_0x14a132=_0x244ee9[_0x4615b8(0x1c3)];_0x14a132&&VisuMZ[_0x4615b8(0x80e)][_0x4615b8(0xa4b)](_0x14a132)&&('cLLfT'!==_0x4615b8(0x927)?_0x4fc514=[_0x4615b8(0x8d5),'swing','missile'][_0x479dff['type']]||_0x4615b8(0x243):(this['_battleCoreBattleStartEvent']=!![],$gameTemp[_0x4615b8(0x9fc)](_0x244ee9[_0x4615b8(0x1c3)]),$gameMap[_0x4615b8(0xc12)](),$gameMap[_0x4615b8(0x576)][_0x4615b8(0x8fd)]=!![])),_0x244ee9[_0x4615b8(0x8ef)]>0x0&&(this[_0x4615b8(0x248)]=!![]);},VisuMZ['BattleCore'][_0x3ffb9d(0x9dc)]=Scene_Map['prototype'][_0x3ffb9d(0x592)],Scene_Map['prototype'][_0x3ffb9d(0x592)]=function(){const _0x56ac47=_0x3ffb9d;if(BattleManager[_0x56ac47(0x55c)])return;VisuMZ[_0x56ac47(0x80e)]['Scene_Map_updateCallMenu']['call'](this);},VisuMZ[_0x3ffb9d(0x80e)]['Scene_Map_launchBattle']=Scene_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3fe)],Scene_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3fe)]=function(){const _0x418294=_0x3ffb9d;BattleManager[_0x418294(0x55c)]?_0x418294(0x7bf)===_0x418294(0x1a5)?(_0x329aea[_0x418294(0x80e)][_0x418294(0x8c5)]['call'](this,_0x35b6e2),this[_0x418294(0x8d7)]()):this[_0x418294(0x33e)]():VisuMZ['BattleCore'][_0x418294(0x474)][_0x418294(0x73d)](this);},Scene_Map['prototype'][_0x3ffb9d(0x33e)]=function(){const _0x14c497=_0x3ffb9d;this[_0x14c497(0xaae)]=!![];},VisuMZ[_0x3ffb9d(0x80e)]['SceneManager_isSceneChanging']=SceneManager['isSceneChanging'],SceneManager[_0x3ffb9d(0x68d)]=function(){const _0x1a6a2a=_0x3ffb9d;if(BattleManager[_0x1a6a2a(0x55c)])return![];return VisuMZ[_0x1a6a2a(0x80e)][_0x1a6a2a(0x295)]['call'](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2dd)]=Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x254)],Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x254)]=function(){const _0x361dd0=_0x3ffb9d;VisuMZ['BattleCore'][_0x361dd0(0x2dd)][_0x361dd0(0x73d)](this),this[_0x361dd0(0x8fd)]&&(_0x361dd0(0x9df)!=='aPsUS'?this[_0x361dd0(0x3ff)]['bitmap'][_0x361dd0(0x6f0)]!==this[_0x361dd0(0x8fa)]['battlerSmoothImage']()&&(this[_0x361dd0(0x3ff)][_0x361dd0(0x6a0)][_0x361dd0(0x6f0)]=this[_0x361dd0(0x8fa)]['battlerSmoothImage']()):(this[_0x361dd0(0x8fd)]=undefined,SceneManager[_0x361dd0(0x947)]['battleCoreResumeLaunchBattle']()));},Scene_Map[_0x3ffb9d(0xb66)]['battleCoreResumeLaunchBattle']=function(){const _0x3ba237=_0x3ffb9d;BattleManager[_0x3ba237(0x55c)]=undefined,BattleManager['_battleCoreBattleResumeAfter']=!![],this[_0x3ba237(0xb84)]();},VisuMZ['BattleCore']['Scene_Map_initializeAfter']=Scene_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)],Scene_Map['prototype'][_0x3ffb9d(0xacd)]=function(){const _0x5a7614=_0x3ffb9d;VisuMZ['BattleCore'][_0x5a7614(0x9a6)][_0x5a7614(0x73d)](this);if(BattleManager['_battleCoreBattleResumeAfter']){if(_0x5a7614(0x50b)===_0x5a7614(0x44e)){_0x532eee['playReflection']();let _0x39dd3b=_0x430cce['BattleCore']['Settings'][_0x5a7614(0x1aa)][_0x5a7614(0x220)];_0x39dd3b>0x0&&(_0x40d368['VisuMZ_0_CoreEngine']?_0x11b5e3['requestFauxAnimation']([this],_0x39dd3b):_0xd96624['requestAnimation']([this],_0x39dd3b));}else this[_0x5a7614(0xaae)]=!![],BattleManager[_0x5a7614(0x646)]=undefined;}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x335)]=Scene_Map[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)],Scene_Map['prototype'][_0x3ffb9d(0xacd)]=function(){const _0x5bb0c2=_0x3ffb9d;VisuMZ[_0x5bb0c2(0x80e)][_0x5bb0c2(0x335)][_0x5bb0c2(0x73d)](this),$gameTemp[_0x5bb0c2(0x6d5)]();},VisuMZ[_0x3ffb9d(0x80e)]['Scene_ItemBase_applyItem']=Scene_ItemBase[_0x3ffb9d(0xb66)][_0x3ffb9d(0x479)],Scene_ItemBase['prototype'][_0x3ffb9d(0x479)]=function(){const _0x288b64=_0x3ffb9d;VisuMZ[_0x288b64(0x80e)][_0x288b64(0xa66)][_0x288b64(0x73d)](this);if(this[_0x288b64(0x33b)]()['note'][_0x288b64(0x1b7)](/<BYPASS AUTO ACTION SEQUENCE>/i)){if(_0x288b64(0x65b)===_0x288b64(0xabe))return _0x597238[_0x288b64(0x80e)][_0x288b64(0x901)][_0x288b64(0xbd3)][_0x288b64(0x1e4)];else return;}this[_0x288b64(0x33b)]()[_0x288b64(0x365)][_0x288b64(0x1b7)](/<CUSTOM ACTION SEQUENCE>/i)&&($gameTemp[_0x288b64(0x3ed)]=[]),DataManager[_0x288b64(0x239)](this[_0x288b64(0x33b)]())&&($gameTemp[_0x288b64(0x3ed)]=[]);},VisuMZ[_0x3ffb9d(0x80e)]['Scene_Options_maxCommands']=Scene_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2de)],Scene_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2de)]=function(){const _0x40f033=_0x3ffb9d;let _0x47f815=VisuMZ[_0x40f033(0x80e)][_0x40f033(0x684)][_0x40f033(0x73d)](this);const _0x5d5369=VisuMZ[_0x40f033(0x80e)][_0x40f033(0x901)];if(_0x5d5369[_0x40f033(0x49f)][_0x40f033(0x782)]&&_0x5d5369[_0x40f033(0x49f)][_0x40f033(0x1d4)])_0x47f815+=0x2;if(_0x5d5369[_0x40f033(0x6d3)][_0x40f033(0x782)]&&_0x5d5369[_0x40f033(0x6d3)]['AdjustRect'])_0x47f815+=0x1;return _0x47f815;},VisuMZ[_0x3ffb9d(0x80e)]['Scene_Battle_initialize']=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)]=function(){const _0x2c74c2=_0x3ffb9d;VisuMZ['BattleCore'][_0x2c74c2(0x35d)][_0x2c74c2(0x73d)](this),this[_0x2c74c2(0x7d8)]();},VisuMZ['BattleCore'][_0x3ffb9d(0x737)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x558)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x558)]=function(){const _0x4773f2=_0x3ffb9d;if(SceneManager[_0x4773f2(0x6bd)]()){Scene_Message['prototype'][_0x4773f2(0x558)][_0x4773f2(0x73d)](this);if(this[_0x4773f2(0x9da)]){if(_0x4773f2(0x251)!==_0x4773f2(0x251)){for(const _0x5e6f2e of _0x565bf5){_0x5e6f2e[_0x4773f2(0x1b7)](_0xb3feb1);const _0x44ec38=_0x1c37c1(_0x5025ba['$1'])[_0x4773f2(0x83d)](',')[_0x4773f2(0x2e9)](_0x470ae2=>_0x2c6feb(_0x470ae2)['toUpperCase']()[_0x4773f2(0x33a)]());_0x206be6=_0x403fa1[_0x4773f2(0x416)](_0x44ec38);}!_0x3fd21f['note']['match'](/<CUSTOM ACTION SEQUENCE>/i)&&(_0x4d8bde[_0x4773f2(0x365)]+=_0x4773f2(0x433));;}else this[_0x4773f2(0x9da)][_0x4773f2(0x1e3)]();}if(BattleManager[_0x4773f2(0xa85)]){if('MLjri'==='MLjri')BattleManager[_0x4773f2(0x82b)]();else return![];}}else{if(_0x4773f2(0x94c)===_0x4773f2(0x94c))VisuMZ[_0x4773f2(0x80e)]['Scene_Battle_start'][_0x4773f2(0x73d)](this),$gameTroop['onBattleStartOnceParallels']();else{let _0x287a65=_0x1fc837(_0x3c4880['$1']);while(_0x287a65--){_0x20fe5b[_0x4773f2(0x7dd)](this['opponentsUnit']()[_0x4773f2(0xbf1)]());}return this[_0x4773f2(0xa95)](_0x10f10b);}}},VisuMZ['BattleCore'][_0x3ffb9d(0x481)]=Scene_Battle['prototype']['stop'],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb84)]=function(){const _0x4de71a=_0x3ffb9d;SceneManager[_0x4de71a(0x5f4)]()?Scene_Message[_0x4de71a(0xb66)][_0x4de71a(0xb84)][_0x4de71a(0x73d)](this):VisuMZ[_0x4de71a(0x80e)][_0x4de71a(0x481)][_0x4de71a(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x46b)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x254)],Scene_Battle['prototype'][_0x3ffb9d(0x254)]=function(){const _0x2a7c4f=_0x3ffb9d;SceneManager[_0x2a7c4f(0x5f4)]()?Scene_Message['prototype'][_0x2a7c4f(0x254)][_0x2a7c4f(0x73d)](this):VisuMZ['BattleCore'][_0x2a7c4f(0x46b)][_0x2a7c4f(0x73d)](this),this[_0x2a7c4f(0x7d8)]();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4b4)]=function(){const _0x424114=_0x3ffb9d;if(ConfigManager[_0x424114(0x898)]&&ConfigManager['uiInputPosition']!==undefined)return ConfigManager[_0x424114(0x964)];else{if(this[_0x424114(0x991)]()===_0x424114(0x94f)){if(_0x424114(0xa7f)===_0x424114(0xa7f))return![];else for(const _0x61125e of this['_damages']){_0x61125e['x']+=_0x3fabc9[_0x424114(0x47a)]*_0x3f4a3c,_0x61125e['y']+=_0xdcc490[_0x424114(0x565)];}}else{return Scene_Message['prototype']['isRightInputMode'][_0x424114(0x73d)](this);;}}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x23f)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa5d)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa5d)]=function(){const _0x12be4b=_0x3ffb9d;this[_0x12be4b(0x5db)](),VisuMZ[_0x12be4b(0x80e)][_0x12be4b(0x23f)]['call'](this),this[_0x12be4b(0x9a1)]();},VisuMZ['BattleCore'][_0x3ffb9d(0x975)]=Scene_Battle['prototype'][_0x3ffb9d(0xc35)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc35)]=function(){const _0x32102f=_0x3ffb9d;VisuMZ[_0x32102f(0x80e)][_0x32102f(0x975)]['call'](this),this[_0x32102f(0x991)]()===_0x32102f(0x94f)&&('wiwxG'!=='woRZh'?this['repositionCancelButtonBorderStyle']():(_0x59c445[_0x32102f(0xaf5)]()&&_0x3ad571[_0x32102f(0x2bb)]()&&this[_0x32102f(0x7dd)]('setActiveWeaponSet',_0x4b57d0,_0x683650),_0x59cce0[_0x32102f(0x33b)]()[_0x32102f(0xacf)]<0x0?this[_0x32102f(0x5b5)](_0x3aa909,_0x8b3c5c,_0x1754fe):this['wholeActionSet'](_0x497f74,_0x35f57b,_0x347199)));},Scene_Battle[_0x3ffb9d(0xb66)]['setVisibleUI']=function(_0x151143){const _0x2728f4=_0x3ffb9d;if(_0x151143){if('PRhtZ'==='zDIzc'){const _0x8cc83c=this[_0x2728f4(0x2bb)]()?this[_0x2728f4(0x6aa)]():this[_0x2728f4(0x402)]();if(_0x8cc83c){const _0x34ac41=_0x8cc83c[_0x2728f4(0x365)];if(_0x34ac41[_0x2728f4(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x151702(_0x1ac4b8['$1'])*0.01;else{if(_0x34ac41[_0x2728f4(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x57423f(_0x5a45cd['$1'])||0x0;}}return 0x1;}else this[_0x2728f4(0x50e)]['x']=(Graphics[_0x2728f4(0x7d6)]-Graphics[_0x2728f4(0x8f0)])/0x2,this['_windowLayer']['y']=(Graphics['height']-Graphics[_0x2728f4(0xbd1)])/0x2;}else this[_0x2728f4(0x50e)]['x']=Graphics[_0x2728f4(0x7d6)]*0xa,this['_windowLayer']['y']=Graphics[_0x2728f4(0x8a0)]*0xa;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x632)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x81b)],Scene_Battle[_0x3ffb9d(0xb66)]['selectNextCommand']=function(){const _0x7c8d1b=_0x3ffb9d,_0x3a2b7d=BattleManager[_0x7c8d1b(0x6aa)]();VisuMZ[_0x7c8d1b(0x80e)][_0x7c8d1b(0x632)]['call'](this);if(_0x3a2b7d){if(_0x3a2b7d===BattleManager[_0x7c8d1b(0x6aa)]())return;if(_0x3a2b7d===BattleManager[_0x7c8d1b(0xa98)])return;if(_0x3a2b7d['battler']())_0x3a2b7d['battler']()[_0x7c8d1b(0xaa6)]();}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x4cf)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2b7)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2b7)]=function(){const _0xcba8d8=_0x3ffb9d,_0xd21ac6=BattleManager[_0xcba8d8(0x6aa)]();if(_0xd21ac6&&_0xd21ac6[_0xcba8d8(0x491)])_0xd21ac6[_0xcba8d8(0x491)]()['stepBack']();VisuMZ[_0xcba8d8(0x80e)]['Scene_Battle_selectPreviousCommand'][_0xcba8d8(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x922)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb69)],Scene_Battle['prototype'][_0x3ffb9d(0xb69)]=function(){const _0x37d647=_0x3ffb9d;if(VisuMZ[_0x37d647(0x80e)][_0x37d647(0x901)]['BattleLog'][_0x37d647(0x53c)]){if(_0x37d647(0xa2c)===_0x37d647(0x6e6))this[_0x37d647(0xb2d)]();else return VisuMZ['BattleCore']['Settings']['BattleLog'][_0x37d647(0x53c)][_0x37d647(0x73d)](this);}return VisuMZ['BattleCore'][_0x37d647(0x922)]['call'](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x18a)]=Scene_Battle['prototype'][_0x3ffb9d(0xb54)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb54)]=function(){const _0x1dc4f7=_0x3ffb9d;VisuMZ['BattleCore'][_0x1dc4f7(0x18a)][_0x1dc4f7(0x73d)](this),this[_0x1dc4f7(0xa94)]();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa94)]=function(){const _0x5c1053=_0x3ffb9d,_0xdefac8=this['_partyCommandWindow'];_0xdefac8[_0x5c1053(0x36b)](_0x5c1053(0x1e8),this[_0x5c1053(0x683)][_0x5c1053(0x92c)](this)),_0xdefac8['setHandler'](_0x5c1053(0x40b),this['commandOptions'][_0x5c1053(0x92c)](this));const _0x5f180a=this[_0x5c1053(0x991)]();switch(_0x5f180a){case'xp':case _0x5c1053(0x68e):return this[_0x5c1053(0x222)]['setBackgroundType'](0x1);break;}},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x683)]=function(){const _0x569d27=_0x3ffb9d;BattleManager[_0x569d27(0x710)]=!![],$gameParty[_0x569d27(0x9b7)](),this[_0x569d27(0x81b)]();if(BattleManager[_0x569d27(0x4e4)]()){if(_0x569d27(0x658)!==_0x569d27(0xb3a))BattleManager[_0x569d27(0x743)]=![];else{_0x5d661b=_0x55d638['BattleCore']['JS'][_0x2b751e]['call'](this,this[_0x569d27(0x913)](),_0x4a9365,_0x55895e,_0x64a3fd);if(_0x2c388a)_0x28f136=_0x49cf70;}}},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2ad)]=function(){const _0x1b38a9=_0x3ffb9d;this['isQueueOptionsMenu']()?(this[_0x1b38a9(0x836)]=!![],this[_0x1b38a9(0x492)][_0x1b38a9(0x7dd)]('addText',VisuMZ[_0x1b38a9(0x80e)][_0x1b38a9(0x901)][_0x1b38a9(0x9d6)]['ActiveTpbOptionsMessage'])):this[_0x1b38a9(0x841)]();},Scene_Battle['prototype'][_0x3ffb9d(0xaa4)]=function(){const _0x396be1=_0x3ffb9d;return BattleManager[_0x396be1(0x81d)]();},Scene_Battle['prototype']['callOptions']=function(){const _0x59acea=_0x3ffb9d;this['_callSceneOptions']=![],this['_spriteset']['update'](),this[_0x59acea(0x50e)][_0x59acea(0x54f)]=![];if(BattleManager[_0x59acea(0x97b)]()){if('nidEi'===_0x59acea(0x951))($dataSystem[_0x59acea(0xa2e)]||$dataSystem[_0x59acea(0x9ca)])&&('wBEgY'!==_0x59acea(0xb0c)?SceneManager[_0x59acea(0x49a)]():(_0x17cb76[_0x59acea(0x80e)]['Scene_Battle_start'][_0x59acea(0x73d)](this),_0x15ad19['onBattleStartOnceParallels']()));else{if(_0x555bad[_0x59acea(0x4ce)]!==_0x5db89d)return _0x2b8f79['_forcedBattleLayout'];if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x59acea(0x923)]=_0x130f77[_0x59acea(0x80e)][_0x59acea(0x901)][_0x59acea(0x190)][_0x59acea(0x271)][_0x59acea(0x456)]()['trim'](),this[_0x59acea(0x923)]==='sideview_ui'&&!_0x93efd4[_0x59acea(0x509)]&&(this[_0x59acea(0x923)]=_0x59acea(0x232)),this[_0x59acea(0x923)];}}else($gameMap[_0x59acea(0xa2e)]()||$gameMap[_0x59acea(0x9ca)]())&&SceneManager[_0x59acea(0x49a)]();SceneManager[_0x59acea(0x7dd)](Scene_Options);if(BattleManager[_0x59acea(0x4e4)]()){if(_0x59acea(0x637)==='ECqha'){if(!_0x3c1cc1['isSceneBattle']())return;const _0xf31c7a=_0x200463[_0x59acea(0x292)]();_0xf31c7a[_0x59acea(0x27b)](_0x59acea(0x725));}else BattleManager[_0x59acea(0xa85)]=BattleManager[_0x59acea(0x6aa)]();}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x774)]=Scene_Battle[_0x3ffb9d(0xb66)]['updateBattleProcess'],Scene_Battle[_0x3ffb9d(0xb66)]['updateBattleProcess']=function(){const _0x3ad61b=_0x3ffb9d;VisuMZ[_0x3ad61b(0x80e)]['Scene_Battle_updateBattleProcess'][_0x3ad61b(0x73d)](this);if(this[_0x3ad61b(0x836)]&&!BattleManager[_0x3ad61b(0xa98)])this[_0x3ad61b(0x841)]();},VisuMZ['BattleCore'][_0x3ffb9d(0xc39)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)]=function(){const _0x54855f=_0x3ffb9d;VisuMZ[_0x54855f(0x80e)][_0x54855f(0xc39)][_0x54855f(0x73d)](this),this[_0x54855f(0x84b)]();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9a1)]=function(){const _0x465fbd=_0x3ffb9d,_0x73e7c1=this[_0x465fbd(0x7b4)]();this[_0x465fbd(0xafa)]=new Window_AutoBattleCancel(_0x73e7c1),this[_0x465fbd(0xafa)][_0x465fbd(0x18d)](),this[_0x465fbd(0x237)](this[_0x465fbd(0xafa)]);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7b4)]=function(){const _0x4ec336=_0x3ffb9d;return VisuMZ[_0x4ec336(0x80e)][_0x4ec336(0x901)][_0x4ec336(0x49f)][_0x4ec336(0xa72)][_0x4ec336(0x73d)](this);},Scene_Battle['prototype'][_0x3ffb9d(0x7d8)]=function(){const _0x6388f1=_0x3ffb9d;this[_0x6388f1(0x5d5)]=[];},Scene_Battle[_0x3ffb9d(0xb66)]['updateOnceParallelInterpreters']=function(){const _0x33f849=_0x3ffb9d;if(!this[_0x33f849(0x5d5)])return;for(const _0x5f0685 of this[_0x33f849(0x5d5)]){if(_0x5f0685){if('roXKi'!==_0x33f849(0x2d0)){if(this[_0x33f849(0xa82)]&&this[_0x33f849(0x24f)][_0x33f849(0x802)](this[_0x33f849(0xa82)])){const _0x18364f=this[_0x33f849(0x24f)]['indexOf'](this[_0x33f849(0xa82)]);this[_0x33f849(0x70d)](_0x18364f);}else this['autoSelectPriority']();}else _0x5f0685[_0x33f849(0x1e3)]();}}},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2ac)]=function(_0xfae268){const _0x1a0c46=$dataCommonEvents[_0xfae268];if(!_0x1a0c46)return;const _0x6e7ce1=new Game_BattleOnceParallelInterpreter();this['addOnceParallelInterpreter'](_0x6e7ce1),_0x6e7ce1['setCommonEvent'](_0xfae268);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8dd)]=function(_0x199a4d){const _0x55d0b0=_0x3ffb9d;this[_0x55d0b0(0x5d5)]=this['_onceParallelInterpreters']||[],this['_onceParallelInterpreters']['push'](_0x199a4d);},Scene_Battle[_0x3ffb9d(0xb66)]['removeOnceParallelInterpreter']=function(_0x10aa22){const _0x5be4d2=_0x3ffb9d;this[_0x5be4d2(0x5d5)]=this[_0x5be4d2(0x5d5)]||[],this[_0x5be4d2(0x5d5)][_0x5be4d2(0x7bc)](_0x10aa22);},Game_Troop[_0x3ffb9d(0xb66)]['onBattleStartOnceParallels']=function(){const _0x742310=_0x3ffb9d;for(const _0x4eb319 of this[_0x742310(0x1d6)]()[_0x742310(0x3da)]){if('aTZZe'!==_0x742310(0x322)){const _0x4c7b37=this[_0x742310(0x61c)];if(_0x4c7b37[_0x113ab5])return _0x4c7b37[_0x3443e3];else{const _0x32c9c8=new _0x4b21e9();return _0x4c7b37[_0x3e1424]=_0x32c9c8,this[_0x742310(0xaff)](_0x32c9c8),this[_0x742310(0xaff)](this['_cursorArea']),_0x32c9c8;}}else{if(!this[_0x742310(0x97e)](_0x4eb319))continue;SceneManager[_0x742310(0x947)][_0x742310(0x92a)](_0x4eb319);}}},Game_Troop[_0x3ffb9d(0xb66)][_0x3ffb9d(0x97e)]=function(_0xdb7555){const _0x56a323=_0x3ffb9d;if(!_0xdb7555)return;for(const _0x446b08 of _0xdb7555[_0x56a323(0x728)]){if(_0x56a323(0xc05)===_0x56a323(0x324)){this['push'](_0x56a323(0x224),_0x2f08e7);if(!_0x474d56[_0x56a323(0x80e)][_0x56a323(0x901)][_0x56a323(0x6c4)][_0x56a323(0x91a)])return;this[_0x56a323(0x7dd)]('addText',_0xafc61c[_0x56a323(0x7b7)]['format'](_0x35729f[_0x56a323(0x453)]()));}else{if([0x6c,0x198][_0x56a323(0x802)](_0x446b08[_0x56a323(0x77c)])){const _0x3ae6e7=_0x446b08[_0x56a323(0x32d)][0x0];if(_0x3ae6e7[_0x56a323(0x1b7)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}}return![];},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x92a)]=function(_0x800ea6){const _0x4975ca=_0x3ffb9d;if(!_0x800ea6)return;const _0x8a19f3=new Game_BattleOnceParallelInterpreter();this[_0x4975ca(0x8dd)](_0x8a19f3),_0x8a19f3[_0x4975ca(0x6f2)](_0x800ea6);};function Game_BattleOnceParallelInterpreter(){this['initialize'](...arguments);}Game_BattleOnceParallelInterpreter['prototype']=Object['create'](Game_Interpreter[_0x3ffb9d(0xb66)]),Game_BattleOnceParallelInterpreter[_0x3ffb9d(0xb66)]['constructor']=Game_BattleOnceParallelInterpreter,Game_BattleOnceParallelInterpreter['prototype'][_0x3ffb9d(0x1f1)]=function(_0x5269c9){const _0x451c0f=_0x3ffb9d,_0x47bc0b=$dataCommonEvents[_0x5269c9];_0x47bc0b?this['setup'](_0x47bc0b[_0x451c0f(0x728)],0x0):this[_0x451c0f(0x254)]();},Game_BattleOnceParallelInterpreter[_0x3ffb9d(0xb66)]['terminate']=function(){const _0x2dd2ea=_0x3ffb9d;if(!SceneManager[_0x2dd2ea(0x341)]())return;SceneManager['_scene']['removeOnceParallelInterpreter'](this),Game_Interpreter['prototype'][_0x2dd2ea(0x254)]['call'](this);},Game_BattleOnceParallelInterpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6f2)]=function(_0x43a960){const _0x22c47a=_0x3ffb9d;_0x43a960?_0x22c47a(0x753)!==_0x22c47a(0x49b)?this['setup'](_0x43a960[_0x22c47a(0x728)],0x0):(_0x8beec5[_0x22c47a(0x80e)][_0x22c47a(0x654)]['call'](this),this[_0x22c47a(0x5a4)]()):this[_0x22c47a(0x254)]();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4a5)]=function(){const _0x1f6696=_0x3ffb9d;return VisuMZ[_0x1f6696(0x80e)]['Settings'][_0x1f6696(0x9d6)][_0x1f6696(0x5f7)];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x792)]=Scene_Battle['prototype'][_0x3ffb9d(0x219)],Scene_Battle['prototype'][_0x3ffb9d(0x219)]=function(){const _0xb3a1d=_0x3ffb9d;this['isPartyCommandWindowDisabled']()?this[_0xb3a1d(0x18e)]():_0xb3a1d(0x2f1)===_0xb3a1d(0x4b8)?_0x52a1d3['prototype'][_0xb3a1d(0x3fb)][_0xb3a1d(0x73d)](this,_0x4a93bc,_0x454e71,_0x47a373,_0xe6db7a,_0x4625df):VisuMZ[_0xb3a1d(0x80e)][_0xb3a1d(0x792)][_0xb3a1d(0x73d)](this);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x18e)]=function(){const _0x2cdfcc=_0x3ffb9d;if(BattleManager[_0x2cdfcc(0x56e)]())this[_0x2cdfcc(0x81b)]();else BattleManager[_0x2cdfcc(0x4e4)]()&&(_0x2cdfcc(0x4bb)!==_0x2cdfcc(0x4bb)?this[_0x2cdfcc(0x4a5)]()?this[_0x2cdfcc(0x18e)]():_0x3e96e6['BattleCore']['Scene_Battle_startPartyCommandSelection']['call'](this):VisuMZ['BattleCore'][_0x2cdfcc(0x792)][_0x2cdfcc(0x73d)](this));},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x7cf)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x890)],Scene_Battle['prototype'][_0x3ffb9d(0x890)]=function(){const _0x556c6e=_0x3ffb9d;BattleManager[_0x556c6e(0x4e4)]()?(this[_0x556c6e(0x8b1)](),this[_0x556c6e(0x52f)]()):'yPyCE'==='yPyCE'?VisuMZ[_0x556c6e(0x80e)][_0x556c6e(0x7cf)][_0x556c6e(0x73d)](this):_0x152056[_0x556c6e(0x7dd)]('clearActiveWeaponSet',_0x51cba0);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8b1)]=function(){const _0x576ab5=_0x3ffb9d;if(!VisuMZ[_0x576ab5(0x80e)][_0x576ab5(0xb7f)])return;if(Imported[_0x576ab5(0x274)]&&BattleManager[_0x576ab5(0x2b1)]())return;const _0x2620b4=$gameParty[_0x576ab5(0x735)]()['filter'](_0x206999=>_0x206999[_0x576ab5(0xaf1)]()&&_0x206999[_0x576ab5(0x889)]());BattleManager[_0x576ab5(0xa76)]=_0x2620b4[0x0]||null,BattleManager['_currentActor']&&BattleManager[_0x576ab5(0xa76)][_0x576ab5(0x864)](_0x576ab5(0xb43));},VisuMZ[_0x3ffb9d(0x80e)]['Scene_Battle_createActorCommandWindow']=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5fa)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5fa)]=function(){const _0x234088=_0x3ffb9d;VisuMZ[_0x234088(0x80e)]['Scene_Battle_createActorCommandWindow']['call'](this),this['createActorCommandWindowBattleCore']();},Scene_Battle['prototype']['createActorCommandWindowBattleCore']=function(){const _0x303dab=_0x3ffb9d,_0x89a85b=this[_0x303dab(0x3ce)];_0x89a85b['setHandler'](_0x303dab(0x590),this[_0x303dab(0x3a8)]['bind'](this)),_0x89a85b[_0x303dab(0x36b)](_0x303dab(0x1e8),this[_0x303dab(0x2c0)]['bind'](this)),_0x89a85b[_0x303dab(0x36b)]('singleSkill',this[_0x303dab(0x73a)][_0x303dab(0x92c)](this));if(BattleManager[_0x303dab(0x4e4)]()){if(this[_0x303dab(0x4a5)]())_0x303dab(0x4c9)!=='PJyyy'?delete _0x89a85b[_0x303dab(0xb21)]['cancel']:_0x4f2649['setup'](0x0);else{if(_0x303dab(0x6b9)===_0x303dab(0x448)){let _0x200f7c=_0x228580[_0x303dab(0x338)](_0x2f91c0[_0x303dab(0xa8b)]);_0x242b99[_0x303dab(0xa10)]>0x0&&(_0x200f7c+=_0x176216[_0x303dab(0x8f4)](_0x2651d0[_0x303dab(0xa10)])),_0x24a652[_0x303dab(0x458)](_0x2958b4[_0x303dab(0xa8b)],_0x200f7c);}else _0x89a85b['setHandler'](_0x303dab(0x3fa),this[_0x303dab(0xab8)][_0x303dab(0x92c)](this));}}},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3a8)]=function(){this['commandEscape']();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2c0)]=function(){const _0x12690a=_0x3ffb9d;BattleManager[_0x12690a(0x6aa)]()[_0x12690a(0x741)](),BattleManager['finishActorInput'](),BattleManager[_0x12690a(0x47d)](),this[_0x12690a(0xbec)]();},Scene_Battle['prototype']['actorCommandSingleSkill']=function(){const _0xaf8cf2=_0x3ffb9d,_0x4a882d=BattleManager['inputtingAction']();_0x4a882d['setSkill'](this[_0xaf8cf2(0x3ce)][_0xaf8cf2(0x5e9)]()),this[_0xaf8cf2(0x56c)]();},Scene_Battle['prototype']['actorCommandCancelTPB']=function(){const _0x300d1b=_0x3ffb9d;this[_0x300d1b(0x471)]()?this[_0x300d1b(0x9b3)]():this['processActorCommandCancelTPB']();},VisuMZ[_0x3ffb9d(0x80e)]['TpbActiveChangeEnabled']=![],Scene_Battle[_0x3ffb9d(0xb66)]['tpbActorSwitchConditionsMet']=function(){const _0x3ca4ef=_0x3ffb9d;if(Imported[_0x3ca4ef(0x274)]&&BattleManager['isCTB']()){if(_0x3ca4ef(0x6ff)===_0x3ca4ef(0x6ff))return![];else this[_0x3ca4ef(0x48c)]=_0x3e36bc;}else{if(!VisuMZ[_0x3ca4ef(0x80e)][_0x3ca4ef(0xb7f)])return![];const _0x5c5499=$gameParty[_0x3ca4ef(0x735)]()[_0x3ca4ef(0xae9)](_0x1d4b00=>_0x1d4b00[_0x3ca4ef(0xaf1)]()&&_0x1d4b00[_0x3ca4ef(0x889)]());return _0x5c5499[_0x3ca4ef(0x205)]>0x0&&BattleManager[_0x3ca4ef(0x6aa)]()!==_0x5c5499[_0x5c5499['length']-0x1];}},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9b3)]=function(){const _0x51ce71=_0x3ffb9d,_0x32d7ea=BattleManager['actor'](),_0x71762f=_0x32d7ea[_0x51ce71(0x491)]();if(_0x71762f)_0x71762f['stepBack']();const _0x5a8393=$gameParty['aliveMembers']()[_0x51ce71(0xae9)](_0x347a9f=>_0x347a9f[_0x51ce71(0xaf1)]()&&_0x347a9f[_0x51ce71(0x889)]()),_0xf09500=_0x5a8393[_0x51ce71(0x76b)](_0x32d7ea),_0x4a8edb=_0x5a8393[_0xf09500+0x1];BattleManager[_0x51ce71(0xa76)]=_0x4a8edb||null;if(_0x4a8edb)_0x4a8edb[_0x51ce71(0x864)](_0x51ce71(0xb43));_0x32d7ea[_0x51ce71(0x864)](_0x51ce71(0x403)),this[_0x51ce71(0xbec)]();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2a6)]=function(){const _0x16e48f=_0x3ffb9d;this['_partyCommandWindow']['setup'](),this[_0x16e48f(0x3ce)][_0x16e48f(0x85d)]();if(!VisuMZ[_0x16e48f(0x80e)][_0x16e48f(0xb7f)])return;if(Imported[_0x16e48f(0x274)]&&BattleManager[_0x16e48f(0x2b1)]())return;if(BattleManager['_currentActor']){BattleManager[_0x16e48f(0xa76)]['setActionState']('undecided');const _0x704f9a=BattleManager['_currentActor'][_0x16e48f(0x491)]();if(_0x704f9a)_0x704f9a[_0x16e48f(0xaa6)]();}BattleManager[_0x16e48f(0xa76)]=null;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x3b0)]=Scene_Battle['prototype'][_0x3ffb9d(0x981)],Scene_Battle[_0x3ffb9d(0xb66)]['createHelpWindow']=function(){const _0x105983=_0x3ffb9d;VisuMZ['BattleCore'][_0x105983(0x3b0)][_0x105983(0x73d)](this),this[_0x105983(0x6af)]();},Scene_Battle['prototype'][_0x3ffb9d(0x6af)]=function(){const _0xd87d03=_0x3ffb9d;this['_actorCommandWindow']['setHelpWindow'](this[_0xd87d03(0x7c5)]),this[_0xd87d03(0x222)]['setHelpWindow'](this['_helpWindow']);},Scene_Battle['prototype'][_0x3ffb9d(0x991)]=function(){const _0x17fac7=_0x3ffb9d;if($gameTemp['_forcedBattleLayout']!==undefined){if(_0x17fac7(0x83f)===_0x17fac7(0x9f2)){if(!_0xdbcd33[_0x17fac7(0x341)]())return;if(!_0x221d75['VisuMZ_2_BattleSystemETB'])return;if(!_0x30ab69[_0x17fac7(0x938)]())return;_0x407fad[_0x17fac7(0xb83)](_0x1aa56b,_0x3cf101);const _0x2a56d0=_0x302b1f[_0x17fac7(0xb17)];_0xc8963e['_subject']&&_0x2e3edc['_subject'][_0x17fac7(0x432)]()['gainCurrentActionsETB'](_0x2a56d0);}else return $gameTemp[_0x17fac7(0x4ce)];}if(this[_0x17fac7(0x923)]){if(_0x17fac7(0x4ca)!=='AAGAO')_0x3db4dd[_0x17fac7(0xb66)][_0x17fac7(0x76c)][_0x17fac7(0x73d)](this),this[_0x17fac7(0x74b)]();else return this[_0x17fac7(0x923)];}return this['_battleLayoutStyle']=VisuMZ[_0x17fac7(0x80e)][_0x17fac7(0x901)][_0x17fac7(0x190)][_0x17fac7(0x271)][_0x17fac7(0x456)]()[_0x17fac7(0x33a)](),this[_0x17fac7(0x923)]==='sideview_ui'&&!Imported['VisuMZ_3_SideviewBattleUI']&&(this['_battleLayoutStyle']=_0x17fac7(0x232)),this['_battleLayoutStyle'];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2e0)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x93c)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x93c)]=function(){const _0x2c74dd=_0x3ffb9d,_0x2507b0=this[_0x2c74dd(0x991)]();switch(_0x2507b0){case'list':return this['calcWindowHeight'](Math['max'](0x1,$gameParty[_0x2c74dd(0x5b8)]()),!![]);break;default:return VisuMZ[_0x2c74dd(0x80e)][_0x2c74dd(0x2e0)]['call'](this);break;}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x407)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb30)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb30)]=function(){const _0x3e8364=_0x3ffb9d,_0x4a766a=this['battleLayoutStyle']();switch(_0x4a766a){case _0x3e8364(0x94f):return this[_0x3e8364(0x7fa)]();break;case _0x3e8364(0x232):case'list':case'xp':case _0x3e8364(0x68e):default:return VisuMZ[_0x3e8364(0x80e)][_0x3e8364(0x407)][_0x3e8364(0x73d)](this);break;}},Scene_Battle['prototype'][_0x3ffb9d(0x39b)]=function(){const _0x477ff1=_0x3ffb9d,_0x16e216=this['battleLayoutStyle']();switch(_0x16e216){case'xp':case _0x477ff1(0x68e):return this[_0x477ff1(0xa4e)]();break;case _0x477ff1(0x94f):return this[_0x477ff1(0x838)]();break;case _0x477ff1(0x232):case _0x477ff1(0x728):default:return this['statusWindowRectDefaultStyle']();break;}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x906)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x944)],Scene_Battle['prototype'][_0x3ffb9d(0x944)]=function(){const _0x1697c4=_0x3ffb9d,_0x268402=this[_0x1697c4(0x991)]();switch(_0x268402){case'xp':case _0x1697c4(0x68e):return this[_0x1697c4(0x4e8)]();break;case _0x1697c4(0x94f):return this[_0x1697c4(0x4fa)]();case'default':case'list':default:return this[_0x1697c4(0x60a)]();break;}},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x60a)]=function(){const _0x4e6e6e=_0x3ffb9d,_0x63e758=VisuMZ[_0x4e6e6e(0x80e)]['Settings'][_0x4e6e6e(0x190)],_0x581ed1=_0x63e758[_0x4e6e6e(0x43e)]||0xc0,_0x233990=this[_0x4e6e6e(0x93c)](),_0x3bfa6c=this[_0x4e6e6e(0x4b4)]()?Graphics[_0x4e6e6e(0x8f0)]-_0x581ed1:0x0,_0x2b8432=Graphics['boxHeight']-_0x233990;return new Rectangle(_0x3bfa6c,_0x2b8432,_0x581ed1,_0x233990);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb7a)]=function(){const _0x21b042=_0x3ffb9d;return this[_0x21b042(0x944)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x19f)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbe8)],Scene_Battle['prototype'][_0x3ffb9d(0xbe8)]=function(){const _0x5e5e7b=_0x3ffb9d,_0x4be2d3=this[_0x5e5e7b(0x991)]();switch(_0x4be2d3){case'xp':case _0x5e5e7b(0x68e):case _0x5e5e7b(0x94f):break;case _0x5e5e7b(0x232):case _0x5e5e7b(0x728):default:VisuMZ[_0x5e5e7b(0x80e)][_0x5e5e7b(0x19f)]['call'](this);break;}},VisuMZ['BattleCore'][_0x3ffb9d(0x7ca)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x526)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x526)]=function(){const _0x202159=_0x3ffb9d;VisuMZ[_0x202159(0x80e)]['Scene_Battle_startActorSelection'][_0x202159(0x73d)](this),this[_0x202159(0xb52)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x1a7)]=Scene_Battle[_0x3ffb9d(0xb66)]['startEnemySelection'],Scene_Battle[_0x3ffb9d(0xb66)]['startEnemySelection']=function(){const _0x5aec24=_0x3ffb9d;VisuMZ[_0x5aec24(0x80e)][_0x5aec24(0x1a7)][_0x5aec24(0x73d)](this),this[_0x5aec24(0xadb)][_0x5aec24(0x5b6)](),this['makeTargetSelectionMoreVisible']();},Scene_Battle['prototype'][_0x3ffb9d(0xb52)]=function(){const _0x4e5957=_0x3ffb9d,_0x5e597b=this[_0x4e5957(0x991)]();['xp',_0x4e5957(0x68e),_0x4e5957(0x94f)][_0x4e5957(0x802)](_0x5e597b)&&this['_actorCommandWindow'][_0x4e5957(0x85d)](),(_0x5e597b===_0x4e5957(0x94f)||this['isSkillItemWindowsMiddle']())&&(this[_0x4e5957(0x856)][_0x4e5957(0x85d)](),this['_itemWindow'][_0x4e5957(0x85d)]());},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xb79)]=Scene_Battle['prototype'][_0x3ffb9d(0xc3a)],Scene_Battle[_0x3ffb9d(0xb66)]['onActorOk']=function(){const _0x53069f=_0x3ffb9d;VisuMZ[_0x53069f(0x80e)]['Scene_Battle_onActorOk']['call'](this),this[_0x53069f(0x568)]();},Scene_Battle['prototype'][_0x3ffb9d(0x96d)]=function(){const _0xebc924=_0x3ffb9d;return['attack',_0xebc924(0x61b),_0xebc924(0xbea)]['includes'](this[_0xebc924(0x3ce)][_0xebc924(0x7df)]());},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x4a1)]=Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x66b)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x66b)]=function(){const _0x5b0000=_0x3ffb9d;this[_0x5b0000(0x96d)]()?(this['_statusWindow'][_0x5b0000(0x4cc)](),this['_actorWindow'][_0x5b0000(0x18d)](),this['_actorCommandWindow']['activate']()):VisuMZ[_0x5b0000(0x80e)][_0x5b0000(0x4a1)]['call'](this),this['cancelTargetSelectionVisibility']();},VisuMZ['BattleCore'][_0x3ffb9d(0x423)]=Scene_Battle['prototype']['onEnemyOk'],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e1)]=function(){const _0x18f675=_0x3ffb9d;VisuMZ[_0x18f675(0x80e)][_0x18f675(0x423)][_0x18f675(0x73d)](this),this[_0x18f675(0x568)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x579)]=Scene_Battle['prototype'][_0x3ffb9d(0xbf9)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbf9)]=function(){const _0x43c0e1=_0x3ffb9d;this[_0x43c0e1(0x96d)]()?(this[_0x43c0e1(0x1bb)]['show'](),this['_enemyWindow'][_0x43c0e1(0x18d)](),this['_actorCommandWindow'][_0x43c0e1(0x6d2)]()):_0x43c0e1(0x90d)!==_0x43c0e1(0x819)?VisuMZ[_0x43c0e1(0x80e)][_0x43c0e1(0x579)][_0x43c0e1(0x73d)](this):_0x31b8d6=_0x379f3f[_0x43c0e1(0x9a4)],this['cancelTargetSelectionVisibility']();},Scene_Battle['prototype'][_0x3ffb9d(0x568)]=function(){const _0x3d4dce=_0x3ffb9d,_0x40fbef=this['battleLayoutStyle']();(_0x40fbef===_0x3d4dce(0x94f)||this['isSkillItemWindowsMiddle']())&&(this[_0x3d4dce(0x856)][_0x3d4dce(0x9d1)](),this[_0x3d4dce(0x856)][_0x3d4dce(0x85c)]&&(_0x3d4dce(0x9b9)===_0x3d4dce(0xabc)?(_0x1e7f4a+=_0x320855['isActor']()?-_0x2f008e:_0x5d657a,_0x4d98d2+=_0x2306e0):this[_0x3d4dce(0x856)][_0x3d4dce(0x4cc)]()),this[_0x3d4dce(0x187)]['open'](),this['_itemWindow'][_0x3d4dce(0x85c)]&&this[_0x3d4dce(0x187)]['show']());},Scene_Battle['prototype']['cancelTargetSelectionVisibility']=function(){const _0x4745ff=_0x3ffb9d,_0x3f091b=this[_0x4745ff(0x991)]();if(['xp',_0x4745ff(0x68e),_0x4745ff(0x94f)][_0x4745ff(0x802)](_0x3f091b)){if(_0x4745ff(0x347)===_0x4745ff(0x900))return![];else this[_0x4745ff(0x3ce)][_0x4745ff(0x9d1)]();}this[_0x4745ff(0x568)]();},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6eb)]=function(){const _0x8eeb7d=_0x3ffb9d,_0x39539f=VisuMZ[_0x8eeb7d(0x80e)][_0x8eeb7d(0x901)][_0x8eeb7d(0x190)],_0x2eeef8=Window_BattleStatus[_0x8eeb7d(0xb66)][_0x8eeb7d(0x1c7)](),_0x4024b1=Graphics[_0x8eeb7d(0x8f0)]-(_0x39539f['CommandWidth']||0xc0),_0x4e819c=this['windowAreaHeight']()+_0x2eeef8,_0x1e7ec6=this['isRightInputMode']()?0x0:Graphics[_0x8eeb7d(0x8f0)]-_0x4024b1,_0x30a518=Graphics[_0x8eeb7d(0xbd1)]-_0x4e819c+_0x2eeef8;return new Rectangle(_0x1e7ec6,_0x30a518,_0x4024b1,_0x4e819c);},Scene_Battle['prototype'][_0x3ffb9d(0xa4e)]=function(){const _0x580f1a=_0x3ffb9d,_0x3be83f=Window_BattleStatus[_0x580f1a(0xb66)]['extraHeight'](),_0x346bfa=Graphics[_0x580f1a(0x8f0)],_0x1f85b9=this[_0x580f1a(0x93c)]()+_0x3be83f,_0x4b95e8=0x0,_0x4ae7e4=Graphics[_0x580f1a(0xbd1)]-_0x1f85b9+_0x3be83f;return new Rectangle(_0x4b95e8,_0x4ae7e4,_0x346bfa,_0x1f85b9);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4e8)]=function(){const _0x53c189=_0x3ffb9d,_0xb5aca=Graphics[_0x53c189(0x8f0)]/0x2,_0x317680=this[_0x53c189(0xaf9)](VisuMZ[_0x53c189(0x80e)][_0x53c189(0x901)][_0x53c189(0x190)]['XPActorCommandLines'],!![]),_0x24ce7c=Math[_0x53c189(0x68f)]((Graphics['boxWidth']-_0xb5aca)/0x2),_0x5cc97a=Graphics[_0x53c189(0xbd1)]-_0x317680-this[_0x53c189(0xa4e)]()[_0x53c189(0x8a0)];return new Rectangle(_0x24ce7c,_0x5cc97a,_0xb5aca,_0x317680);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7fa)]=function(){const _0x5ab795=_0x3ffb9d,_0x1b3c04=Graphics['width'],_0x5ab195=Math[_0x5ab795(0x68f)]((Graphics[_0x5ab795(0x8f0)]-_0x1b3c04)/0x2),_0x57cea7=this[_0x5ab795(0x54b)](),_0xbdc70d=(Graphics['height']-Graphics[_0x5ab795(0xbd1)])/-0x2;return new Rectangle(_0x5ab195,_0xbdc70d,_0x1b3c04,_0x57cea7);},Scene_Battle[_0x3ffb9d(0xb66)]['statusWindowRectBorderStyle']=function(){const _0x16e20f=_0x3ffb9d,_0x391eb9=Graphics[_0x16e20f(0x7d6)],_0x744702=Math[_0x16e20f(0x68f)]((Graphics[_0x16e20f(0x8f0)]-_0x391eb9)/0x2),_0x10f977=this[_0x16e20f(0xaf9)](0x4,!![]),_0x5e57e0=Graphics[_0x16e20f(0xbd1)]-_0x10f977+(Graphics[_0x16e20f(0x8a0)]-Graphics[_0x16e20f(0xbd1)])/0x2;return new Rectangle(_0x744702,_0x5e57e0,_0x391eb9,_0x10f977);},Scene_Battle[_0x3ffb9d(0xb66)]['partyCommandWindowRectBorderStyle']=function(){const _0x3d9bb0=_0x3ffb9d,_0x4d5b30=Math['floor'](Graphics[_0x3d9bb0(0x7d6)]/0x3),_0x33ff0c=this[_0x3d9bb0(0x4b4)]()?(Graphics[_0x3d9bb0(0x7d6)]+Graphics[_0x3d9bb0(0x8f0)])/0x2-_0x4d5b30:(Graphics[_0x3d9bb0(0x7d6)]-Graphics[_0x3d9bb0(0x8f0)])/-0x2,_0x410698=this['helpWindowRectBorderStyle'](),_0x2b848e=_0x410698['y']+_0x410698[_0x3d9bb0(0x8a0)],_0x34a865=this[_0x3d9bb0(0x838)](),_0x38987f=_0x34a865['y']-_0x2b848e;return new Rectangle(_0x33ff0c,_0x2b848e,_0x4d5b30,_0x38987f);},Scene_Battle['prototype']['skillItemWindowRectBorderStyle']=function(){const _0x463a47=_0x3ffb9d,_0x185c1e=Math[_0x463a47(0x21e)](Graphics[_0x463a47(0x7d6)]/0x3),_0x44d5f1=Math[_0x463a47(0x68f)]((Graphics[_0x463a47(0x8f0)]-_0x185c1e)/0x2),_0x44fc43=this[_0x463a47(0x4fa)](),_0x363c25=_0x44fc43['y'],_0x2f77f7=_0x44fc43[_0x463a47(0x8a0)];return new Rectangle(_0x44d5f1,_0x363c25,_0x185c1e,_0x2f77f7);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2e2)]=function(){const _0x1097c1=_0x3ffb9d;this['_cancelButton']['y']=this[_0x1097c1(0x7c5)]['y']+this[_0x1097c1(0x7c5)][_0x1097c1(0x8a0)],this['isRightInputMode']()?this[_0x1097c1(0x991)]()==='border'?this[_0x1097c1(0xa7b)]['x']=0x8:this[_0x1097c1(0xa7b)]['x']=-this[_0x1097c1(0xa7b)]['width']-0x4:_0x1097c1(0x7d3)===_0x1097c1(0xbc3)?this[_0x1097c1(0x6d7)][_0x1097c1(0x3b5)]=!![]:this[_0x1097c1(0xa7b)]['x']=Graphics['width']-(Graphics[_0x1097c1(0x7d6)]-Graphics[_0x1097c1(0x8f0)])/0x2-this[_0x1097c1(0xa7b)][_0x1097c1(0x7d6)]-0x4;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xb94)]=Scene_Battle['prototype'][_0x3ffb9d(0xb34)],Scene_Battle[_0x3ffb9d(0xb66)]['skillWindowRect']=function(){const _0x21cb16=_0x3ffb9d;if(this['battleLayoutStyle']()==='border'){if(_0x21cb16(0x7b1)!==_0x21cb16(0x650))return this[_0x21cb16(0xc16)]();else{if(!_0x3fd593)return 0x0;let _0x4fa834=0x0;const _0xf51aeb=_0x2b1e46[_0x21cb16(0x365)];return _0xf51aeb[_0x21cb16(0x1b7)](/<BATTLE UI OFFSET X:[ ]([\+\-]\d+)>/i)&&(_0x4fa834+=_0x5c172f(_0x1b9a28['$1'])),_0xf51aeb[_0x21cb16(0x1b7)](/<BATTLE UI OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i)&&(_0x4fa834+=_0xdce160(_0x1676c2['$1'])),_0x4fa834;}}else return this[_0x21cb16(0x655)]()?this['skillItemWindowRectMiddle']():VisuMZ[_0x21cb16(0x80e)][_0x21cb16(0xb94)][_0x21cb16(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)]['Scene_Battle_itemWindowRect']=Scene_Battle['prototype'][_0x3ffb9d(0x7ab)],Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7ab)]=function(){const _0x1b5c2a=_0x3ffb9d;if(this['battleLayoutStyle']()===_0x1b5c2a(0x94f)){if(_0x1b5c2a(0x2be)===_0x1b5c2a(0x2be))return this[_0x1b5c2a(0xc16)]();else this[_0x1b5c2a(0xbce)]=_0x4f1aa0,this[_0x1b5c2a(0x461)]=-_0x27fef4,this[_0x1b5c2a(0xb5a)]=_0x2024db,this['loadBitmap'](),this[_0x1b5c2a(0x263)]();}else{if(this['isSkillItemWindowsMiddle']()){if('RsyNv'!==_0x1b5c2a(0x8b9))return this['skillItemWindowRectMiddle']();else{if(!this['_battler'])return;if(!this[_0x1b5c2a(0x267)])return;const _0x2f9dc9=_0x2b57b4[_0x1b5c2a(0x80e)][_0x1b5c2a(0x901)][_0x1b5c2a(0x6d3)],_0x42db58=this['_hpGaugeSprite'];_0x42db58['visible']=this['isVisualHpGaugeDisplayed']();const _0xe0396b=_0x2f9dc9[_0x1b5c2a(0x598)],_0x557f82=_0x2f9dc9['OffsetY'];_0x42db58['x']=_0xe0396b,_0x42db58['x']+=this[_0x1b5c2a(0x8fa)][_0x1b5c2a(0x881)](),_0x42db58['y']=-this[_0x1b5c2a(0x8a0)]+_0x557f82,_0x42db58['y']+=this[_0x1b5c2a(0x8fa)][_0x1b5c2a(0x2b5)](),_0x47436f['ANTI_TINT_UI']&&_0xe27b01['_scene'][_0x1b5c2a(0x9da)]&&(_0x42db58['x']+=this['x'],_0x42db58['y']+=this['y']);}}else return VisuMZ[_0x1b5c2a(0x80e)][_0x1b5c2a(0xb97)][_0x1b5c2a(0x73d)](this);}},Scene_Battle['prototype'][_0x3ffb9d(0x655)]=function(){const _0x13238b=_0x3ffb9d;return VisuMZ[_0x13238b(0x80e)][_0x13238b(0x901)][_0x13238b(0x190)][_0x13238b(0xb68)];},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x550)]=function(){const _0x2411b=_0x3ffb9d,_0x34e27c=Sprite_Button['prototype']['blockWidth']()*0x2+0x4;let _0x5a290e=Graphics['boxWidth']-_0x34e27c;Imported[_0x2411b(0x820)]&&SceneManager[_0x2411b(0x521)]()&&(_0x5a290e+=_0x34e27c);const _0x16d033=this[_0x2411b(0x247)](),_0x18bd84=Graphics['boxHeight']-_0x16d033-this['statusWindowRect']()[_0x2411b(0x8a0)]+Window_BattleStatus[_0x2411b(0xb66)]['extraHeight'](),_0x5e6f10=0x0;return new Rectangle(_0x5e6f10,_0x16d033,_0x5a290e,_0x18bd84);},Scene_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5db)]=function(){const _0x47a08c=_0x3ffb9d;if(!VisuMZ['BattleCore']['Settings'][_0x47a08c(0x5e5)]['NameLegacy'])return;this[_0x47a08c(0x210)]=new Sprite(),this[_0x47a08c(0x210)]['x']=this[_0x47a08c(0x50e)]['x'],this[_0x47a08c(0x210)]['y']=this[_0x47a08c(0x50e)]['y'];const _0x3dd8b7=this[_0x47a08c(0xbc7)][_0x47a08c(0x76b)](this[_0x47a08c(0x50e)]);this[_0x47a08c(0x7f3)](this[_0x47a08c(0x210)],_0x3dd8b7);for(let _0x343deb=0x0;_0x343deb<0x8;_0x343deb++){const _0x51c68e=new Window_EnemyName(_0x343deb);this[_0x47a08c(0x210)][_0x47a08c(0x237)](_0x51c68e);}},Sprite_Battler['_motionSpeed']=VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x901)][_0x3ffb9d(0x772)][_0x3ffb9d(0x9cf)],VisuMZ['BattleCore'][_0x3ffb9d(0xb58)]=Sprite_Battler['prototype'][_0x3ffb9d(0xa0c)],Sprite_Battler[_0x3ffb9d(0xb66)]['initMembers']=function(){const _0x360f31=_0x3ffb9d;VisuMZ[_0x360f31(0x80e)]['Sprite_Battler_initMembers'][_0x360f31(0x73d)](this),this[_0x360f31(0x704)]();if(this['constructor']===Sprite_Enemy)this['createShadowSprite']();this[_0x360f31(0x342)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x704)]=function(){const _0x5bde75=_0x3ffb9d;this['_baseX']=0x0,this[_0x5bde75(0x531)]=0x0,this[_0x5bde75(0x934)]=0x0,this['_targetFloatHeight']=0x0,this[_0x5bde75(0x4c7)]=0x0,this['_floatWholeDuration']=0x0,this[_0x5bde75(0xa38)]=_0x5bde75(0xb45),this['_jumpHeight']=0x0,this[_0x5bde75(0x4c5)]=0x0,this['_jumpDuration']=0x0,this['_jumpWholeDuration']=0x0,this[_0x5bde75(0x625)]=0xff,this[_0x5bde75(0x246)]=0x0,this['_opacityWholeDuration']=0x0,this[_0x5bde75(0x517)]=_0x5bde75(0xb45),this['_currentAngle']=0x0,this[_0x5bde75(0x71f)]=0x0,this[_0x5bde75(0x745)]=0x0,this[_0x5bde75(0x1f9)]=0x0,this[_0x5bde75(0x490)]=_0x5bde75(0xb45),this[_0x5bde75(0x505)]=!![],this[_0x5bde75(0xa27)]=0x0,this[_0x5bde75(0xb53)]=0x0,this[_0x5bde75(0xbb2)]=0x0,this[_0x5bde75(0x976)]=0x0,this['_skewDuration']=0x0,this[_0x5bde75(0x988)]=0x0,this[_0x5bde75(0x77b)]=_0x5bde75(0xb45),this[_0x5bde75(0x847)]=0x1,this[_0x5bde75(0x7d7)]=0x1,this[_0x5bde75(0xc18)]=0x1,this[_0x5bde75(0x9c8)]=0x1,this['_growDuration']=0x0,this['_growWholeDuration']=0x0,this['_growEasing']=_0x5bde75(0xb45),this[_0x5bde75(0xbd8)]=0x1,this[_0x5bde75(0xaf8)]=0x0,this[_0x5bde75(0x381)]=0x0,this[_0x5bde75(0x4fc)]=0x0,this[_0x5bde75(0x36d)]=0x0,this[_0x5bde75(0x478)]=_0x5bde75(0xb45);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5d0)]=function(){const _0x31452f=_0x3ffb9d;this[_0x31452f(0x601)]=new Sprite(),this['_shadowSprite'][_0x31452f(0x6a0)]=ImageManager[_0x31452f(0x56b)]('Shadow2'),this['_shadowSprite'][_0x31452f(0x6a0)]['smooth']=VisuMZ[_0x31452f(0x80e)]['Settings']['Actor'][_0x31452f(0x27e)],this['_shadowSprite'][_0x31452f(0xab2)]['x']=0.5,this['_shadowSprite'][_0x31452f(0xab2)]['y']=0.5,this[_0x31452f(0x601)]['y']=-0x2,this[_0x31452f(0x601)][_0x31452f(0x54f)]=![],this[_0x31452f(0x237)](this[_0x31452f(0x601)]);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x342)]=function(){const _0x29c70f=_0x3ffb9d;this[_0x29c70f(0x391)]=new Sprite(),this[_0x29c70f(0x391)][_0x29c70f(0xab2)]['x']=0.5,this['_distortionSprite']['anchor']['y']=0.5,this[_0x29c70f(0x237)](this[_0x29c70f(0x391)]);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5a4)]=function(){const _0x9d085b=_0x3ffb9d;if(!this[_0x9d085b(0x391)])return;if(this['_shadowSprite']){const _0x9a71ca=this['getChildIndex'](this['_distortionSprite']);this[_0x9d085b(0x7f3)](this[_0x9d085b(0x601)],_0x9a71ca),this['updateShadowVisibility']();}this[_0x9d085b(0x4c1)]&&this[_0x9d085b(0x391)]['addChild'](this[_0x9d085b(0x4c1)]),this['_weaponSprite']&&this[_0x9d085b(0x391)][_0x9d085b(0x237)](this[_0x9d085b(0x5d2)]),this['_mainSprite']&&this[_0x9d085b(0x391)]['addChild'](this[_0x9d085b(0x3ff)]),this[_0x9d085b(0xa34)]&&this[_0x9d085b(0x391)][_0x9d085b(0x237)](this['_dragonbonesSpriteContainer']);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5f3)]=function(){const _0x36ec00=_0x3ffb9d;if(!this[_0x36ec00(0x601)])return;if(this['_battler']&&this[_0x36ec00(0x8fa)][_0x36ec00(0x506)]()){if(_0x36ec00(0x6d0)!==_0x36ec00(0x714)){const _0x4fcba5=this[_0x36ec00(0x601)][_0x36ec00(0x6a0)];this['_shadowSprite'][_0x36ec00(0x452)](0x0,0x0,_0x4fcba5[_0x36ec00(0x7d6)],_0x4fcba5[_0x36ec00(0x8a0)]);}else this[_0x36ec00(0x7dd)](_0x36ec00(0x7dc),'<CENTER>%1'['format'](_0x511143['battleDisplayText'](_0x24ee41)));}else{if(_0x36ec00(0xb08)!==_0x36ec00(0xb08)){const _0x1aa7cf=[],_0x50b4bb=new _0x12979e(this);return _0x50b4bb[_0x36ec00(0xa61)](),_0x1aa7cf[_0x36ec00(0x7dd)](_0x50b4bb),_0x1aa7cf;}else this[_0x36ec00(0x601)][_0x36ec00(0x452)](0x0,0x0,0x0,0x0);}},Sprite_Battler['prototype'][_0x3ffb9d(0x465)]=function(){const _0x967bff=_0x3ffb9d;return SceneManager[_0x967bff(0x341)]()?SceneManager[_0x967bff(0x947)][_0x967bff(0x9da)][_0x967bff(0xa14)]:this[_0x967bff(0x5be)];},Sprite_Battler['prototype'][_0x3ffb9d(0x6b6)]=function(_0xb3b33,_0x2357d1){const _0x208c1b=_0x3ffb9d;if(!this[_0x208c1b(0x8fa)]['isSpriteVisible']())return;const _0x45205a=VisuMZ['BattleCore'][_0x208c1b(0x901)]['Damage'],_0x281a8f=new Sprite_Damage();_0x281a8f['_duration']=_0x45205a[_0x208c1b(0x564)],this[_0x208c1b(0x22c)](_0x281a8f),_0x281a8f[_0x208c1b(0x6b6)](_0xb3b33,_0x2357d1),this[_0x208c1b(0xb1f)](_0x281a8f);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x523)]=function(_0x132ec2,_0x1c24b4,_0x2b9977){const _0x433214=_0x3ffb9d;if(!this[_0x433214(0x8fa)][_0x433214(0x77f)]())return;const _0x5bd0ee=VisuMZ[_0x433214(0x80e)][_0x433214(0x901)][_0x433214(0xa45)],_0xf9121e=new Sprite_Damage();_0xf9121e[_0x433214(0x62c)]=_0x5bd0ee['PopupDuration'],this[_0x433214(0x22c)](_0xf9121e),_0xf9121e[_0x433214(0x523)](_0x132ec2,_0x1c24b4,_0x2b9977),this[_0x433214(0xb1f)](_0xf9121e);},Sprite_Battler['prototype'][_0x3ffb9d(0xbc6)]=function(){const _0x24a6dd=_0x3ffb9d;if(!this[_0x24a6dd(0x8fa)][_0x24a6dd(0x337)]())return;while(this[_0x24a6dd(0x8fa)][_0x24a6dd(0x337)]()){this[_0x24a6dd(0x8fa)][_0x24a6dd(0x77f)]()&&this[_0x24a6dd(0x2ea)]();}this['_battler'][_0x24a6dd(0x31b)](),this[_0x24a6dd(0x8fa)][_0x24a6dd(0x7c0)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2ea)]=function(){const _0x277235=_0x3ffb9d,_0x13d89d=VisuMZ[_0x277235(0x80e)][_0x277235(0x901)]['Damage'],_0x1fcce3=new Sprite_Damage();_0x1fcce3['_duration']=_0x13d89d[_0x277235(0x564)],this['sortDamageSprites'](_0x1fcce3),_0x1fcce3[_0x277235(0x2eb)](this[_0x277235(0x8fa)]),_0x1fcce3[_0x277235(0x26e)](this[_0x277235(0x8fa)]),this[_0x277235(0xb1f)](_0x1fcce3);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb1f)]=function(_0x1ea6d1){const _0xcebf05=_0x3ffb9d;this['_damages']['push'](_0x1ea6d1);if(this[_0xcebf05(0x63f)]())SceneManager[_0xcebf05(0x947)][_0xcebf05(0x1bb)][_0xcebf05(0xb1f)](_0x1ea6d1,this['_battler']);else{this[_0xcebf05(0x465)]()[_0xcebf05(0x237)](_0x1ea6d1);if(SceneManager[_0xcebf05(0xb0b)]())_0x1ea6d1[_0xcebf05(0x530)]['x']=-0x1;}},Sprite_Battler['prototype'][_0x3ffb9d(0x63f)]=function(){const _0x48d34f=_0x3ffb9d;return!$gameSystem['isSideView']()&&this[_0x48d34f(0x8fa)]&&this[_0x48d34f(0x8fa)][_0x48d34f(0x2bb)]();},Sprite_Battler[_0x3ffb9d(0xb66)]['sortDamageSprites']=function(_0x454cc3){const _0x55d729=_0x3ffb9d;this[_0x55d729(0x9f1)](_0x454cc3,!![]);const _0x1b58fe=VisuMZ[_0x55d729(0x80e)][_0x55d729(0x901)][_0x55d729(0xa45)],_0x28c837=SceneManager[_0x55d729(0xb0b)]()?-0x1:0x1;if(_0x1b58fe[_0x55d729(0x3be)])for(const _0x307661 of this['_damages']){if(_0x55d729(0xa52)!=='xejZe'){if(!this[_0x55d729(0x2db)]())return;if(_0x48ffba<=0x0)return;this[_0x55d729(0x4c5)]=_0x1771e2,this[_0x55d729(0x1ff)]=_0x12afb9,this['_jumpWholeDuration']=_0x2cab78;}else _0x307661['x']+=_0x1b58fe[_0x55d729(0x47a)]*_0x28c837,_0x307661['y']+=_0x1b58fe[_0x55d729(0x565)];}else{if(_0x55d729(0x5f6)===_0x55d729(0x532)){if(!_0x40b7a6['isSceneBattle']())return;const _0x51180a=_0x532d5d['getLastPluginCommandInterpreter']();if(!_0x51180a)return;_0x51180a[_0x55d729(0x27b)](_0x55d729(0xb1e));}else{const _0xaaca97=this[_0x55d729(0xace)][this[_0x55d729(0xace)][_0x55d729(0x205)]-0x1];if(_0xaaca97){if(_0x55d729(0x356)!=='cPvUF')_0x454cc3['x']=_0xaaca97['x']+_0x1b58fe[_0x55d729(0x47a)]*_0x28c837,_0x454cc3['y']=_0xaaca97['y']+_0x1b58fe['PopupShiftY'];else{if(_0x99c206){const _0x43c4d0=_0x2057b6['indexOf'](_0x1c7809);return _0x43c4d0>=0x0?[_0x1dee41[_0x43c4d0-0x1]||_0x486c1a]:[_0x242fec];}}}}}},Sprite_Battler['prototype'][_0x3ffb9d(0x9f1)]=function(_0x263def,_0x1648aa){const _0x502835=_0x3ffb9d,_0xb2c583=SceneManager[_0x502835(0xb0b)]()?-0x1:0x1;let _0x43408c=this[_0x502835(0x904)];_0x43408c+=this['extraPositionX']();let _0x72965f=this[_0x502835(0x531)];const _0x1bd9f2=this[_0x502835(0x391)]['scale']['y'];_0x72965f+=this[_0x502835(0x1af)]();const _0x39e048=SceneManager[_0x502835(0x947)][_0x502835(0x1bb)];if(_0x39e048&&this['parent']===_0x39e048){_0x43408c+=_0x39e048['x']-this[_0x502835(0xb03)]();const _0x5cd77a=_0x39e048[_0x502835(0x230)]()*0x3/0x4;_0x72965f=_0x39e048['y']+_0x5cd77a,_0x72965f=Math['min'](_0x72965f,_0x39e048['y']+this['y']-this[_0x502835(0x8a0)]+_0x5cd77a);}_0x263def['x']=Math['round'](_0x43408c+this['damageOffsetX']()*_0xb2c583),_0x263def['y']=Math['round'](_0x72965f+this['damageOffsetY']());},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x5ee)]=Sprite_Battler[_0x3ffb9d(0xb66)]['damageOffsetX'],Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb03)]=function(){const _0x48feb4=_0x3ffb9d;let _0x17471d=VisuMZ['BattleCore'][_0x48feb4(0x5ee)][_0x48feb4(0x73d)](this),_0x4787d0=VisuMZ[_0x48feb4(0x80e)][_0x48feb4(0x901)][_0x48feb4(0xa45)][_0x48feb4(0x9c6)]||0x0;return Math['round'](_0x17471d+_0x4787d0);},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Battler_damageOffsetY']=Sprite_Battler['prototype']['damageOffsetY'],Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x62e)]=function(){const _0x50f793=_0x3ffb9d;let _0x197ee9=VisuMZ[_0x50f793(0x80e)][_0x50f793(0x916)][_0x50f793(0x73d)](this);switch(VisuMZ[_0x50f793(0x80e)][_0x50f793(0x901)]['Damage'][_0x50f793(0x3bd)]){case _0x50f793(0x8f8):_0x197ee9-=this[_0x50f793(0x8a0)]*this[_0x50f793(0x530)]['y'];break;case'center':_0x197ee9-=this[_0x50f793(0x8a0)]*this['scale']['y']*0.5;break;}let _0x2d93af=VisuMZ[_0x50f793(0x80e)]['Settings'][_0x50f793(0xa45)][_0x50f793(0x195)]||0x0;return Math['round'](_0x197ee9+_0x2d93af);},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb03)]=function(){const _0x1f378f=_0x3ffb9d;return Sprite_Battler[_0x1f378f(0xb66)][_0x1f378f(0xb03)][_0x1f378f(0x73d)](this);},Sprite_Actor['prototype'][_0x3ffb9d(0x62e)]=function(){const _0x5b0f47=_0x3ffb9d;return Sprite_Battler['prototype'][_0x5b0f47(0x62e)][_0x5b0f47(0x73d)](this);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2ca)]=function(_0xc533e0){const _0x3888cc=_0x3ffb9d;if(this[_0x3888cc(0x63f)]()){if(_0x3888cc(0x1b5)===_0x3888cc(0x1b5))SceneManager[_0x3888cc(0x947)][_0x3888cc(0x1bb)][_0x3888cc(0x2b2)](_0xc533e0);else return this['battlerName']()['match'](/\$/i);}else this[_0x3888cc(0x465)]()[_0x3888cc(0xa29)](_0xc533e0),this[_0x3888cc(0xace)][_0x3888cc(0x7bc)](_0xc533e0),_0xc533e0['destroy']();},VisuMZ['BattleCore'][_0x3ffb9d(0xa5c)]=Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc26)],Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc26)]=function(_0x404f39,_0x142afc){const _0x53a96f=_0x3ffb9d,_0x29bd9e=VisuMZ[_0x53a96f(0x80e)][_0x53a96f(0x901)];if(this[_0x53a96f(0x4a3)]===Sprite_Actor)_0x404f39+=_0x29bd9e[_0x53a96f(0x772)][_0x53a96f(0x598)]||0x0,_0x142afc+=_0x29bd9e[_0x53a96f(0x772)]['OffsetY']||0x0;else this['constructor']===Sprite_Enemy&&(_0x53a96f(0x980)===_0x53a96f(0x91e)?_0x1658f3[_0x53a96f(0x42c)](_0x55dbf5):(_0x404f39+=_0x29bd9e[_0x53a96f(0x5e5)][_0x53a96f(0x598)]||0x0,_0x142afc+=_0x29bd9e[_0x53a96f(0x5e5)]['OffsetY']||0x0));this['_battler']&&(_0x404f39=this[_0x53a96f(0x8fa)]['_forcedHomeX']??_0x404f39,_0x142afc=this[_0x53a96f(0x8fa)][_0x53a96f(0xb9d)]??_0x142afc),VisuMZ[_0x53a96f(0x80e)]['Sprite_Battler_setHome'][_0x53a96f(0x73d)](this,_0x404f39,_0x142afc),this[_0x53a96f(0xaf8)]=this[_0x53a96f(0xb48)],this[_0x53a96f(0x381)]=this['_homeY'],this[_0x53a96f(0x4fc)]=0x0,this['_homeWholeDuration']=0x0,this[_0x53a96f(0x478)]='Linear';},VisuMZ['BattleCore'][_0x3ffb9d(0x4a4)]=Sprite_Battler[_0x3ffb9d(0xb66)]['update'],Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)]=function(){const _0x1576f7=_0x3ffb9d;VisuMZ[_0x1576f7(0x80e)]['Sprite_Battler_update'][_0x1576f7(0x73d)](this),!this['_battler']&&this[_0x1576f7(0x267)]&&(this[_0x1576f7(0x267)][_0x1576f7(0x54f)]=![]);},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Battler_updateMain']=Sprite_Battler[_0x3ffb9d(0xb66)]['updateMain'],Sprite_Battler[_0x3ffb9d(0xb66)]['updateMain']=function(){const _0x5a10bd=_0x3ffb9d;this['updateScale'](),this['updateSkew'](),this[_0x5a10bd(0x89f)](),this[_0x5a10bd(0xc32)](),this[_0x5a10bd(0xaf6)](),VisuMZ[_0x5a10bd(0x80e)]['Sprite_Battler_updateMain'][_0x5a10bd(0x73d)](this);if(this['constructor']===Sprite_Enemy)this[_0x5a10bd(0x979)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x84d)]=Sprite_Battler['prototype']['updatePosition'],Sprite_Battler['prototype']['updatePosition']=function(){const _0x1b25b6=_0x3ffb9d;this['updateHomeMove'](),VisuMZ[_0x1b25b6(0x80e)][_0x1b25b6(0x84d)]['call'](this),this[_0x1b25b6(0x8cb)](),this[_0x1b25b6(0x1a2)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb32)]=function(_0x22c20b,_0x21d070,_0x4287b3,_0x2018e7){const _0x154bb7=_0x3ffb9d;(this['_targetHomeX']!==_0x22c20b||this['_targetHomeY']!==_0x21d070)&&(_0x154bb7(0x5fb)!==_0x154bb7(0x2b0)?(this[_0x154bb7(0xaf8)]=_0x22c20b,this[_0x154bb7(0x381)]=_0x21d070,this[_0x154bb7(0x4fc)]=_0x4287b3,this[_0x154bb7(0x36d)]=_0x4287b3,this[_0x154bb7(0x478)]=_0x2018e7,_0x4287b3<=0x0&&this[_0x154bb7(0x38b)]()):_0x48c3a6[_0x154bb7(0x80e)][_0x154bb7(0x481)]['call'](this));},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7e5)]=function(){const _0x2d3a3a=_0x3ffb9d;if(this[_0x2d3a3a(0x4fc)]<=0x0)return;const _0x2fe531=this['_homeDuration'],_0x202200=this[_0x2d3a3a(0x36d)],_0x210bc1=this['_homeEasing'];Imported[_0x2d3a3a(0x820)]?(this[_0x2d3a3a(0xb48)]=this['applyEasing'](this[_0x2d3a3a(0xb48)],this[_0x2d3a3a(0xaf8)],_0x2fe531,_0x202200,_0x210bc1),this[_0x2d3a3a(0xb27)]=this[_0x2d3a3a(0xb7d)](this[_0x2d3a3a(0xb27)],this[_0x2d3a3a(0x381)],_0x2fe531,_0x202200,_0x210bc1)):(this[_0x2d3a3a(0xb48)]=(this[_0x2d3a3a(0xb48)]*(_0x2fe531-0x1)+this[_0x2d3a3a(0xaf8)])/_0x2fe531,this[_0x2d3a3a(0xb27)]=(this['_homeY']*(_0x2fe531-0x1)+this[_0x2d3a3a(0x381)])/_0x2fe531);this[_0x2d3a3a(0x4fc)]--;if(this[_0x2d3a3a(0x4fc)]<=0x0)this[_0x2d3a3a(0x38b)]();},Sprite_Battler['prototype'][_0x3ffb9d(0x38b)]=function(){const _0x4c5cc6=_0x3ffb9d;this[_0x4c5cc6(0xb48)]=this[_0x4c5cc6(0xaf8)],this['_homeY']=this[_0x4c5cc6(0x381)];},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8cb)]=function(){const _0x5075a9=_0x3ffb9d;this[_0x5075a9(0x904)]=this['x'],this[_0x5075a9(0x531)]=this['y'],this[_0x5075a9(0xb4b)](),this[_0x5075a9(0x997)](),this['x']+=this['extraPositionX'](),this['y']+=this[_0x5075a9(0x1af)](),this['y']+=this[_0x5075a9(0x43d)](),this['x']=Math[_0x5075a9(0x9bd)](this['x']),this['y']=Math[_0x5075a9(0x9bd)](this['y']);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x618)]=function(){let _0x5d2f6b=0x0;return _0x5d2f6b;},Sprite_Battler[_0x3ffb9d(0xb66)]['extraPositionY']=function(){const _0x39a561=_0x3ffb9d;let _0x2aea00=0x0;return this[_0x39a561(0x8fa)]&&!this[_0x39a561(0x8fa)][_0x39a561(0x3f8)]()&&(_0x2aea00-=this[_0x39a561(0x934)],_0x2aea00-=this[_0x39a561(0x415)]),_0x2aea00;},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x43d)]=function(){const _0xb02d02=_0x3ffb9d;let _0x45ad69=0x0;if(this[_0xb02d02(0x391)]&&this[_0xb02d02(0x4a3)]!==Sprite_SvEnemy){const _0x3b5257=this[_0xb02d02(0x391)][_0xb02d02(0x530)]['y'];_0x45ad69-=(_0x3b5257-0x1)*this[_0xb02d02(0x8a0)];}return _0x45ad69;},Sprite_Battler[_0x3ffb9d(0xb66)]['updateFlip']=function(){const _0x1883f4=_0x3ffb9d,_0x40cf4c=this['_battler']&&this[_0x1883f4(0x8fa)][_0x1883f4(0x9e5)]();this[_0x1883f4(0xbd8)]=(_0x40cf4c?-0x1:0x1)*Math[_0x1883f4(0x8f4)](this[_0x1883f4(0x530)]['x']);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x64e)]=function(_0x2c26ed,_0x4d1cf6,_0x3b5269){const _0x45b9ff=_0x3ffb9d;if(!this[_0x45b9ff(0x2db)]())return;if(this[_0x45b9ff(0x703)]===_0x2c26ed)return;this['_targetFloatHeight']=_0x2c26ed,this[_0x45b9ff(0x4c7)]=_0x4d1cf6,this[_0x45b9ff(0xb6c)]=_0x4d1cf6,this[_0x45b9ff(0xa38)]=_0x3b5269||_0x45b9ff(0xb45);if(_0x4d1cf6<=0x0)this['_floatHeight']=_0x2c26ed;},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb4b)]=function(){const _0x19b935=_0x3ffb9d;if(this['_floatDuration']<=0x0)return;const _0x5e47a8=this['_floatDuration'],_0x6ac361=this[_0x19b935(0xb6c)],_0x2cb31c=this['_floatEasing'];if(Imported[_0x19b935(0x820)])this['_floatHeight']=this[_0x19b935(0xb7d)](this['_floatHeight'],this[_0x19b935(0x703)],_0x5e47a8,_0x6ac361,_0x2cb31c);else{if(_0x19b935(0x636)===_0x19b935(0x636))this[_0x19b935(0x934)]=(this[_0x19b935(0x934)]*(_0x5e47a8-0x1)+this['_targetFloatHeight'])/_0x5e47a8;else{if(this['actor']()[_0x19b935(0x365)]['match'](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i))return _0x4e032e(_0x383bd7['$1']);else{if(this[_0x19b935(0x6aa)]()['note'][_0x19b935(0x1b7)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return _0x5b2914(_0x272db8['$2']);}return 0x0;}}this[_0x19b935(0x4c7)]--;if(this['_floatDuration']<=0x0)this['onFloatEnd']();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x553)]=function(){const _0xe542d3=_0x3ffb9d;this[_0xe542d3(0x934)]=this[_0xe542d3(0x703)];},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8a8)]=function(){const _0x5aa0c1=_0x3ffb9d;return this[_0x5aa0c1(0x4c7)]>0x0;},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb40)]=function(_0x5d6682,_0x3880ca){const _0x169448=_0x3ffb9d;if(!this[_0x169448(0x2db)]())return;if(_0x3880ca<=0x0)return;this['_jumpMaxHeight']=_0x5d6682,this[_0x169448(0x1ff)]=_0x3880ca,this['_jumpWholeDuration']=_0x3880ca;},Sprite_Battler[_0x3ffb9d(0xb66)]['updateJump']=function(){const _0x4dd8b3=_0x3ffb9d;if(this[_0x4dd8b3(0x1ff)]<=0x0)return;const _0x1f959a=this[_0x4dd8b3(0xa74)]-this['_jumpDuration'],_0x360017=this[_0x4dd8b3(0xa74)]/0x2,_0x35e4f8=this[_0x4dd8b3(0x4c5)],_0x39e421=-_0x35e4f8/Math['pow'](_0x360017,0x2);this[_0x4dd8b3(0x415)]=_0x39e421*Math[_0x4dd8b3(0x394)](_0x1f959a-_0x360017,0x2)+_0x35e4f8,this[_0x4dd8b3(0x1ff)]--;if(this[_0x4dd8b3(0x1ff)]<=0x0)return this[_0x4dd8b3(0x3e6)]();},Sprite_Battler['prototype'][_0x3ffb9d(0x3e6)]=function(){const _0x4b749c=_0x3ffb9d;this[_0x4b749c(0x415)]=0x0;},Sprite_Battler[_0x3ffb9d(0xb66)]['isJumping']=function(){const _0x2d3719=_0x3ffb9d;return this[_0x2d3719(0x1ff)]>0x0;},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x300)]=function(_0x44b48,_0x1b4791,_0x5cd1ca){const _0x358ef8=_0x3ffb9d;if(this[_0x358ef8(0x625)]===_0x44b48)return;this[_0x358ef8(0x625)]=_0x44b48,this[_0x358ef8(0x246)]=_0x1b4791,this[_0x358ef8(0xad0)]=_0x1b4791,this[_0x358ef8(0x517)]=_0x5cd1ca||'Linear';if(_0x1b4791<=0x0)this[_0x358ef8(0x430)]=_0x44b48;},Sprite_Battler['prototype'][_0x3ffb9d(0x1a2)]=function(){const _0x31af05=_0x3ffb9d;if(this[_0x31af05(0x4a3)][_0x31af05(0x453)]===_0x31af05(0xbd4))return;if(this[_0x31af05(0x246)]<=0x0)return;const _0x4253ca=this['_opacityDuration'],_0x3129c8=this[_0x31af05(0xad0)],_0xf0e46=this[_0x31af05(0x517)];Imported[_0x31af05(0x820)]?'WQLek'===_0x31af05(0x1b1)?this[_0x31af05(0x430)]=this[_0x31af05(0xb7d)](this[_0x31af05(0x430)],this[_0x31af05(0x625)],_0x4253ca,_0x3129c8,_0xf0e46):(this[_0x31af05(0x884)](),this[_0x31af05(0x990)]()):this[_0x31af05(0x430)]=(this[_0x31af05(0x430)]*(_0x4253ca-0x1)+this['_targetOpacity'])/_0x4253ca;this[_0x31af05(0x246)]--;if(this[_0x31af05(0x246)]<=0x0)this[_0x31af05(0x6f4)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6f4)]=function(){const _0x35d444=_0x3ffb9d;this[_0x35d444(0x430)]=this[_0x35d444(0x625)];},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa69)]=function(){return this['_opacityDuration']>0x0;},Sprite_Battler[_0x3ffb9d(0xb66)]['updateShadow']=function(){const _0x5b1ce0=_0x3ffb9d;this[_0x5b1ce0(0x601)][_0x5b1ce0(0x54f)]=this[_0x5b1ce0(0x8fa)][_0x5b1ce0(0xc11)](),this['updateShadowPosition']();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x786)]=function(){const _0x3358ed=_0x3ffb9d;if(!this[_0x3358ed(0x601)])return;this['_shadowSprite']['y']=this[_0x3358ed(0x531)]-this['y']-0x2;},Sprite_Battler['prototype'][_0x3ffb9d(0xb3d)]=function(){const _0x5e5f7f=_0x3ffb9d;if(!this[_0x5e5f7f(0x8fa)])return;this['_shadowScaleX']=this[_0x5e5f7f(0x8fa)][_0x5e5f7f(0x9e0)](),this[_0x5e5f7f(0x31f)]=this[_0x5e5f7f(0x8fa)]['battlerShadowScaleY']();},Game_BattlerBase[_0x3ffb9d(0xb66)]['battlerShadowScaleX']=function(){const _0x39e0d9=_0x3ffb9d,_0x37f91a=this[_0x39e0d9(0x2bb)]()?this[_0x39e0d9(0x6aa)]():this[_0x39e0d9(0x402)]();if(_0x37f91a){const _0x172b27=_0x37f91a[_0x39e0d9(0x365)];if(_0x172b27[_0x39e0d9(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x172b27[_0x39e0d9(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE X):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Game_BattlerBase['prototype'][_0x3ffb9d(0x9ae)]=function(){const _0x5dc3a1=_0x3ffb9d,_0x31ff85=this[_0x5dc3a1(0x2bb)]()?this[_0x5dc3a1(0x6aa)]():this[_0x5dc3a1(0x402)]();if(_0x31ff85){const _0x1d94a6=_0x31ff85[_0x5dc3a1(0x365)];if(_0x1d94a6[_0x5dc3a1(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return Number(RegExp['$1'])*0.01;else{if(_0x1d94a6[_0x5dc3a1(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return Number(RegExp['$1'])||0x0;}}return 0x1;},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1d9)]=function(){const _0x38e0c6=_0x3ffb9d;if(this[_0x38e0c6(0x4a3)]===Sprite_SvEnemy)return;this[_0x38e0c6(0x25c)](),this[_0x38e0c6(0x321)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x321)]=function(){const _0x174e10=_0x3ffb9d,_0xc82385=this['_distortionSprite'];_0xc82385&&(_0x174e10(0xba6)==='bEVzL'?_0x6d9ae0=_0xe061a9[_0x174e10(0x5e6)]:(_0xc82385[_0x174e10(0x530)]['x']=this[_0x174e10(0x74f)](),_0xc82385[_0x174e10(0x530)]['y']=this[_0x174e10(0xae8)]()));},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x74f)]=function(){let _0x1c95df=0x1;return _0x1c95df*=this['_flipScaleX'],_0x1c95df*=this['_growX'],_0x1c95df;},Sprite_Battler['prototype']['mainSpriteScaleY']=function(){const _0x5890e9=_0x3ffb9d;return 0x1*this[_0x5890e9(0x7d7)];},Sprite_Battler['prototype'][_0x3ffb9d(0xc2d)]=function(){const _0x9001a1=_0x3ffb9d;return this[_0x9001a1(0x7d6)]*this[_0x9001a1(0x74f)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xba4)]=function(){const _0x4d19f0=_0x3ffb9d;return this[_0x4d19f0(0x8a0)]*this[_0x4d19f0(0xae8)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x45e)]=function(_0x24eaeb,_0xddedcb,_0x3c0cda,_0xae538d){const _0xdf3425=_0x3ffb9d;if(!this[_0xdf3425(0x2db)]())return;if(!this[_0xdf3425(0x391)])return;if(this[_0xdf3425(0xc18)]===_0x24eaeb&&this[_0xdf3425(0x9c8)]===_0xddedcb)return;this[_0xdf3425(0xc18)]=_0x24eaeb,this['_targetGrowY']=_0xddedcb,this['_growDuration']=_0x3c0cda,this[_0xdf3425(0x7ed)]=_0x3c0cda,this[_0xdf3425(0xa1e)]=_0xae538d||'Linear',_0x3c0cda<=0x0&&(_0xdf3425(0x7cc)!==_0xdf3425(0x7cc)?(this['_borderPortraitSprite']['x']=0x0,this[_0xdf3425(0x41e)]=_0x3ed99b[_0xdf3425(0x21e)](_0x19e343[_0xdf3425(0x7d6)]/0x2)):(this['_growX']=this['_targetGrowX'],this[_0xdf3425(0x7d7)]=this[_0xdf3425(0x9c8)]));},Sprite_Battler[_0x3ffb9d(0xb66)]['updateGrow']=function(){const _0x43b090=_0x3ffb9d;if(this[_0x43b090(0x702)]<=0x0)return;if(!this['_distortionSprite'])return;const _0x5167fb=this[_0x43b090(0x702)],_0x54f583=this[_0x43b090(0x7ed)],_0x132c4b=this[_0x43b090(0xa1e)];Imported[_0x43b090(0x820)]?_0x43b090(0x301)!==_0x43b090(0x301)?(this[_0x43b090(0xaae)]=!![],_0xe5c483[_0x43b090(0x646)]=_0x1c7400):(this[_0x43b090(0x847)]=this['applyEasing'](this[_0x43b090(0x847)],this[_0x43b090(0xc18)],_0x5167fb,_0x54f583,_0x132c4b),this['_growY']=this['applyEasing'](this[_0x43b090(0x7d7)],this[_0x43b090(0x9c8)],_0x5167fb,_0x54f583,_0x132c4b)):(this[_0x43b090(0x847)]=(this['_growX']*(_0x5167fb-0x1)+this[_0x43b090(0xc18)])/_0x5167fb,this[_0x43b090(0x7d7)]=(this[_0x43b090(0x7d7)]*(_0x5167fb-0x1)+this[_0x43b090(0x9c8)])/_0x5167fb);this['_growDuration']--;if(this[_0x43b090(0x702)]<=0x0)this['onGrowEnd']();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb6e)]=function(){const _0x2a4abe=_0x3ffb9d;this[_0x2a4abe(0x847)]=this['_targetGrowX'],this[_0x2a4abe(0x7d7)]=this[_0x2a4abe(0x9c8)];},Sprite_Battler[_0x3ffb9d(0xb66)]['isGrowing']=function(){const _0x4eae8c=_0x3ffb9d;return this[_0x4eae8c(0x702)]>0x0;},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6c8)]=function(_0x35c2e4,_0x460bd4,_0x2f914f,_0x32fdde){const _0x8e489=_0x3ffb9d;if(!this[_0x8e489(0x2db)]())return;if(!this[_0x8e489(0x391)])return;if(this[_0x8e489(0xbb2)]===_0x35c2e4&&this[_0x8e489(0x976)]===_0x460bd4)return;this[_0x8e489(0xbb2)]=_0x35c2e4,this[_0x8e489(0x976)]=_0x460bd4,this[_0x8e489(0x392)]=_0x2f914f,this[_0x8e489(0x988)]=_0x2f914f,this[_0x8e489(0x77b)]=_0x32fdde||_0x8e489(0xb45),_0x2f914f<=0x0&&(this[_0x8e489(0x391)][_0x8e489(0x7e0)]['x']=this[_0x8e489(0xbb2)],this['_distortionSprite'][_0x8e489(0x7e0)]['y']=this[_0x8e489(0x976)]);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5c9)]=function(){const _0xb16b5=_0x3ffb9d;if(this[_0xb16b5(0x392)]<=0x0)return;if(!this[_0xb16b5(0x391)])return;const _0x51d5ac=this[_0xb16b5(0x392)],_0x126a9a=this[_0xb16b5(0x988)],_0x183707=this['_skewEasing'],_0x3ef5db=this[_0xb16b5(0x391)];Imported[_0xb16b5(0x820)]?(_0x3ef5db[_0xb16b5(0x7e0)]['x']=this[_0xb16b5(0xb7d)](_0x3ef5db[_0xb16b5(0x7e0)]['x'],this[_0xb16b5(0xbb2)],_0x51d5ac,_0x126a9a,_0x183707),_0x3ef5db[_0xb16b5(0x7e0)]['y']=this[_0xb16b5(0xb7d)](_0x3ef5db[_0xb16b5(0x7e0)]['y'],this[_0xb16b5(0x976)],_0x51d5ac,_0x126a9a,_0x183707)):(_0x3ef5db['skew']['x']=(_0x3ef5db[_0xb16b5(0x7e0)]['x']*(_0x51d5ac-0x1)+this[_0xb16b5(0xbb2)])/_0x51d5ac,_0x3ef5db[_0xb16b5(0x7e0)]['y']=(_0x3ef5db[_0xb16b5(0x7e0)]['y']*(_0x51d5ac-0x1)+this['_targetSkewY'])/_0x51d5ac);this[_0xb16b5(0x392)]--;if(this['_skewDuration']<=0x0)this[_0xb16b5(0x409)]();},Sprite_Battler['prototype']['onSkewEnd']=function(){const _0x5399b4=_0x3ffb9d;this[_0x5399b4(0x391)]['skew']['x']=this[_0x5399b4(0xbb2)],this['_distortionSprite'][_0x5399b4(0x7e0)]['y']=this['_targetSkewY'];},Sprite_Battler['prototype'][_0x3ffb9d(0x5ab)]=function(){const _0x77fcf3=_0x3ffb9d;return this[_0x77fcf3(0x392)]>0x0;},Sprite_Battler['prototype'][_0x3ffb9d(0x60d)]=function(_0x1b19cd,_0x8e108,_0x24f7ab,_0x4dd559){const _0x431736=_0x3ffb9d;if(!this[_0x431736(0x2db)]())return;if(!this[_0x431736(0x391)])return;if(this[_0x431736(0x71f)]===_0x1b19cd)return;this[_0x431736(0x71f)]=_0x1b19cd,this[_0x431736(0x745)]=_0x8e108,this[_0x431736(0x1f9)]=_0x8e108,this[_0x431736(0x490)]=_0x24f7ab||'Linear',this[_0x431736(0x505)]=_0x4dd559,this['_angleRevertOnFinish']===undefined&&(this[_0x431736(0x505)]=!![]),_0x8e108<=0x0&&(this[_0x431736(0x911)]=_0x1b19cd,this[_0x431736(0x505)]&&('LuFep'!==_0x431736(0xb00)?(_0xb9cdd1[_0x431736(0x34c)]=!![],this['makeSuccess'](_0x3ecfdf)):(this[_0x431736(0x71f)]=0x0,this[_0x431736(0x911)]=0x0)));},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x89f)]=function(){const _0x165f11=_0x3ffb9d;this[_0x165f11(0x2f5)](),this[_0x165f11(0x863)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2f5)]=function(){const _0x3df352=_0x3ffb9d;if(this['_angleDuration']<=0x0)return;const _0x4ed0d9=this[_0x3df352(0x745)],_0x38febf=this[_0x3df352(0x1f9)],_0x5ea25d=this['_angleEasing'];if(Imported[_0x3df352(0x820)]){if(_0x3df352(0xa33)!==_0x3df352(0xa33))return this[_0x3df352(0x3bf)][_0x3df352(0x928)]();else this[_0x3df352(0x911)]=this[_0x3df352(0xb7d)](this[_0x3df352(0x911)],this[_0x3df352(0x71f)],_0x4ed0d9,_0x38febf,_0x5ea25d);}else this[_0x3df352(0x911)]=(this[_0x3df352(0x911)]*(_0x4ed0d9-0x1)+this[_0x3df352(0x71f)])/_0x4ed0d9;this[_0x3df352(0x745)]--;if(this[_0x3df352(0x745)]<=0x0)this['onAngleEnd']();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x989)]=function(){const _0x4640a4=_0x3ffb9d;this[_0x4640a4(0x911)]=this[_0x4640a4(0x71f)],this[_0x4640a4(0x505)]&&(this[_0x4640a4(0x71f)]=0x0,this[_0x4640a4(0x911)]=0x0);},Sprite_Battler['prototype'][_0x3ffb9d(0xc2b)]=function(){return this['_angleDuration']>0x0;},Sprite_Battler[_0x3ffb9d(0xb66)]['applyAngleChange']=function(){const _0x41b478=_0x3ffb9d;if(!this[_0x41b478(0x391)])return;const _0xfeb9ac=this[_0x41b478(0x911)],_0x5c0db9=this['scale']['x'],_0x5d4270=this[_0x41b478(0x8fa)]['isActor']()?-0x1:0x1;this[_0x41b478(0x391)][_0x41b478(0x543)]=_0xfeb9ac*_0x5c0db9*_0x5d4270;const _0x50c9e8=this['_distortionSprite'][_0x41b478(0x530)]['y'];this[_0x41b478(0x391)]['y']=this[_0x41b478(0x8a0)]*-0.5*(0x2-_0x50c9e8),this[_0x41b478(0x391)]['y']=Math[_0x41b478(0x21e)](this[_0x41b478(0x391)]['y']);const _0x427125=[this['_mainSprite'],this[_0x41b478(0x4c1)],this['_dragonbonesSpriteContainer']];for(const _0x2b788e of _0x427125){if('tbYix'==='tbYix'){if(!_0x2b788e)continue;_0x2b788e['y']=this[_0x41b478(0x8a0)]*0.5;}else{if(this['isCertainHit']())return _0x19e1f3;const _0x3a25c0=this['subject'](),_0x12986b=_0xb640f2;let _0x57506d=[],_0x7a2ea1=[];_0x57506d[_0x41b478(0x7dd)](this[_0x41b478(0xaee)]['arPenFlat'],this[_0x41b478(0xaee)][_0x41b478(0x902)]),_0x7a2ea1[_0x41b478(0x7dd)](this[_0x41b478(0xaee)][_0x41b478(0x1f8)],this[_0x41b478(0xaee)]['arRedRate']);const _0x241cdd=this[_0x41b478(0x94e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)>/i,_0x3ce31c=this[_0x41b478(0x94e)]()?/<ARMOR REDUCTION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC REDUCTION:[ ](\d+\.?\d*)([%％])>/i,_0x27139d=this[_0x41b478(0x94e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)>/i,_0x1a6c57=this[_0x41b478(0x94e)]()?/<ARMOR PENETRATION:[ ](\d+\.?\d*)([%％])>/i:/<MAGIC PENETRATION:[ ](\d+\.?\d*)([%％])>/i;return _0x57506d=_0x57506d['concat'](_0x12986b['traitObjects']()[_0x41b478(0x2e9)](_0x3a09ff=>_0x3a09ff&&_0x3a09ff[_0x41b478(0x365)][_0x41b478(0x1b7)](_0x241cdd)?_0x49cf0f(_0x4757b4['$1']):0x0)),_0x7a2ea1=_0x7a2ea1['concat'](_0x12986b[_0x41b478(0x388)]()['map'](_0x382d9b=>_0x382d9b&&_0x382d9b['note'][_0x41b478(0x1b7)](_0x3ce31c)?_0x48f88e(_0x20cfb4['$1'])/0x64:0x0)),_0x57506d=_0x57506d[_0x41b478(0x416)](_0x3a25c0['traitObjects']()['map'](_0x1c0032=>_0x1c0032&&_0x1c0032[_0x41b478(0x365)]['match'](_0x27139d)?_0x3478fa(_0x366400['$1']):0x0)),_0x7a2ea1=_0x7a2ea1[_0x41b478(0x416)](_0x3a25c0[_0x41b478(0x388)]()[_0x41b478(0x2e9)](_0x13c7db=>_0x13c7db&&_0x13c7db['note'][_0x41b478(0x1b7)](_0x1a6c57)?_0x5dd051(_0xba4384['$1'])/0x64:0x0)),this[_0x41b478(0x33b)]()[_0x41b478(0x365)]['match'](_0x27139d)&&_0x57506d['push'](_0x5afd23(_0x36f5a6['$1'])),this[_0x41b478(0x33b)]()[_0x41b478(0x365)]['match'](_0x1a6c57)&&_0x7a2ea1[_0x41b478(0x7dd)](_0xc7e6ed(_0x4b1e52['$1'])),_0x11385d=_0x57506d[_0x41b478(0x47f)]((_0x5be2b5,_0x28174e)=>_0x5be2b5-_0x28174e,_0x5b788e),_0xaf843>0x0&&(_0x4ab32c=_0x7a2ea1['reduce']((_0x2fadf3,_0x57468b)=>_0x2fadf3*(0x1-_0x57468b),_0x8fef1c)),_0x11494b;}}this['_shadowSprite']&&(this[_0x41b478(0xb3f)]=this['_shadowScaleX']??0x1,this['_shadowScaleY']=this['_shadowScaleY']??0x1,this[_0x41b478(0x601)][_0x41b478(0x530)]['x']=this[_0x41b478(0x391)]['scale']['x']*this['_shadowScaleX'],this[_0x41b478(0x601)][_0x41b478(0x530)]['y']=this[_0x41b478(0x391)]['scale']['y']*this['_shadowScaleY']);},VisuMZ['BattleCore']['Sprite_Actor_createStateSprite']=Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbd0)],Sprite_Actor[_0x3ffb9d(0xb66)]['createStateSprite']=function(){const _0x5511bc=_0x3ffb9d;VisuMZ[_0x5511bc(0x80e)][_0x5511bc(0x9b0)][_0x5511bc(0x73d)](this),VisuMZ[_0x5511bc(0x80e)][_0x5511bc(0x901)][_0x5511bc(0x6d3)][_0x5511bc(0x52e)]&&(_0x5511bc(0xae4)!==_0x5511bc(0x905)?this[_0x5511bc(0x19a)]():this[_0x5511bc(0xb85)]=!![]);},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Enemy_createStateIconSprite']=Sprite_Enemy[_0x3ffb9d(0xb66)]['createStateIconSprite'],Sprite_Enemy[_0x3ffb9d(0xb66)]['createStateIconSprite']=function(){const _0x301cb7=_0x3ffb9d;VisuMZ[_0x301cb7(0x80e)][_0x301cb7(0x901)][_0x301cb7(0x6d3)][_0x301cb7(0xa24)]&&('hCypG'===_0x301cb7(0x929)?this[_0x301cb7(0x19a)]():_0x266e70[_0x301cb7(0x80e)][_0x301cb7(0x49e)][_0x301cb7(0x73d)](this)),VisuMZ[_0x301cb7(0x80e)][_0x301cb7(0x414)]['call'](this);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x19a)]=function(){const _0xc4acbd=_0x3ffb9d;if(!ConfigManager['visualHpGauge'])return;if(this['constructor']===Sprite_SvEnemy)return;const _0x20f457=VisuMZ['BattleCore'][_0xc4acbd(0x901)][_0xc4acbd(0x6d3)],_0x4bc636=new Sprite_HpGauge();_0x4bc636[_0xc4acbd(0xab2)]['x']=_0x20f457[_0xc4acbd(0x339)],_0x4bc636[_0xc4acbd(0xab2)]['y']=_0x20f457[_0xc4acbd(0x451)],_0x4bc636[_0xc4acbd(0x530)]['x']=_0x4bc636['scale']['y']=_0x20f457[_0xc4acbd(0x8fc)],this['_hpGaugeSprite']=_0x4bc636,this[_0xc4acbd(0x237)](this[_0xc4acbd(0x267)]),Spriteset_Battle[_0xc4acbd(0x1fd)]&&BattleManager[_0xc4acbd(0x2ee)](this[_0xc4acbd(0x267)]);},VisuMZ['BattleCore'][_0x3ffb9d(0x873)]=Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x427)],Sprite_Battler[_0x3ffb9d(0xb66)]['setBattler']=function(_0x33d65a){const _0x2ab7f1=_0x3ffb9d,_0x2dee54=this['_battler'];VisuMZ['BattleCore']['Sprite_Battler_setBattler'][_0x2ab7f1(0x73d)](this,_0x33d65a),this[_0x2ab7f1(0x634)](_0x33d65a);if(_0x2dee54!==_0x33d65a)this[_0x2ab7f1(0xb3d)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x634)]=function(_0x470d71){const _0x2b78f4=_0x3ffb9d;if(!_0x470d71)return;if(!this['_hpGaugeSprite'])return;if(_0x470d71[_0x2b78f4(0x2bb)]()){}else{if(_0x470d71[_0x2b78f4(0x2a7)]()){if('cSXqa'!==_0x2b78f4(0x1ec)){if(this[_0x2b78f4(0x4a3)]===Sprite_SvEnemy&&!_0x470d71['hasSvBattler']())return;}else{this['_borderPortraitDuration']=0x14,this[_0x2b78f4(0x24b)][_0x2b78f4(0x6a0)]=_0x16b778;_0x468a3d[_0x2b78f4(0x947)][_0x2b78f4(0x4b4)]()?(this[_0x2b78f4(0x24b)]['x']=0x0,this[_0x2b78f4(0x41e)]=_0x3b9523[_0x2b78f4(0x21e)](_0xd45ead[_0x2b78f4(0x7d6)]/0x2)):(this[_0x2b78f4(0x24b)]['x']=this[_0x2b78f4(0x7d6)],this[_0x2b78f4(0x41e)]=this['width']*0x3/0x4);this[_0x2b78f4(0x24b)][_0x2b78f4(0x430)]=0x0,this[_0x2b78f4(0x24b)]['y']=this['y']+this[_0x2b78f4(0x8a0)];const _0x5ec4df=_0x1b853b[_0x2b78f4(0x6aa)]();_0x5ec4df&&(this[_0x2b78f4(0x41e)]+=_0x5ec4df[_0x2b78f4(0x921)](),this['_borderPortraitSprite']['y']+=_0x5ec4df[_0x2b78f4(0xac0)]());}}}this['_hpGaugeSprite'][_0x2b78f4(0x2eb)](_0x470d71,'hp');},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x26f)]=function(){const _0x35c849=_0x3ffb9d;return this[_0x35c849(0x8fa)]&&this[_0x35c849(0x8fa)][_0x35c849(0x26f)]();},Sprite_Battler[_0x3ffb9d(0xb66)]['updateStaticSvBattlerFrames']=function(){const _0x55fa44=_0x3ffb9d,_0x10f66d=this['_mainSprite'][_0x55fa44(0x6a0)];if(!_0x10f66d)return;const _0x55dfed=_0x10f66d[_0x55fa44(0x7d6)];let _0x1aab56=_0x10f66d[_0x55fa44(0x8a0)];if(this['_battler'][_0x55fa44(0xb78)]()){if(this['_frame'])_0x1aab56=Math['max'](0x0,this[_0x55fa44(0xbe7)][_0x55fa44(0x8a0)]-0x4);}this[_0x55fa44(0x3ff)][_0x55fa44(0x452)](0x0,0x0,_0x55dfed,_0x1aab56),this['setFrame'](0x0,0x0,_0x55dfed,_0x1aab56);},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xaf6)]=function(){const _0x3cc77a=_0x3ffb9d;if(!this[_0x3cc77a(0x8fa)])return;if(!this[_0x3cc77a(0x267)])return;const _0x30893c=VisuMZ[_0x3cc77a(0x80e)][_0x3cc77a(0x901)][_0x3cc77a(0x6d3)],_0x1f273a=this['_hpGaugeSprite'];_0x1f273a[_0x3cc77a(0x54f)]=this[_0x3cc77a(0xae1)]();const _0x2411fd=_0x30893c[_0x3cc77a(0x598)],_0x59b628=_0x30893c[_0x3cc77a(0x622)];_0x1f273a['x']=_0x2411fd,_0x1f273a['x']+=this[_0x3cc77a(0x8fa)][_0x3cc77a(0x881)](),_0x1f273a['y']=-this[_0x3cc77a(0x8a0)]+_0x59b628,_0x1f273a['y']+=this['_battler'][_0x3cc77a(0x2b5)](),Spriteset_Battle['ANTI_TINT_UI']&&SceneManager[_0x3cc77a(0x947)][_0x3cc77a(0x9da)]&&(_0x1f273a['x']+=this['x'],_0x1f273a['y']+=this['y']);},Sprite_Battler['prototype'][_0x3ffb9d(0xae1)]=function(){const _0x147ffe=_0x3ffb9d;if(!this[_0x147ffe(0x8fa)])return![];if(this[_0x147ffe(0x8fa)][_0x147ffe(0x2bb)]())return!![];if(this['_battler'][_0x147ffe(0x86a)]())return![];if(this[_0x147ffe(0x430)]<=0x0)return![];const _0x5508be=this[_0x147ffe(0x8fa)][_0x147ffe(0x402)]()[_0x147ffe(0x365)];if(_0x5508be['match'](/<SHOW HP GAUGE>/i))return!![];if(_0x5508be[_0x147ffe(0x1b7)](/<HIDE HP GAUGE>/i))return![];const _0x9dd251=VisuMZ[_0x147ffe(0x80e)][_0x147ffe(0x901)][_0x147ffe(0x6d3)];if(_0x9dd251[_0x147ffe(0xb6a)]){if('QJBkH'!==_0x147ffe(0x5da)){if(_0x9dd251[_0x147ffe(0x3b1)]&&BattleManager[_0x147ffe(0x97b)]())return!![];if(this[_0x147ffe(0x8fa)][_0x147ffe(0x411)])return![];return this[_0x147ffe(0x8fa)][_0x147ffe(0xb6f)]();}else this[_0x147ffe(0x4ce)]=_0x147ffe(0x232);}return!![];},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Battler_isMoving']=Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x66f)],Sprite_Battler[_0x3ffb9d(0xb66)]['isMoving']=function(){const _0x4e82be=_0x3ffb9d;if(!this[_0x4e82be(0x8fa)])return![];if(this[_0x4e82be(0x4fc)]>0x0)return!![];return VisuMZ[_0x4e82be(0x80e)]['Sprite_Battler_isMoving'][_0x4e82be(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xb95)]=Sprite_Battler[_0x3ffb9d(0xb66)]['startMove'],Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x638)]=function(_0x353205,_0x5315a9,_0x21fa4b){const _0x566bf2=_0x3ffb9d;this['canMove']()&&VisuMZ[_0x566bf2(0x80e)][_0x566bf2(0xb95)][_0x566bf2(0x73d)](this,_0x353205,_0x5315a9,_0x21fa4b);},Sprite_Battler[_0x3ffb9d(0xb66)]['canMove']=function(){const _0x5c351a=_0x3ffb9d;if(this['_battler']&&this['_battler']['isDead']())return![];if(this[_0x5c351a(0x8fa)]&&!this[_0x5c351a(0x8fa)]['canBattlerMove']())return![];return $gameSystem[_0x5c351a(0x6de)]();},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1b8)]=function(){},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0xaa6)]=function(){const _0x36f568=_0x3ffb9d;this[_0x36f568(0x638)](0x0,0x0,0xc);},Sprite_Battler[_0x3ffb9d(0xb66)]['retreat']=function(){},Sprite_Battler[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7af)]=function(){const _0x102f98=_0x3ffb9d,_0x4e7c22=VisuMZ[_0x102f98(0x80e)][_0x102f98(0x901)][_0x102f98(0x772)],_0x10dd8e=this[_0x102f98(0x8fa)]&&this[_0x102f98(0x8fa)][_0x102f98(0x2bb)]()?0x1:-0x1,_0x4f29e7=this[_0x102f98(0x904)]-this[_0x102f98(0xb48)]+_0x10dd8e*_0x4e7c22[_0x102f98(0xb2a)],_0xe6e742=this['_baseY']-this['_homeY']+_0x10dd8e*_0x4e7c22['FlinchDistanceY'],_0x1cea92=_0x4e7c22['FlinchDuration'];this[_0x102f98(0x638)](_0x4f29e7,_0xe6e742,_0x1cea92);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x654)]=Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa0c)],Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa0c)]=function(){const _0x237a74=_0x3ffb9d;VisuMZ[_0x237a74(0x80e)]['Sprite_Actor_initMembers']['call'](this),this[_0x237a74(0x5a4)]();},Sprite_Actor['prototype']['mainSprite']=function(){const _0x5bbed4=_0x3ffb9d;return this[_0x5bbed4(0x391)]||this[_0x5bbed4(0x3ff)]||this;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x9de)]=Sprite_Actor['prototype'][_0x3ffb9d(0xbf2)],Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbf2)]=function(){},Sprite_Actor['prototype'][_0x3ffb9d(0x6be)]=function(_0x1c0463){const _0x4683f2=_0x3ffb9d;if(SceneManager[_0x4683f2(0x6bd)]())return;if(!_0x1c0463)return;if(!_0x1c0463[_0x4683f2(0x2db)]())return;VisuMZ[_0x4683f2(0x80e)][_0x4683f2(0x9de)][_0x4683f2(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x574)]=Sprite_Actor['prototype'][_0x3ffb9d(0x9b6)],Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9b6)]=function(_0x3a070f){const _0x288897=_0x3ffb9d;if(VisuMZ['BattleCore'][_0x288897(0x901)][_0x288897(0x772)]['HomePosJS']){if(_0x288897(0x364)!=='xwTQQ')VisuMZ[_0x288897(0x80e)][_0x288897(0x901)][_0x288897(0x772)][_0x288897(0xbe3)][_0x288897(0x73d)](this,_0x3a070f);else{this[_0x288897(0x7dd)](_0x288897(0x53d),_0xc5bcbc);_0x50bc50[_0x288897(0x80e)][_0x288897(0x901)][_0x288897(0x1aa)][_0x288897(0x36c)]&&this[_0x288897(0x7dd)](_0x288897(0xb5c),_0x18f3e3,[_0x55b1fa['_subject']],-0x1);if(!_0x11e61c[_0x288897(0x80e)]['Settings'][_0x288897(0x6c4)]['ShowCounter'])return;this[_0x288897(0x7dd)](_0x288897(0x7dc),_0x4fa99e[_0x288897(0x282)][_0x288897(0x4a7)](_0x4d1c69[_0x288897(0x453)]()));}}else VisuMZ[_0x288897(0x80e)][_0x288897(0x574)][_0x288897(0x73d)](this,_0x3a070f);},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Actor_setBattler']=Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x427)],Sprite_Actor['prototype'][_0x3ffb9d(0x427)]=function(_0x2f9b3c){const _0x35d3dd=_0x3ffb9d;VisuMZ[_0x35d3dd(0x80e)][_0x35d3dd(0x7f4)]['call'](this,_0x2f9b3c),this['setBattlerBattleCore'](_0x2f9b3c);},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2d1)]=function(_0x2a4bd7){const _0x4db7bb=_0x3ffb9d;if(!_0x2a4bd7)return;if(!this[_0x4db7bb(0x3ff)])return;this[_0x4db7bb(0x3ff)][_0x4db7bb(0xab2)]['x']=this[_0x4db7bb(0x4c8)]['svBattlerAnchorX'](),this[_0x4db7bb(0x3ff)][_0x4db7bb(0xab2)]['y']=this[_0x4db7bb(0x4c8)]['svBattlerAnchorY'](),this[_0x4db7bb(0x5f3)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x25a)]=Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)],Sprite_Actor['prototype'][_0x3ffb9d(0x1e3)]=function(){const _0x42773f=_0x3ffb9d;VisuMZ[_0x42773f(0x80e)][_0x42773f(0x25a)][_0x42773f(0x73d)](this),this[_0x42773f(0x4c8)]&&(this['updateStateSprite'](),this['updateStyleOpacity']());},VisuMZ['BattleCore'][_0x3ffb9d(0x5b2)]=Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9fb)],Sprite_Actor[_0x3ffb9d(0xb66)]['updateBitmap']=function(){const _0x1f7570=_0x3ffb9d;VisuMZ[_0x1f7570(0x80e)][_0x1f7570(0x5b2)][_0x1f7570(0x73d)](this),this[_0x1f7570(0x3ff)]&&this[_0x1f7570(0x3ff)][_0x1f7570(0x6a0)]&&this['_battler']&&(this['_mainSprite']['bitmap'][_0x1f7570(0x6f0)]!==this[_0x1f7570(0x8fa)][_0x1f7570(0x23c)]()&&(this[_0x1f7570(0x3ff)][_0x1f7570(0x6a0)][_0x1f7570(0x6f0)]=this[_0x1f7570(0x8fa)][_0x1f7570(0x23c)]()));},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Actor_updateShadow']=Sprite_Actor[_0x3ffb9d(0xb66)]['updateShadow'],Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x979)]=function(){const _0x2a4e43=_0x3ffb9d;VisuMZ[_0x2a4e43(0x80e)][_0x2a4e43(0x96a)]['call'](this),this['updateShadowBattleCore']();},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x66a)]=function(){const _0x45e385=_0x3ffb9d;if(!this[_0x45e385(0x3ff)])return;if(!this[_0x45e385(0x601)])return;this['updateShadowVisibility'](),this[_0x45e385(0x786)]();},Sprite_Actor[_0x3ffb9d(0xb66)]['updateStateSprite']=function(){const _0x412a78=_0x3ffb9d;this[_0x412a78(0x4aa)][_0x412a78(0x530)]['x']=0x1/(this[_0x412a78(0x530)]['x']||0.001),this[_0x412a78(0x4aa)]['scale']['y']=0x1/(this[_0x412a78(0x530)]['y']||0.001);},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x82d)]=function(){const _0x52083d=_0x3ffb9d;if(!$gameSystem[_0x52083d(0x6de)]()&&this[_0x52083d(0x4a3)]===Sprite_Actor){if(_0x52083d(0x8d4)===_0x52083d(0x370)){if(this[_0x52083d(0xc11)]()){if(this[_0x52083d(0x91b)]()>=0x1)return!![];return this['svBattlerData']()[_0x52083d(0xafd)];}else return!![];}else{const _0x309138=Scene_Battle['prototype']['battleLayoutStyle']();[_0x52083d(0x232),_0x52083d(0x728),_0x52083d(0x68e),_0x52083d(0x94f)]['includes'](_0x309138)&&(this['opacity']=0x0);}}},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa68)]=function(){const _0x4378a0=_0x3ffb9d,_0x4d69b1=this[_0x4378a0(0x4c8)];if(_0x4d69b1){if('mPOCL'!=='mPOCL')return!![];else{const _0x49b8ee=_0x4d69b1[_0x4378a0(0x9d4)]();if(_0x4d69b1['isInputting']()||_0x4d69b1[_0x4378a0(0x31e)]())this['startMotion'](_0x4378a0(0x236));else{if(_0x49b8ee===0x3)this['startMotion'](_0x4378a0(0x268));else{if(_0x49b8ee===0x2)this[_0x4378a0(0xa84)]('sleep');else{if(this['forceEscapeSprite']){if(_0x4378a0(0x46f)===_0x4378a0(0x46f))this[_0x4378a0(0xa84)]('escape');else{if(_0x374a09['_battler'][_0x4378a0(0x2bb)]()&&_0x32b3b2[_0x4378a0(0x8fa)][_0x4378a0(0x2a7)]())return 0x1;else{if(_0x184b24[_0x4378a0(0x8fa)][_0x4378a0(0x2bb)]()&&_0xfadd4d[_0x4378a0(0x8fa)][_0x4378a0(0x2a7)]())return-0x1;}}}else{if(_0x4d69b1[_0x4378a0(0xaef)]())this[_0x4378a0(0xa84)]('wait');else{if(_0x4d69b1['isChanting']()){if(_0x4378a0(0x721)==='PlGCa')this[_0x4378a0(0xa84)](_0x4378a0(0xbad));else{if(!_0x17e93b[_0x4378a0(0x341)]())return;const _0x251061=_0x3e15a5[_0x4378a0(0x292)]();if(!_0x251061)return;_0x251061[_0x4378a0(0x27b)](_0x4378a0(0x5d7));}}else{if(_0x4d69b1[_0x4378a0(0xb19)]()||_0x4d69b1[_0x4378a0(0x691)]()){if(_0x4378a0(0x27f)!==_0x4378a0(0x51c))this['startMotion'](_0x4378a0(0x61b));else{if(!_0xd89be5['isSceneBattle']())return;if(!_0xf4d75a[_0x4378a0(0x8ba)])return;_0x4c5918[_0x4378a0(0xb83)](_0x3b86de,_0x57c147);const _0x20e95d=_0x1d0339['getLastPluginCommandInterpreter'](),_0x2f282c=_0x2ca07c['WaitForZoom'];if(!_0x20e95d)return;_0x4a516d[_0x4378a0(0xa7c)](0x1,_0x24775f[_0x4378a0(0x20d)],_0x125c3d[_0x4378a0(0xa3f)]);if(_0x2f282c)_0x20e95d[_0x4378a0(0x27b)](_0x4378a0(0x872));}}else{if(_0x49b8ee===0x1)_0x4378a0(0x60f)==='Jiunj'?(_0x8ce1be[_0x4378a0(0x80e)][_0x4378a0(0x2dd)][_0x4378a0(0x73d)](this),this[_0x4378a0(0x8fd)]&&(this[_0x4378a0(0x8fd)]=_0x32c205,_0x58032c[_0x4378a0(0x947)]['battleCoreResumeLaunchBattle']())):this[_0x4378a0(0xa84)](_0x4378a0(0xbb7));else{if(_0x4d69b1[_0x4378a0(0xa55)]())this[_0x4378a0(0xa84)](_0x4378a0(0x7c9));else{if(_0x4d69b1[_0x4378a0(0x60c)]())this['startMotion'](_0x4378a0(0x236));else _0x4d69b1[_0x4378a0(0x33f)]()?_0x4378a0(0xb5f)!==_0x4378a0(0xb5f)?(_0x5011f2=_0x32aa09(_0x467dbc['$1']),_0x1c002a=_0x2b1b87(_0x383723['$2'])):this[_0x4378a0(0xa84)](_0x4378a0(0xb2d)):this[_0x4378a0(0xa84)](_0x4378a0(0x236));}}}}}}}}}}}},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xaab)]=function(){const _0x3640fc=_0x3ffb9d,_0x50b0ae=0xa,_0x1ec7f7=0x12c*_0x50b0ae,_0x1d78be=0x1e*_0x50b0ae;this[_0x3640fc(0x638)](_0x1ec7f7,0x0,_0x1d78be);},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb6b)]=function(){const _0x3f0d30=_0x3ffb9d;Sprite_Battler[_0x3f0d30(0xb66)][_0x3f0d30(0xb6b)][_0x3f0d30(0x73d)](this);},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7ce)]=function(){const _0x5ada02=_0x3ffb9d;return Sprite_Battler[_0x5ada02(0x1f6)];},Sprite_Weapon['prototype'][_0x3ffb9d(0xaea)]=function(){const _0x4e2c54=_0x3ffb9d;return Sprite_Battler[_0x4e2c54(0x1f6)];},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x45c)]=function(){},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4d0)]=function(){},Sprite_Actor[_0x3ffb9d(0xb66)]['updateMotionCount']=function(){const _0x430204=_0x3ffb9d;if(this[_0x430204(0x83a)]&&++this[_0x430204(0x7aa)]>=this['motionSpeed']()){if(_0x430204(0x70e)===_0x430204(0x752))this[_0x430204(0x722)](_0x430204(0x8cd));else{if(this[_0x430204(0x83a)]['loop'])this[_0x430204(0xb5a)]=(this['_pattern']+0x1)%0x4;else this[_0x430204(0xb5a)]<0x2?_0x430204(0xb9a)!==_0x430204(0x328)?this['_pattern']++:(_0x17eeb1[_0x430204(0x80e)][_0x430204(0x731)]&&_0x188282[_0x430204(0x80e)][_0x430204(0x731)][_0x430204(0x73d)](this,_0x567d3b),_0x24f3c5['BattleCore'][_0x430204(0x846)](_0x49c60f)):this[_0x430204(0xa68)]();this[_0x430204(0x7aa)]=0x0;}}},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x26c)]=function(_0x11416d){const _0x14df4d=_0x3ffb9d;if(_0x11416d===_0x14df4d(0xbdd))this[_0x14df4d(0x57f)]=!![];if(this[_0x14df4d(0x8fa)]&&this[_0x14df4d(0x8fa)][_0x14df4d(0xb78)]()){if('Fudai'!==_0x14df4d(0x769)){this[_0x14df4d(0x83a)]=Sprite_Actor[_0x14df4d(0x76d)][_0x14df4d(0x268)];return;}else return!![];}const _0x584093=Sprite_Actor[_0x14df4d(0x76d)][_0x11416d];this['_motion']=_0x584093,this[_0x14df4d(0x7aa)]=0x0,this[_0x14df4d(0xb5a)]=0x0;},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6c5)]=function(_0x252b23){const _0x124a88=_0x3ffb9d;if(this[_0x124a88(0x26f)]())return;this[_0x124a88(0x9a3)](),this[_0x124a88(0x5d2)]['setup'](_0x252b23),this[_0x124a88(0x4c8)]['clearWeaponAnimation']();},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9a3)]=function(){const _0xc804ab=_0x3ffb9d;let _0x1ea66a=-0x10,_0x7c014a=this['height']*0.5;const _0x22440a=/<SIDEVIEW WEAPON OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i,_0x98691c=this['_battler']['traitObjects']()[_0xc804ab(0x2e9)](_0x4d43ba=>_0x4d43ba&&_0x4d43ba[_0xc804ab(0x365)]['match'](_0x22440a)?Number(RegExp['$1']):0x0),_0x20036d=this[_0xc804ab(0x8fa)][_0xc804ab(0x388)]()[_0xc804ab(0x2e9)](_0x224255=>_0x224255&&_0x224255[_0xc804ab(0x365)][_0xc804ab(0x1b7)](_0x22440a)?Number(RegExp['$2']):0x0);_0x1ea66a=_0x98691c[_0xc804ab(0x47f)]((_0x37981a,_0x58d52a)=>_0x37981a+_0x58d52a,_0x1ea66a),_0x7c014a=_0x20036d['reduce']((_0x492e83,_0x52c156)=>_0x492e83+_0x52c156,_0x7c014a),this[_0xc804ab(0x5d2)]['x']=_0x1ea66a,this['_weaponSprite']['y']=_0x7c014a,this[_0xc804ab(0x5d2)][_0xc804ab(0x1e3)]();},Sprite_Weapon[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2eb)]=function(_0x203930){const _0x4a3e36=_0x3ffb9d;this['_weaponImageId']=_0x203930,this[_0x4a3e36(0x461)]=-0x1,this[_0x4a3e36(0xb5a)]=0x0,this[_0x4a3e36(0x8e5)](),this[_0x4a3e36(0x263)]();},Sprite_Actor[_0x3ffb9d(0xb66)]['updateTargetPosition']=function(){},Sprite_Actor['prototype'][_0x3ffb9d(0x1b8)]=function(){const _0x5c4264=_0x3ffb9d,_0x15e367=VisuMZ[_0x5c4264(0x80e)][_0x5c4264(0x901)][_0x5c4264(0x1aa)],_0x8d8667=_0x15e367[_0x5c4264(0xb81)],_0x8566a3=_0x15e367[_0x5c4264(0xa17)],_0x5c314a=_0x15e367[_0x5c4264(0x462)];this[_0x5c4264(0x638)](-_0x8d8667,-_0x8566a3,_0x5c314a);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x22b)]=Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x263)],Sprite_Actor[_0x3ffb9d(0xb66)]['updateFrame']=function(){const _0x2f8a6d=_0x3ffb9d;this[_0x2f8a6d(0x26f)]()?_0x2f8a6d(0x676)!==_0x2f8a6d(0x676)?(_0x577d77[_0x2f8a6d(0x80e)][_0x2f8a6d(0x98c)]&&_0x3056ec[_0x2f8a6d(0x80e)][_0x2f8a6d(0x98c)][_0x2f8a6d(0x73d)](this,_0x1fd53b),_0x4c3e3b[_0x2f8a6d(0x80e)][_0x2f8a6d(0x846)](_0x37d8b2)):this[_0x2f8a6d(0x28f)]():(this[_0x2f8a6d(0xa25)](),VisuMZ[_0x2f8a6d(0x80e)][_0x2f8a6d(0x22b)]['call'](this));},Sprite_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa25)]=function(){const _0x36cc27=_0x3ffb9d;if(this['_battler']&&this[_0x36cc27(0x8fa)][_0x36cc27(0xaed)]){const _0x5259ed=this[_0x36cc27(0x8fa)][_0x36cc27(0xaed)];this['_motion']=Sprite_Actor[_0x36cc27(0x76d)][_0x5259ed['motionType']],this['_pattern']=_0x5259ed[_0x36cc27(0x24a)];const _0x39a493=this['_weaponSprite'];_0x39a493[_0x36cc27(0x3e8)](_0x5259ed[_0x36cc27(0x29b)],_0x5259ed[_0x36cc27(0x24a)]),this['adjustWeaponSpriteOffset']();}},Sprite_Weapon[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3e8)]=function(_0x1c2e78,_0x56384c){const _0x21e1e8=_0x3ffb9d;this[_0x21e1e8(0xbce)]=_0x1c2e78,this[_0x21e1e8(0x461)]=-Infinity,this[_0x21e1e8(0xb5a)]=_0x56384c,this['loadBitmap'](),this['updateFrame']();},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa0c)]=function(){const _0x18fd5a=_0x3ffb9d;Sprite_Battler[_0x18fd5a(0xb66)][_0x18fd5a(0xa0c)][_0x18fd5a(0x73d)](this),this[_0x18fd5a(0x541)]=null,this['_appeared']=![],this['_battlerName']='',this[_0x18fd5a(0xbed)]=0x0,this[_0x18fd5a(0x38f)]=null,this[_0x18fd5a(0xb13)]=0x0,this[_0x18fd5a(0x437)]=0x0,this[_0x18fd5a(0x23a)](),this[_0x18fd5a(0x3cc)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x619)]=Sprite_Enemy[_0x3ffb9d(0xb66)]['update'],Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)]=function(){const _0x36d19b=_0x3ffb9d;VisuMZ[_0x36d19b(0x80e)][_0x36d19b(0x619)][_0x36d19b(0x73d)](this),this['updateShadowVisibility']();},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x23a)]=function(){const _0x111b4d=_0x3ffb9d;this[_0x111b4d(0x3ff)]=new Sprite(),this[_0x111b4d(0x3ff)][_0x111b4d(0xab2)]['x']=0.5,this[_0x111b4d(0x3ff)]['anchor']['y']=0x1,this[_0x111b4d(0x237)](this[_0x111b4d(0x3ff)]),this['attachSpritesToDistortionSprite']();},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8f5)]=function(){const _0x311177=_0x3ffb9d;return this[_0x311177(0x391)]||this['_mainSprite']||this;},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8e5)]=function(_0x5bcb5b){const _0x54d413=_0x3ffb9d;this[_0x54d413(0x6a0)]=new Bitmap(0x1,0x1);if(this[_0x54d413(0xc11)]()){if(_0x54d413(0xa8a)===_0x54d413(0xa8a)){const _0x143554=this[_0x54d413(0x541)][_0x54d413(0x376)]();this[_0x54d413(0x6a0)]=new Bitmap(_0x143554[_0x54d413(0x7d6)],_0x143554[_0x54d413(0x8a0)]),this[_0x54d413(0x3ff)]['bitmap']=new Bitmap(0x1,0x1);}else{if(!_0x5eccbb[_0x54d413(0x341)]())return;_0x59b01a[_0x54d413(0xb83)](_0x181771,_0x11c786);const _0x381e41=_0x2a111d[_0x54d413(0x292)](),_0x104225=_0x2a60c0[_0x54d413(0xa98)],_0xefbe62=_0x1da45a[_0x54d413(0x4c4)];if(!_0x381e41)return;if(!_0x104225)return;_0x104225&&_0x104225[_0x54d413(0xb78)]()&&_0xefbe62[_0x54d413(0x614)]()[_0x54d413(0x33a)]()!==_0x54d413(0x5cc)&&_0x381e41[_0x54d413(0x8ce)]([_0xefbe62]);}}else $gameSystem[_0x54d413(0x6de)]()?_0x54d413(0x4d4)!==_0x54d413(0x60b)?(this['_mainSprite'][_0x54d413(0x6a0)]=ImageManager[_0x54d413(0x6bb)](_0x5bcb5b),this[_0x54d413(0x3ff)]['bitmap'][_0x54d413(0x198)](this['createEmptyBitmap'][_0x54d413(0x92c)](this))):(_0x390fc7[_0x54d413(0x37d)](),_0x50bdde[_0x54d413(0x78a)](_0x26c752[_0x54d413(0x597)]())):(this[_0x54d413(0x3ff)]['bitmap']=ImageManager['loadEnemy'](_0x5bcb5b),this[_0x54d413(0x3ff)][_0x54d413(0x6a0)][_0x54d413(0x198)](this[_0x54d413(0x5ae)][_0x54d413(0x92c)](this)));},Sprite_Enemy['prototype'][_0x3ffb9d(0x5ae)]=function(){const _0x52d62a=_0x3ffb9d,_0x55049d=this['_mainSprite']['bitmap'];if(_0x55049d){if(_0x52d62a(0x5c4)==='tzimx'){if(!_0x412c80[_0x52d62a(0x341)]())return;_0x4df616['ConvertParams'](_0x294ec1,_0x46e318);const _0x10c213=_0x555c80['getLastPluginCommandInterpreter'](),_0x1b970a=_0x425b85[_0x52d62a(0xb36)]*_0x9e6387[_0x52d62a(0x1f6)];_0x10c213['wait'](_0x1b970a);}else this['bitmap']=new Bitmap(_0x55049d['width'],_0x55049d['height']);}},VisuMZ['BattleCore'][_0x3ffb9d(0x5aa)]=Sprite_Enemy[_0x3ffb9d(0xb66)]['setHue'],Sprite_Enemy[_0x3ffb9d(0xb66)]['setHue']=function(_0x10770d){const _0x5a1d7c=_0x3ffb9d;this[_0x5a1d7c(0x3ff)]&&this[_0x5a1d7c(0x3ff)][_0x5a1d7c(0x289)](_0x10770d);},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Enemy_initVisibility']=Sprite_Enemy['prototype']['initVisibility'],Sprite_Enemy['prototype']['initVisibility']=function(){const _0x48282f=_0x3ffb9d;if(this[_0x48282f(0xb70)]())_0x48282f(0x71a)===_0x48282f(0x71a)?VisuMZ[_0x48282f(0x80e)][_0x48282f(0x8ac)][_0x48282f(0x73d)](this):(this[_0x48282f(0x7c8)]=_0xe71f6c||0x0,this[_0x48282f(0x6d7)]={});else{this['_appeared']=!this[_0x48282f(0x541)][_0x48282f(0x86a)]();if(!this['_appeared']){if('GZvwJ'==='GZvwJ')this[_0x48282f(0x430)]=0x0;else{let _0x43dc0c='';if(_0x204266[_0x48282f(0x802)](_0x156ac0))_0x43dc0c=_0x48282f(0x626)[_0x48282f(0x4a7)](_0x315c77['id'],_0x567a2d);if(_0x2b4f95['includes'](_0x3e6e0f))_0x43dc0c=_0x48282f(0x644)[_0x48282f(0x4a7)](_0x3a72d0['id'],_0x205973);if(_0x168de1[_0x48282f(0x802)](_0x1eeafc))_0x43dc0c=_0x48282f(0x711)[_0x48282f(0x4a7)](_0x585db6['id'],_0x58d87f);if(_0x54f6e7[_0x48282f(0x802)](_0x5c4627))_0x43dc0c='Item-%1-%2'[_0x48282f(0x4a7)](_0x5e246d['id'],_0x252bf1);if(_0x514a5f[_0x48282f(0x802)](_0x35a3c9))_0x43dc0c='Weapon-%1-%2'['format'](_0x5cd793['id'],_0x22c2cb);if(_0x2112d4[_0x48282f(0x802)](_0x5d399d))_0x43dc0c=_0x48282f(0xbfa)['format'](_0x52dac0['id'],_0x9610c6);if(_0x557d83[_0x48282f(0x802)](_0x57c151))_0x43dc0c=_0x48282f(0x6fc)['format'](_0x332ba0['id'],_0x363a5d);if(_0x26b052[_0x48282f(0x802)](_0x50276e))_0x43dc0c=_0x48282f(0x552)[_0x48282f(0x4a7)](_0xdf42c8['id'],_0x484236);return _0x43dc0c;}}}},VisuMZ['BattleCore'][_0x3ffb9d(0xa60)]=Sprite_Enemy[_0x3ffb9d(0xb66)]['updateCollapse'],Sprite_Enemy[_0x3ffb9d(0xb66)]['updateCollapse']=function(){const _0x11807a=_0x3ffb9d;if(this[_0x11807a(0xb70)]())VisuMZ[_0x11807a(0x80e)][_0x11807a(0xa60)][_0x11807a(0x73d)](this);},Sprite_Enemy['prototype'][_0x3ffb9d(0x263)]=function(){const _0x1749a4=_0x3ffb9d;Sprite_Battler['prototype'][_0x1749a4(0x263)][_0x1749a4(0x73d)](this);const _0x40b54e=this[_0x1749a4(0x8f5)]()||this;if(!_0x40b54e)return;if(!_0x40b54e['bitmap']){if(_0x1749a4(0x7bb)===_0x1749a4(0x7bb))_0x40b54e['bitmap']=new Bitmap(this['width'],this['height']);else return![];}this[_0x1749a4(0x38f)]===_0x1749a4(0x5f2)?this['_mainSprite'][_0x1749a4(0x452)](0x0,0x0,this[_0x1749a4(0x3ff)]['width'],this[_0x1749a4(0xb13)]):_0x40b54e[_0x1749a4(0x452)](0x0,0x0,_0x40b54e['bitmap'][_0x1749a4(0x7d6)],this[_0x1749a4(0x6a0)][_0x1749a4(0x8a0)]);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x613)]=Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x21b)],Sprite_Enemy[_0x3ffb9d(0xb66)]['updateBossCollapse']=function(){const _0x277b76=_0x3ffb9d;if(this[_0x277b76(0xb70)]())VisuMZ[_0x277b76(0x80e)][_0x277b76(0x613)]['call'](this);},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x66f)]=function(){const _0x5d3a29=_0x3ffb9d;return Sprite_Battler[_0x5d3a29(0xb66)][_0x5d3a29(0x66f)][_0x5d3a29(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xb77)]=Sprite_Enemy[_0x3ffb9d(0xb66)]['updateStateSprite'],Sprite_Enemy['prototype']['updateStateSprite']=function(){const _0x364d85=_0x3ffb9d;VisuMZ['BattleCore'][_0x364d85(0xb77)][_0x364d85(0x73d)](this),this[_0x364d85(0x4d2)]();},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4d2)]=function(){const _0x75996d=_0x3ffb9d,_0x598338=VisuMZ[_0x75996d(0x80e)][_0x75996d(0x901)]['Enemy'];if(_0x598338[_0x75996d(0x8b2)]&&!_0x598338[_0x75996d(0x90a)]){this[_0x75996d(0x69f)][_0x75996d(0x430)]=0x0;return;}this[_0x75996d(0x69f)]['x']=0x0,this[_0x75996d(0x69f)]['x']+=this[_0x75996d(0x8fa)][_0x75996d(0x881)](),this[_0x75996d(0x69f)]['y']=-this[_0x75996d(0x6a0)][_0x75996d(0x8a0)]-this['_stateIconSprite']['height']-0x4,this[_0x75996d(0x69f)]['y']+=this[_0x75996d(0x8fa)][_0x75996d(0x2b5)](),this[_0x75996d(0x69f)][_0x75996d(0x530)]['x']=0x1/(this[_0x75996d(0x530)]['x']||0.001),this[_0x75996d(0x69f)][_0x75996d(0x530)]['y']=0x1/(this['scale']['y']||0.001);if(this['hasSvBattler']()){if(_0x75996d(0x659)==='GLUug')this['_svBattlerSprite'][_0x75996d(0x4aa)][_0x75996d(0x530)]['x']=-0x1/(this['scale']['x']||0.001),this['_svBattlerSprite'][_0x75996d(0x4aa)]['scale']['y']=0x1/(this[_0x75996d(0x530)]['y']||0.001);else return this['isBattleCoreTargetScope']()&&!this[_0x75996d(0x672)]()?this[_0x75996d(0xb1a)]():_0x54919e[_0x75996d(0x80e)][_0x75996d(0x807)][_0x75996d(0x73d)](this);}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x464)]=Sprite_Enemy['prototype'][_0x3ffb9d(0x427)],Sprite_Enemy['prototype'][_0x3ffb9d(0x427)]=function(_0x5ac349){const _0x167fe1=_0x3ffb9d;VisuMZ[_0x167fe1(0x80e)][_0x167fe1(0x464)]['call'](this,_0x5ac349),this[_0x167fe1(0xbb1)](_0x5ac349);},Sprite_Enemy['prototype'][_0x3ffb9d(0xbb1)]=function(_0x92f7d9){const _0x37a86a=_0x3ffb9d;!this[_0x37a86a(0x4c1)]&&(this['_svBattlerSprite']=new Sprite_SvEnemy(_0x92f7d9),this['attachSpritesToDistortionSprite']()),this[_0x37a86a(0x4c1)]['setBattler'](_0x92f7d9);},Sprite_Enemy['prototype'][_0x3ffb9d(0xc11)]=function(){const _0x163cc3=_0x3ffb9d;return this[_0x163cc3(0x541)]&&this[_0x163cc3(0x541)][_0x163cc3(0xc11)]();},Sprite_Enemy[_0x3ffb9d(0xb66)]['allowCollapse']=function(){const _0x4cbb2d=_0x3ffb9d;if(this[_0x4cbb2d(0xc11)]()){if('kaqtE'===_0x4cbb2d(0x581))_0x2d6b51[_0x4cbb2d(0x80e)][_0x4cbb2d(0x7cf)][_0x4cbb2d(0x73d)](this);else return this['_enemy'][_0x4cbb2d(0xb70)]();}else{if(_0x4cbb2d(0xb4a)==='WPTgf')return!![];else this[_0x4cbb2d(0xa14)]['x']=this['x'],this[_0x4cbb2d(0xa14)]['y']=this['y'];}},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa68)]=function(){const _0x28ecc2=_0x3ffb9d;this[_0x28ecc2(0xc11)]()&&this['_svBattlerSprite']['refreshMotion']();},Sprite_Enemy[_0x3ffb9d(0xb66)]['forceMotion']=function(_0x4d11f1){const _0x307331=_0x3ffb9d;if(this[_0x307331(0xc11)]())this[_0x307331(0x4c1)][_0x307331(0x26c)](_0x4d11f1);},Sprite_Enemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6c5)]=function(_0xd51431){const _0x5ad0ca=_0x3ffb9d;if(this['hasSvBattler']())this[_0x5ad0ca(0x4c1)]['forceWeaponAnimation'](_0xd51431);},Sprite_Enemy['prototype']['stepForward']=function(){const _0x38a18e=_0x3ffb9d,_0x915a51=VisuMZ[_0x38a18e(0x80e)][_0x38a18e(0x901)][_0x38a18e(0x1aa)],_0x2cd277=_0x915a51[_0x38a18e(0xb81)],_0x57e5ef=_0x915a51['StepDistanceY'],_0x3f65dd=_0x915a51[_0x38a18e(0x462)];this[_0x38a18e(0x638)](_0x2cd277,_0x57e5ef,_0x3f65dd);};function Sprite_SvEnemy(){const _0x19330f=_0x3ffb9d;this[_0x19330f(0xacd)](...arguments);}Sprite_SvEnemy[_0x3ffb9d(0xb66)]=Object[_0x3ffb9d(0x3c7)](Sprite_Actor['prototype']),Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4a3)]=Sprite_SvEnemy,Sprite_SvEnemy['prototype']['initialize']=function(_0x2b8380){const _0xdff85=_0x3ffb9d;Sprite_Actor[_0xdff85(0xb66)]['initialize'][_0xdff85(0x73d)](this,_0x2b8380),this[_0xdff85(0x530)]['x']=-0x1,this['_stateSprite']['scale']['x']=-0x1;},Sprite_SvEnemy[_0x3ffb9d(0xb66)]['createShadowSprite']=function(){},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbf2)]=function(){},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9b6)]=function(_0x1be740){},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x979)]=function(){},Sprite_SvEnemy['prototype'][_0x3ffb9d(0x786)]=function(){},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x611)]=function(){const _0x1d050f=_0x3ffb9d;this[_0x1d050f(0x4aa)][_0x1d050f(0x54f)]=![];},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9fb)]=function(){const _0x4234b3=_0x3ffb9d;Sprite_Battler['prototype'][_0x4234b3(0x9fb)][_0x4234b3(0x73d)](this);const _0x41cf55=this['_actor'][_0x4234b3(0x3aa)]();this[_0x4234b3(0x9a2)]!==_0x41cf55&&(this[_0x4234b3(0x9a2)]=_0x41cf55,this[_0x4234b3(0x3ff)]['bitmap']=ImageManager[_0x4234b3(0x29e)](_0x41cf55)),this[_0x4234b3(0x3ff)]&&this['_mainSprite'][_0x4234b3(0x6a0)]&&this[_0x4234b3(0x8fa)]&&(this['_mainSprite'][_0x4234b3(0x6a0)][_0x4234b3(0x6f0)]!==this['_battler'][_0x4234b3(0x23c)]()&&(_0x4234b3(0x6b8)===_0x4234b3(0x3b3)?this[_0x4234b3(0x6d7)][_0x4234b3(0x3b5)]=_0x13b449[_0x4234b3(0xb66)][_0x4234b3(0x506)][_0x4234b3(0x73d)](this):this[_0x4234b3(0x3ff)][_0x4234b3(0x6a0)]['smooth']=this[_0x4234b3(0x8fa)]['battlerSmoothImage']()));},Sprite_SvEnemy[_0x3ffb9d(0xb66)]['retreat']=function(){},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x638)]=function(_0x582dbd,_0x5dbff5,_0x451c09){const _0x5bde14=_0x3ffb9d;if(this[_0x5bde14(0x5be)])this[_0x5bde14(0x5be)][_0x5bde14(0x638)](_0x582dbd,_0x5dbff5,_0x451c09);},Sprite_SvEnemy[_0x3ffb9d(0xb66)]['refreshMotion']=function(){const _0x749e0b=_0x3ffb9d,_0x2849d6=this[_0x749e0b(0x4c8)];if(_0x2849d6){if(_0x749e0b(0x1f2)===_0x749e0b(0x1f2)){const _0x2a7c4d=_0x2849d6[_0x749e0b(0x9d4)]();if(_0x2849d6[_0x749e0b(0x90c)]()||_0x2849d6[_0x749e0b(0x31e)]())this[_0x749e0b(0xa84)](_0x749e0b(0x236));else{if(_0x2a7c4d===0x3)this[_0x749e0b(0xa84)](_0x749e0b(0x268));else{if(_0x2a7c4d===0x2)this[_0x749e0b(0xa84)](_0x749e0b(0x810));else{if(_0x2849d6[_0x749e0b(0x870)]()){if(_0x749e0b(0x742)===_0x749e0b(0x742))this[_0x749e0b(0xa84)]('chant');else{const _0x3af9cc=_0x158567[_0x749e0b(0xbf4)]()[_0x361d1c],_0x1d23fd=new _0x181cc8();_0x1d23fd[_0x749e0b(0x6be)](_0x3af9cc),_0x1d23fd['setBattler'](_0x3af9cc),_0x1d23fd['update'](),this[_0x749e0b(0x56a)]['push'](_0x1d23fd),this['_battlerContainer'][_0x749e0b(0x237)](_0x1d23fd);}}else{if(_0x2849d6[_0x749e0b(0xb19)]()||_0x2849d6[_0x749e0b(0x691)]())this[_0x749e0b(0xa84)](_0x749e0b(0x61b));else{if(_0x2a7c4d===0x1)_0x749e0b(0x58d)!==_0x749e0b(0x78b)?this[_0x749e0b(0xa84)]('abnormal'):this[_0x749e0b(0x391)]['addChild'](this[_0x749e0b(0x4c1)]);else{if(_0x2849d6[_0x749e0b(0xa55)]())this[_0x749e0b(0xa84)]('dying');else{if(_0x2849d6[_0x749e0b(0x60c)]()){if(_0x749e0b(0xba5)!==_0x749e0b(0xba5)){if(!_0x233b7c[_0x749e0b(0x6de)]())return;if(this['_flinched'])return;this[_0x749e0b(0xbaf)]=!![];const _0x1db412=this[_0x749e0b(0x491)]();if(_0x1db412)_0x1db412[_0x749e0b(0x7af)]();}else this['startMotion'](_0x749e0b(0x236));}else _0x749e0b(0x675)===_0x749e0b(0x4e7)?(_0x2b7b3d['_deathStateApplied']=!![],this[_0x749e0b(0x612)](_0x28708f)):this['startMotion'](_0x2849d6[_0x749e0b(0x376)]()[_0x749e0b(0xae5)]||_0x749e0b(0x236));}}}}}}}}else this['tpbActorSwitchConditionsMet']()?this[_0x749e0b(0x9b3)]():this['processActorCommandCancelTPB']();}},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x63b)]=function(){const _0x587907=_0x3ffb9d;return this['parent']?this[_0x587907(0x5be)][_0x587907(0x8e4)]===0x0&&this[_0x587907(0x5be)][_0x587907(0xaca)]===0x0:!![];},Sprite_SvEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc32)]=function(){},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x318)]=Sprite_Animation['prototype'][_0x3ffb9d(0x4c0)],Sprite_Animation['prototype'][_0x3ffb9d(0x4c0)]=function(_0x54ee23){const _0x4db522=_0x3ffb9d;if(_0x54ee23[_0x4db522(0x391)]){if(_0x4db522(0x962)!==_0x4db522(0x460))return this['targetDistortionSpritePosition'](_0x54ee23);else _0x5cfc4c['BattleCore'][_0x4db522(0x2f7)]['call'](this,_0x28ce02);}else return VisuMZ[_0x4db522(0x80e)][_0x4db522(0x318)][_0x4db522(0x73d)](this,_0x54ee23);},Sprite_Animation['prototype']['targetDistortionSpritePosition']=function(_0x5905ee){const _0x3c4130=_0x3ffb9d;let _0x13dbe1=_0x5905ee['x'],_0x5afb70=_0x5905ee['y'],_0x41fb47=_0x5905ee[_0x3c4130(0x8a0)],_0x5303e8=_0x5905ee['_distortionSprite'][_0x3c4130(0x530)]['y'];_0x5905ee['x']=_0x5905ee[_0x3c4130(0x904)]+_0x5905ee[_0x3c4130(0x618)](),_0x5905ee['y']=_0x5905ee[_0x3c4130(0x531)]+_0x5905ee['extraPositionY'](),_0x5905ee[_0x3c4130(0x8a0)]*=_0x5303e8;let _0x40168f=VisuMZ[_0x3c4130(0x80e)][_0x3c4130(0x318)][_0x3c4130(0x73d)](this,_0x5905ee);return _0x5905ee['x']=_0x13dbe1,_0x5905ee['y']=_0x5afb70,_0x5905ee[_0x3c4130(0x8a0)]=_0x41fb47,_0x40168f;},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_AnimationMV_updatePosition']=Sprite_AnimationMV[_0x3ffb9d(0xb66)][_0x3ffb9d(0x712)],Sprite_AnimationMV[_0x3ffb9d(0xb66)]['updatePosition']=function(){const _0x33f19c=_0x3ffb9d;VisuMZ[_0x33f19c(0x80e)][_0x33f19c(0x2c4)]['call'](this);if(this[_0x33f19c(0x9d5)]['position']===0x3){if(this['x']===0x0)this['x']=Math[_0x33f19c(0x68f)](Graphics[_0x33f19c(0x7d6)]/0x2);if(this['y']===0x0)this['y']=Math[_0x33f19c(0x68f)](Graphics['height']/0x2);}},Sprite_Damage['prototype'][_0x3ffb9d(0x26e)]=function(_0x8c0fa8){const _0x274302=_0x3ffb9d,_0x416fff=_0x8c0fa8[_0x274302(0x8d2)]()||_0x8c0fa8[_0x274302(0x436)]();if(_0x416fff[_0x274302(0x278)]||_0x416fff[_0x274302(0x252)]){if(_0x274302(0x241)===_0x274302(0x241))this[_0x274302(0x373)]=0x0,this[_0x274302(0x9fe)]();else return this[_0x274302(0x8fa)][_0x274302(0x4d8)]();}else{if(_0x416fff[_0x274302(0x3e4)])_0x274302(0x18b)!==_0x274302(0xb60)?(this[_0x274302(0x373)]=_0x416fff[_0x274302(0xa10)]>=0x0?0x0:0x1,this[_0x274302(0xc19)](_0x416fff[_0x274302(0xa10)])):_0x1a64a1[_0x274302(0x8a9)](_0x274302(0x472));else _0x8c0fa8[_0x274302(0x3ad)]()&&_0x416fff['mpDamage']!==0x0&&(this[_0x274302(0x373)]=_0x416fff[_0x274302(0x211)]>=0x0?0x2:0x3,this[_0x274302(0xc19)](_0x416fff[_0x274302(0x211)]));}_0x416fff[_0x274302(0x54d)]&&this['setupCriticalEffect']();},Sprite_Damage[_0x3ffb9d(0xb66)]['setup']=function(_0x24f71f){},Sprite_Damage[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc19)]=function(_0x1d019d){const _0x4c04b2=_0x3ffb9d;let _0x304d44=this['createString'](_0x1d019d);const _0x148560=this['fontSize'](),_0x306f99=Math['floor'](_0x148560*0.75);for(let _0x58dff7=0x0;_0x58dff7<_0x304d44[_0x4c04b2(0x205)];_0x58dff7++){if(_0x4c04b2(0x55e)!==_0x4c04b2(0x55e))return this[_0x4c04b2(0x499)](_0x1e3ef5);else{const _0x58bfbc=this[_0x4c04b2(0x363)](_0x306f99,_0x148560);_0x58bfbc['bitmap']['drawText'](_0x304d44[_0x58dff7],0x0,0x0,_0x306f99,_0x148560,_0x4c04b2(0x5a8)),_0x58bfbc['x']=(_0x58dff7-(_0x304d44[_0x4c04b2(0x205)]-0x1)/0x2)*_0x306f99,_0x58bfbc['dy']=-_0x58dff7;}}},Sprite_Damage['prototype']['createString']=function(_0x3671f1){const _0x3784b1=_0x3ffb9d;let _0x138db6=Math[_0x3784b1(0x8f4)](_0x3671f1)[_0x3784b1(0xa92)]();this[_0x3784b1(0x50d)]()&&(_0x3784b1(0x9ed)!=='OjvYo'?_0x138db6=VisuMZ[_0x3784b1(0xb55)](_0x138db6):(_0x3c4424('%1\x20is\x20incorrectly\x20placed\x20on\x20the\x20plugin\x20list.\x0aIt\x20is\x20a\x20Tier\x20%2\x20plugin\x20placed\x20over\x20other\x20Tier\x20%3\x20plugins.\x0aPlease\x20reorder\x20the\x20plugin\x20list\x20from\x20smallest\x20to\x20largest\x20tier\x20numbers.'[_0x3784b1(0x4a7)](_0x3d29fc,_0x1b22d0,_0x2d7f36)),_0x251b21[_0x3784b1(0x6b5)]()));const _0x5cd838=VisuMZ[_0x3784b1(0x80e)][_0x3784b1(0x901)][_0x3784b1(0xa45)];let _0x43f237='',_0x4ca9e4='';switch(this['_colorType']){case 0x0:_0x43f237=_0x5cd838['hpDamageFmt']||_0x3784b1(0xc00),_0x4ca9e4=TextManager['hp'];if(_0x3671f1===0x0)_0x43f237='%1';break;case 0x1:_0x43f237=_0x5cd838[_0x3784b1(0x891)]||_0x3784b1(0x790),_0x4ca9e4=TextManager['hp'];break;case 0x2:_0x43f237=_0x5cd838[_0x3784b1(0x9eb)]||_0x3784b1(0x835),_0x4ca9e4=TextManager['mp'];break;case 0x3:_0x43f237=_0x5cd838['mpHealingFmt']||_0x3784b1(0x3f6),_0x4ca9e4=TextManager['mp'];break;}return _0x43f237[_0x3784b1(0x4a7)](_0x138db6,_0x4ca9e4)[_0x3784b1(0x33a)]();},Sprite_Damage[_0x3ffb9d(0xb66)][_0x3ffb9d(0x50d)]=function(){const _0x235523=_0x3ffb9d;if(Imported[_0x235523(0x820)]){if(_0x235523(0xbc2)!==_0x235523(0x6db))return VisuMZ[_0x235523(0x527)][_0x235523(0x901)][_0x235523(0x917)][_0x235523(0x1a9)];else this['_homeX']=this[_0x235523(0xaf8)],this[_0x235523(0xb27)]=this[_0x235523(0x381)];}else return![];},Sprite_Damage[_0x3ffb9d(0xb66)][_0x3ffb9d(0x23e)]=function(){const _0x3e7ea9=_0x3ffb9d,_0x3e5f28=VisuMZ[_0x3e7ea9(0x80e)][_0x3e7ea9(0x901)][_0x3e7ea9(0xa45)];this[_0x3e7ea9(0x41c)]=_0x3e5f28['CriticalColor'][_0x3e7ea9(0xa39)](0x0),this[_0x3e7ea9(0x9b1)]=_0x3e5f28['CriticalDuration'];},Sprite_Damage[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6b6)]=function(_0x4345b5,_0x41bebb){const _0x2870a0=_0x3ffb9d;this[_0x2870a0(0x41c)]=_0x41bebb[_0x2870a0(0xa02)]||[0x0,0x0,0x0,0x0],this['_flashColor']=JsonEx['makeDeepCopy'](this[_0x2870a0(0x41c)]),this[_0x2870a0(0x9b1)]=_0x41bebb[_0x2870a0(0x345)]||0x0;const _0x1708c5=this['fontSize'](),_0x110316=Math[_0x2870a0(0x9bd)](_0x1708c5*0x1e),_0x21400c=this[_0x2870a0(0x363)](_0x110316,_0x1708c5);_0x21400c[_0x2870a0(0x6a0)][_0x2870a0(0xc17)]=ColorManager[_0x2870a0(0xb9b)](_0x41bebb['textColor']),_0x21400c['bitmap'][_0x2870a0(0x86d)](_0x4345b5,0x0,0x0,_0x110316,_0x1708c5,_0x2870a0(0x5a8)),_0x21400c['dy']=0x0;},Sprite_Damage[_0x3ffb9d(0xb66)][_0x3ffb9d(0x523)]=function(_0x445ca8,_0x153bd4,_0xcd57e3){const _0x11f30f=_0x3ffb9d,_0x578494=Math['max'](this[_0x11f30f(0xa51)](),ImageManager[_0x11f30f(0xb57)]),_0x2ab1c4=Math[_0x11f30f(0x9bd)](_0x578494*0x1e),_0x3e5087=this['createChildSprite'](_0x2ab1c4,_0x578494),_0x433e3e=ImageManager[_0x11f30f(0x797)]/0x2,_0xe010c2=_0x3e5087[_0x11f30f(0x6a0)][_0x11f30f(0x99b)](_0x153bd4+'\x20');_0x3e5087['bitmap'][_0x11f30f(0xc17)]=ColorManager[_0x11f30f(0xb9b)](_0xcd57e3[_0x11f30f(0xc17)]),_0x3e5087[_0x11f30f(0x6a0)][_0x11f30f(0x86d)](_0x153bd4,_0x433e3e,0x0,_0x2ab1c4-_0x433e3e,_0x578494,_0x11f30f(0x5a8));const _0x4e233e=Math[_0x11f30f(0x68f)]((_0x578494-ImageManager['iconHeight'])/0x2),_0x4c2a99=_0x2ab1c4/0x2-ImageManager[_0x11f30f(0x797)]-_0xe010c2/0x2+_0x433e3e/0x2,_0x5af153=ImageManager['loadSystem']('IconSet'),_0x342a24=ImageManager[_0x11f30f(0x797)],_0x4b65ff=ImageManager['iconHeight'],_0x264053=_0x445ca8%0x10*_0x342a24,_0xc0aa15=Math[_0x11f30f(0x9bd)](_0x445ca8/0x10)*_0x4b65ff;_0x3e5087['bitmap']['blt'](_0x5af153,_0x264053,_0xc0aa15,_0x342a24,_0x4b65ff,_0x4c2a99,_0x4e233e),this[_0x11f30f(0x41c)]=_0xcd57e3[_0x11f30f(0xa02)]||[0x0,0x0,0x0,0x0],this[_0x11f30f(0x41c)]=JsonEx['makeDeepCopy'](this[_0x11f30f(0x41c)]),this['_flashDuration']=_0xcd57e3[_0x11f30f(0x345)]||0x0,_0x3e5087['dy']=0x0;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x58c)]=Sprite_Damage['prototype']['createChildSprite'],Sprite_Damage['prototype'][_0x3ffb9d(0x363)]=function(_0x12065f,_0x2e8e31){const _0x3842af=_0x3ffb9d;return _0x2e8e31=Math[_0x3842af(0x68f)](_0x2e8e31*1.2),VisuMZ[_0x3842af(0x80e)][_0x3842af(0x58c)][_0x3842af(0x73d)](this,_0x12065f,_0x2e8e31);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x71b)]=Sprite_StateIcon[_0x3ffb9d(0xb66)][_0x3ffb9d(0x263)],Sprite_StateIcon[_0x3ffb9d(0xb66)][_0x3ffb9d(0x263)]=function(){const _0x5b9ac0=_0x3ffb9d;VisuMZ[_0x5b9ac0(0x80e)][_0x5b9ac0(0x71b)][_0x5b9ac0(0x73d)](this),this[_0x5b9ac0(0x430)]=this['_iconIndex']>0x0?0xff:0x0;},VisuMZ[_0x3ffb9d(0x80e)]['Sprite_Weapon_loadBitmap']=Sprite_Weapon['prototype'][_0x3ffb9d(0x8e5)],Sprite_Weapon[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8e5)]=function(){const _0x2d82b5=_0x3ffb9d;VisuMZ[_0x2d82b5(0x80e)][_0x2d82b5(0x62f)][_0x2d82b5(0x73d)](this),this[_0x2d82b5(0x6a0)]&&(_0x2d82b5(0x7ec)!=='DDFPr'?delete _0x11426d[_0x2d82b5(0xb21)][_0x2d82b5(0x3fa)]:this[_0x2d82b5(0x6a0)]['smooth']=VisuMZ['BattleCore'][_0x2d82b5(0x901)][_0x2d82b5(0x772)][_0x2d82b5(0x27e)]);};function _0xbbda(){const _0x410ccc=['ARRAYEVAL','retreat','alive\x20friends','MP_Flat','_active','skewDuration','vQWAJ','ActSeq_Movement_WaitForMovement','anchor','SXwJw','resizeWindowXPStyle','oeGKY','Actions','NUM','actorCommandCancelTPB','_animationSprites','setVisibleUI','_actions','npoSJ','PostApplyAsUserJS','qseaQ','Window_BattleLog_performCollapse','getBattlePortraitOffsetY','PrioritySortActive','tHUgQ','gectV','loadPicture','updateBattlebackBitmap1','_updateFilterArea','EscapeFailureJS','ActSeq_Mechanics_PtbAlterCost','ActionEnd','_offsetY','DEF','ActSeq_Mechanics_Multipliers','initialize','_damages','animationId','_opacityWholeDuration','addDebuff','ActSeq_Impact_Desaturate','States','isBreakStunned','nuGiS','ActSeq_Horror_TVCreate','eQMTh','Targets1','skillTypes','SvBattlerSolo-%1-%2','_enemyWindow','MfJxM','SwitchMissEvade','CmdStyle','autoBattleStyle','_drawTextOutline','isVisualHpGaugeDisplayed','alive\x20enemies\x20not\x20target','Angle','zPnYa','motionIdle','wtypeId','Spriteset_Battle_updateActors','mainSpriteScaleY','filter','animationWait','changeBattlebacks','battleDisplayText','_freezeMotionData','_armorPenetration','isCharging','FaceDirection','isTpbCharged','ForceExploiter','Game_Party_addActor','Window_Options_statusText','isAttack','updateHpGaugePosition','mmp','_targetHomeX','calcWindowHeight','_autoBattleWindow','setImmortal','drawIcon','collapse','Game_Troop_setup','addChildToBack','LuFep','CHoWE','setupShockwaveImpactFilter','damageOffsetX','PreEndBattleJS','SwitchCritical','GvMkq','updatePhase','SJbBO','WswEM','clone','isBattleFlipped','dAeoN','addActor','isAnyoneSkewing','isWaiting','_displayBattleCoreTransitionErrorMsg','CmdIconFight','ActSeq_Mechanics_BreakShieldReset','_effectDuration','XYKZh','WaitForAnimation','FvYWL','ActionCount','_battlerContainer','isGuard','isForRandomBattleCore','LpiJn','ActSeq_Target_NextTarget','ActSeq_Target_CurrentIndex','battleGrow','addDamageSprite','Window_BattleLog_displayCurrentState','_handlers','_tempBattler','QqTLt','RJNej','substitute','setBattleImpactTimeScale','_homeY','vkheZ','DzFuZ','FlinchDistanceX','ErguQ','ShowMissEvasion','wait','GOebU','FollowTurn','helpWindowRect','sliceMax','startHomeMove','addedBuffs','skillWindowRect','Window_BattleLog_clear','MotionFrameWait','_drawTextBody','%1EndTurnJS','ShowMpDmg','nhexE','sGRlS','DefaultSoftCap','updateShadowScale','SkillItemBorderCols','_shadowScaleX','startJump','BackColor','lWaWT','inputting','gqslh','Linear','WuDHd','createBattleFieldBattleCore','_homeX','isBTB','WPTgf','updateFloat','performActionStart','eGNJU','waitForEffect','ChargeRate','CheckSkillCommandShowSwitches','icEAU','makeTargetSelectionMoreVisible','_skewY','createPartyCommandWindow','GroupDigits','dwIMz','iconHeight','Sprite_Battler_initMembers','autoBattleUseSkills','_pattern','FullActions','showAnimation','prepareBorderActor','oMxdp','rIgCA','zRxvc','isSkipPartyCommandWindow','addSingleSkillCommands','JS\x20%1END\x20ACTION','drawItemImage','SGjEw','prototype','changeBattlerOpacity','SkillItemMiddleLayout','logWindowRect','RequiresDefeat','onMoveEnd','_floatWholeDuration','ATK','onGrowEnd','hasBeenDefeatedBefore','allowCollapse','Wave','ShowCounter','JS\x20%1REGENERATE','rtOHC','weatherPower','cCsJK','Sprite_Enemy_updateStateSprite','isDead','Scene_Battle_onActorOk','actorCommandWindowRect','regenerateAllBattleCore','gaugeLineHeight','applyEasing','wWdPA','TpbActiveChangeEnabled','processRandomizedData','StepDistanceX','jNsHl','ConvertParams','stop','_requestRefresh','JSON','ShowWeapon','createKeyJS','CreateActionSequenceTargets','displayBuffs','VisuMZ_2_BattleSystemETB','ActSeq_Element_Clear','targetObjects','ShowCritical','%1\x20is\x20missing\x20a\x20required\x20plugin.\x0aPlease\x20install\x20%2\x20into\x20the\x20Plugin\x20Manager.','TpGaugeOffsetX','drawTextEx','tphIp','performActionEnd','Scene_Battle_skillWindowRect','Sprite_Battler_startMove','Mgrtc','Scene_Battle_itemWindowRect','vETJX','ActSeq_Impact_TimeStop','lWIpO','getColor','backColor','_forcedHomeY','criticalHitRate','Amp','_commandNameWindow','NXmyg','stbGainInstant','startDamagePopup','mainSpriteHeight','cLZkV','GrFka','LastSelected','MSCLo','AttachStateOffsetX','addAnimationSpriteToContainer','StatusWindowAttachmentBackOffsetX','Post','chant','UrViN','_flinched','becomeSTBExploited','setSvBattlerSprite','_targetSkewX','ShowSubstitute','isConfused','FGzvu','_weather','abnormal','_text','createAttachedSprites','Game_Actor_setup','zFGpN','HelpFight','spriteId','Slot','ogdcw','ShowTpDmg','uCwHg','WRJFU','gwJZf','displayMiss','JJHXQ','setupDamagePopup','children','DamageStyles','shadow','_uiContainer','recoverAll','CastMagical','power','_weaponImageId','performJump','createStateSprite','boxHeight','RegExp','Mechanics','Sprite_SvEnemy','ActSeq_Projectile_Animation','ShowFacesListStyle','JHWMH','_flipScaleX','onEncounter','dragonbonesData','random','mJsML','victory','equipSlots','_tempActor','YHTxA','addWeaponSwapCommand','initBattleCore','HomePosJS','CriticalHitMultiplier','RfpLT','CalcEscapeRatioJS','_frame','updateStatusWindowPosition','slices','singleSkill','isCommandEnabled','changeInputWindow','_battlerHue','gvZkF','lTyHA','CommonEventID','trueRandomTarget','moveToStartPosition','yuveE','battleMembers','battleCamera','Game_BattlerBase_canGuard','XLBsI','JYlfq','onEnemyCancel','Armor-%1-%2','_dimmerSprite','damage','Battleback','zzlQu','VisuMZ_2_WeaponSwapSystem','-%1','ArRedRate','riWQm','HBvoJ','left','kVfSZ','Wzmup','ljljD','ARRAYFUNC','Game_Enemy_transform','gainHp','BattleManager_onEscapeSuccess','anchorY','DefaultHardCap','isATB','ActSeq_Movement_HomeMoveToTarget','isAppeared','hasSvBattler','updateInterpreter','missile','isEscapeCommandEnabled','CmdIconItem','skillItemWindowRectBorderStyle','textColor','_targetGrowX','createDigits','freezeTime','isTickBased','addCombatLogCommand','TTXJL','changeCtbChargeTime','padding','isTeamBased','ActSeq_Mechanics_VariablePopup','oPJfD','_svBattlerData','getItemDamageAmountLabelBattleCore','user','setHome','TIbDa','YSYzA','itemRect','dimColor1','isSpinning','STR','mainSpriteWidth','Width','KXRQP','needsSelectionBattleCore','OYqNZ','updateFlip','StartName','isForOpponentBattleCore','createCancelButton','dead\x20opponents','bcaag','canAttackBattleCore','Scene_Battle_update','onActorOk','QOvTh','_itemWindow','Formula','xugrV','Scene_Battle_createPartyCommandWindow','VCKBj','makeActionOrders','hide','onDisabledPartyCommandSelection','Ndema','BattleLayout','sgMnd','Window_BattleEnemy_initialize','battleProjectiles','XAqDJ','PopupOffsetY','param','addItemCommand','addLoadListener','animationBaseDelay','createHpGaugeSprite','Game_BattlerBase_isStateResist','COMBAT\x20LOG','autoMeleeSingleTargetActionSet','JJwYm','Scene_Battle_updateStatusWindowPosition','softDamageCap','_actionInputIndex','updateOpacity','isDuringNonLoopingMotion','sAChC','wPMUF','createBattleUIOffsetY','Scene_Battle_startEnemySelection','IconStypeNorm','DigitGroupingDamageSprites','ActionSequence','ActSeq_Impact_Oversaturate','applyHardDamageCap','LZFKR','criticalDmgRate','extraPositionY','equips','WQLek','addSingleSkillCommand','MANUAL','setGuard','lPvVL','charged','match','stepForward','isBypassDamageCap','displayBattleCoreTransitionErrorMsg','_statusWindow','delay','aKgMa','yGLHe','current\x20target','bitmapHeight','pDlON','KKkon','BattleStartEvent','waitForNewLine','ActSeq_Impact_TimeScale','createInnerPortrait','extraHeight','createCommandVisibleJS','getDualWieldTimes','rowSpacing','startWeaponAnimation','vdmXq','Spriteset_Battle_createLowerLayer','loop','dTelh','anchorX','_speed','Window_BattleLog_displayActionResults','commandName','AdjustRect','numTargets','troop','NLcaU','setHelpWindow','updateScale','Game_Battler_forceAction','weaponTypes','moveBattlerHomeToPoint','addBattleCoreAutoBattleStyleCommand','NQVAQ','Mirror','URltP','onEnemyOk','PAJmG','update','AllowRandomSpeed','isMVAnimation','_effectsContainer','qEdpA','autoBattle','owcIb','customDamageFormula','Game_Action_applyGlobal','cGkkx','isAnyoneSpinning','compareBattlerSprites','Setting','globalAlpha','setCommonEvent','YXSPf','NextTurn','MAXHP','isBattleCoreTargetScope','_motionSpeed','ActSeq_Mechanics_BtbGain','arPenRate','_angleWholeDuration','isOnCurrentMap','AS\x20TARGET','_escapeRatio','ANTI_TINT_UI','requestPointAnimation','_jumpDuration','Game_Enemy_setup','BreakShields','font','PreDamage%1JS','drawActorFace','length','surprise','skillId','filters','battlerSprites','autoBattleStart','_frontAttachmentSprite','magicSkills','Duration','AnimationID','PostStartActionJS','_enemyNameContainer','mpDamage','CHrnk','updateStateIconSprite','LxRPp','coreEngineRepositionEnemies','XIrBQ','WaitForSkew','resize','startPartyCommandSelection','ScaleDown','updateBossCollapse','getBattlePortrait','displayAffectedStatus','ceil','speed','ReflectAnimation','parseForcedGameTroopSettingsBattleCore','_partyCommandWindow','ActSeq_Movement_WaitForOpacity','performReflection','isMagical','IVItY','QpMun','ActSeq_Camera_Reset','_forcedHomeX','isForAll','Sprite_Actor_updateFrame','sortDamageSprites','createAttachmentSprites','WeaponTypeID','fnordRemovedStates','lineHeight','DefaultSoftScaler','default','currentClass','popBaseLine','displayItemMessage','walk','addChild','mbhuf','checkAutoCustomActionSequenceNotetagEffect','createMainSprite','battleCommandIcon','battlerSmoothImage','Game_BattlerBase_initMembers','setupCriticalEffect','Scene_Battle_createAllWindows','VisuMZ_3_ActSeqImpact','kSAal','ScaleY','swing','setFullActionsPTB','playReflection','_opacityDuration','helpAreaBottom','_canLose','addCustomCommands','pattern','_borderPortraitSprite','MDUnc','createTargetsJS','checkCacheKey','_enemies','tUSSi','IwPJh','evaded','Window_BattleLog_performAction','terminate','ShowHpDmg','Skills','StatusWindowAttachmentBack','priority','addImmortal','Sprite_Actor_update','_preemptive','updateGrow','resizeWindowBorderStyle','numRepeats','BattleManager_processDefeat','Reveal','TmcQL','commandNameWindowDrawBackground','updateFrame','ActSeq_Movement_HomeReset','isOkEnabled','EnableDamageCap','_hpGaugeSprite','dead','PostStartTurnJS','Scene_Battle_startActorCommandSelection','Plsmn','forceMotion','GrIyk','setupBattleCore','hasStaticSvBattler','MWkln','Style','removeActor','isBattleMember','VisuMZ_2_BattleSystemCTB','message2','BattleManager_startAction','applyData','missed','ShowFailure','Scene_Party','setWaitMode','isSTB','ActSeq_Projectile_Picture','SmoothImage','qyxxd','isTpbMainPhase','Window_BattleEnemy_show','counterAttack','requestRefresh','IqbiR','ActSeq_Mechanics_ArmorPenetration','ActSeq_Mechanics_RemoveBuffDebuff','iterateBattler','SkewY','setHue','cgdYL','_cursorArea','EjXgB','createSeparateDamagePopups','alive\x20enemies','updateStaticSvBattlerFrames','Radius','tMYzO','getLastPluginCommandInterpreter','TpGaugeOffsetY','setupBlueRedInvertImpactFilter','SceneManager_isSceneChanging','WaitForOpacity','xUsmH','ActSeq_Mechanics_FtbAction','MpGaugeOffsetY','BattleDefeatJS','weaponImageId','<%1>\x5cs*([\x5cs\x5cS]*)\x5cs*<\x5c/%1>','oEhWR','loadSvActor','ActSeq_Animation_CastAnimation','ActSeq_Mechanics_RemoveState','itemTextAlign','performMagicEvasion','dTMVm','ActSeq_Mechanics_ActionEffect','hardDamageCap','processActorCommandCancelTPB','isEnemy','yUzEY','battleEffect','isPlaytest','makeDamageValue','playOnceParallelInterpreter','commandOptions','ActSeq_BattleLog_WaitForNewLine','ARRAYNUM','PrRZP','isCTB','removeDamageSprite','ActSeq_BattleLog_PopBaseLine','placeStateIcon','battleUIOffsetY','ArPenRate','selectPreviousCommand','setBattlerFacePoint','updateWaitMode','makeData','isActor','Shadow2','index','ZIjoM','EscapeSuccess','actorCommandAutoBattle','makeActionList','innerWidth','ActSeq_Camera_Clamp','Sprite_AnimationMV_updatePosition','NameAlwaysHidden','NzThj','updateBorderSprite','BiOvl','Game_Action_numRepeats','destroyDamageSprite','stateRate','applyBattleCoreJS','isPTB','right','expTotal','roXKi','setBattlerBattleCore','dxmVJ','MessageWait','actions','AlphaFilter','_battleCoreForcedElements','RevertAngle','CombatLogIcon','cancelTargetSelectionVisibility','context','canMove','Window_BattleLog_performReflection','Game_Interpreter_terminate','maxCommands','updateRefresh','Scene_Battle_windowAreaHeight','RtgFu','repositionCancelButtonBorderStyle','kYkCK','_lastAction','Game_Interpreter_command283','updateBattlebackBitmap','WaitCount','mainFontSize','map','createDamageSprite','setup','Window_BattleLog_pushBaseLine','performRecovery','addChildToUiContainer','alterCost','gSWPb','IuTOJ','duwUT','move','\x5cI[%1]%2','updateAngleCalculations','bitmapWidth','ParseClassNotetags','canAttack','casting','_forceAction','qdCEM','ShowRemovedBuff','value1','displayCounter','_defeatedEnemies','startOpacity','PwuYJ','_commonEventIDs','ActSeq_Mechanics_StbExtraAction','Immortal','fnordAddedStates','createLowerLayer','onDatabaseLoaded','attack','missle','HDEvA','stypeId','displayFailure','performActionEndMembers','getDefeatedEnemies','isPartyTpbInputtable','SKbGM','UOFSA','autoSelectPriority','ErCcu','bBSxd','repeats','Zsuiz','addTextToCombatLog','Sprite_Animation_targetSpritePosition','commandNameWindowDrawText','setBattleSkew','clearDamagePopup','ChantStyle','uWsVi','isActing','_shadowScaleY','battleCameraData','finalizeScale','aTZZe','ActSeq_Animation_ActionAnimation','RcDTL','VisuMZ_2_HorrorEffects','OEsTn','waitCount','zthqp','UItVj','gGWnF','ActSeq_Set_WholeActionSet','yAABY','parameters','zZclF','addSkillCommands','_list','DistanceY','setMoveEasingType','_stypeIDs','processBorderActor','Scene_Map_initialize','_enemySprites','isDamagePopupRequested','value','AnchorX','trim','item','_enemyId','hasSkill','battleCorePreBattleCommonEvent','currentAction','adjustPosition_1for1','isSceneBattle','createDistortionSprite','Buffs','compatibilityVisible','flashDuration','filterArea','heimu','setActiveWeaponSet','VhxRi','eSZiY','drawItemImageListStyle','_deathStateApplied','needsSelection','arRedRate','displayMpDamage','getAttackWeaponAnimationId','TargetLocation','commandNameWindowCenter','JsVbO','gaugeX','fillRect','UoqBf','FocusX','BattleManager_endBattle','GJDoW','isCustomActionSequence','ActSeq_BattleLog_Refresh','ActSeq_Horror_TVRemove','Scene_Battle_initialize','process_VisuMZ_BattleCore_TraitObject_Notetags','WKZie','Elements','waitForMovement','drawItemStatus','createChildSprite','iWguj','note','itemHeight','hue','canUse','maxCols','CriticalDmgFlat','setHandler','CounterPlayback','_homeWholeDuration','\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20target\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20obj\x20=\x20arguments[2];\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20value\x20=\x20arguments[3]\x20||\x200;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20originalValue\x20=\x20value;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Constants\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20action\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this\x20:\x20user.currentAction();\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20attacker\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20defender\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20healer\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20receiver\x20=\x20target;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20actor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20currentClass\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20item\x20=\x20(this.constructor\x20===\x20Game_Action)\x20?\x20this.item()\x20:\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20weapon\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20armor\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20enemy\x20=\x20obj;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20const\x20state\x20=\x20obj;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Create\x20Compatibility\x20Variables\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20let\x20origin\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(Imported.VisuMZ_1_SkillsStatesCore\x20&&\x20$dataStates.includes(obj))\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20origin\x20=\x20target.getStateOrigin(obj.id);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20NaN\x20Check\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20(isNaN(value)){\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27NaN\x20value\x20created\x20by\x20%2\x27.format(\x27\x27,obj.name));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20console.log(\x27Restoring\x20value\x20to\x20%2\x27.format(\x27\x27,originalValue));\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20value\x20=\x20originalValue;\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20return\x20value;\x0a\x20\x20\x20\x20\x20\x20\x20\x20','55TlAijI','xqJKZ','Window_BattleLog_displayEvasion','invokeAction','_colorType','lQTGz','_skillIDs','svBattlerData','setBattleCameraOffset','_endBattle','switchToWeaponType','setHelpWindowItem','ShowAddedState','voYQy','removeImmortal','_actionBattlers','isAnimationShownOnBattlePortrait','currentValue','_targetHomeY','attackSkillId','ActSeq_Element_ForceElements','unshift','_emptyBitmap','ActSeq_Mechanics_EtbAction','ARRAYJSON','traitObjects','Luilo','callOkHandler','onHomeMoveEnd','front\x20base','StartTurnShow','PerformAction','_effectType','addAutoBattleCommand','_distortionSprite','_skewDuration','windowskin','pow','ActSeq_Impact_MotionBlurScreen','jxiua','gradientFillRect','zPUoF','lineRect','BattleManager_startInput','statusWindowRect','isAtbCastingState','DXlvD','alterPriority','WWXrX','needsActorInputCancel','Filename','applyArmorModifiers','setText','canEscape','CZLTK','auto','addedDebuffs','actorCommandEscape','actionEffect','svBattlerName','randomInt','BattleManager_initMembers','isAlive','AsTarget','process_VisuMZ_BattleCore_DamageStyles','Scene_Battle_createHelpWindow','BTestBypass','Override','UgCMX','displayActionResults','svShadow','HitRate','Ddwvq','fwNwv','isNextScene','ZJqnV','VisuMZ_2_BattleSystemOTB','4017530dVyWCk','PopupPosition','NewPopupBottom','_damagePopupArray','hitRate','aYSqb','isDebuffAffected','version','Victory','ActSeq_Animation_PlayAtCoordinate','WaitCount2','create','ActSeq_Element_NullElements','OffsetAdjust','iKuYH','Window_BattleLog_update','createStateIconSprite','WaitForProjectile','_actorCommandWindow','ActSeq_Animation_AttackAnimation','ActSeq_Target_PrevTarget','findTargetSprite','_ptbActionCost','contents','BattleManager_checkSubstitute','processPostBattleCommonEvents','onTurnEnd','makeTargetsBattleCore','oXOyy','command301_PreBattleEvent','pages','ActSeq_Movement_Opacity','_cacheTextWidth','MQbTP','dyNrX','_createEffectsContainer','_item','guardSkillId','YPZuf','sort','hpAffected','cancelButtonText','onJumpEnd','eluQg','freezeFrame','startInput','PreApply%1JS','battleSpin','Window_BattleLog_performMiss','_commonEventQueue','AsUser','makeSpeed','PortraitScale','SDmVC','BaseTroopIDs','RveCM','createBorderStylePortraitSprite','ShowAddedBuff','+%1\x20MP','SaQTy','isBattlerGrounded','JfvjC','cancel','drawSkillCost','Window_BattleLog_displayMpDamage','itemLineRect','launchBattle','_mainSprite','isOptionsCommandAdded','#ffffff','enemy','undecided','dLZah','contentsOpacity','setupBattleCoreData','Scene_Battle_helpWindowRect','floatBattler','onSkewEnd','ScaleUp','options','Frame','ParseItemNotetags','drawEnemyName','ActSeq_Movement_HomeMoveBy','xxdZs','_visualHpGauge_JustDied','VisuMZ_3_WeaknessDisplay','rKDbZ','Sprite_Enemy_createStateIconSprite','_jumpHeight','concat','vTpdb','requestAnimation','alive\x20actors','battlerName','tHZKD','_flashColor','maxLines','_borderPortraitTargetX','ZRtTE','HP_Rate','removedBuffs','canGuardBattleCore','Scene_Battle_onEnemyOk','pop','makeTargets','reverse','setBattler','_padding','ActSeq_Movement_Scale','onBattleEndBattleCore','IKvBk','requestMotion','setupActionSet','iconText','updateAttachedSprites','opacity','tCUKc','friendsUnit','<CUSTOM\x20ACTION\x20SEQUENCE>','loadBattleback1','heRPR','result','_shake','1884920vnuavR','DamageFlat','processVictory','growBattler','ALL\x20SKILLS','extraPositionScaledY','CommandWidth','Game_Interpreter_PluginCommand','isBorderStylePortraitShown','addBattleCoreAutoBattleStartupCommand','hrxNk','_indent','%1Event','buffAdd','pointY','Window_ItemList_maxCols','vHxoH','AttachStateOffsetY','startAttackWeaponAnimation','maxTp','XkmZE','ENFVp','Hkhab','battleCommandName','gpSdQ','AnchorY','setFrame','name','%1Damage%2JS','getItemDamageAmountTextBattleCore','toLowerCase','NameOffsetX','setValue','createWeather','ShowAddedDebuff','commandStyleCheck','setupMotion','Game_Battler_clearMotion','startGrow','frameCount','zMLqk','_animationCount','StepDuration','clearFreezeMotion','Sprite_Enemy_setBattler','damageContainer','effects','ARTZY','ZhVoP','isImmortal','VariableHeal','Scene_Battle_terminate','_executedValue','isIncludedInEnemyWindow','itemEffectAddNormalState','jOzfq','playCancel','tpbActorSwitchConditionsMet','PreEndActionJS','fight','Scene_Map_launchBattle','bdTxZ','MAT','isCertainHit','_homeEasing','applyItem','PopupShiftX','angleDuration','Game_Map_setupBattleback','selectNextActor','aXcYT','reduce','ActSeq_Horror_NoiseRemove','Scene_Battle_stop','Index','setupFont','createJS','putActiveBattlerOnTop','dLQoo','getItemDamageAmountTextOriginal','ActSeq_Movement_WaitForSpin','LkGts','updateEffectsContainer','Game_Map_battleback2Name','_lastPluginCommandInterpreter','createDamageContainer','_isBattlerFlipped','drawGauge','_angleEasing','battler','_logWindow','isSkill','vGhJQ','amqXY','Debuffs','damageStyle','gainTp','targetDistortionSpritePosition','snapForBackground','loyMS','alive\x20battlers','checkShowHideBattleNotetags','BattleManager_selectNextCommand','AutoBattle','JS\x20BATTLE\x20VICTORY','Scene_Battle_onActorCancel','Xtqah','constructor','Sprite_Battler_update','isPartyCommandWindowDisabled','setupNegativeImpactFilter','format','battleJump','alive\x20opponents','_stateSprite','VisuMZ_2_BattleSystemBTB','isPreviousScene','svAnchorY','VisuMZ_3_ActSeqProjectiles','origin','transform','DefaultStyle','registerCommand','performCollapse','isRightInputMode','die','BattleManager_onEscapeFailure','PreDamageJS','BSYWD','SvMotionIdleMass-%1-%2','cameraDuration','KYbmm','Opacity','ActSeq_Animation_WaitForAnimation','JS\x20ESCAPE\x20FAILURE','ubPNQ','targetSpritePosition','_svBattlerSprite','zIahh','ArRedFlat','JumpToLabel','_jumpMaxHeight','updateCancel','_floatDuration','_actor','EHnrk','AAGAO','MpGaugeOffsetX','show','StatusWindowAttachmentFront','_forcedBattleLayout','Scene_Battle_selectPreviousCommand','setupWeaponAnimation','ActSeq_Mechanics_Collapse','updateStateSpriteBattleCore','setBackgroundType','bmqcc','_motionType','onRegeneratePlayStateAnimation','AhjKW','isSelected','moveBattlerToPoint','nEtgg','ActSeq_Mechanics_StbExploit','%1EndActionJS','BattleManager_processVictory','performWeaponAnimation','_immortal','gwWPI','noSimilarSTypes','animation','commandStyle','isTpb','_baseLineStack','adjustPosition_ScaleUp','OdWRc','partyCommandWindowRectXPStyle','WaitForZoom','changeAtbCastTime','hroAD','getHardDamageCap','damageRate','emerge','ConfigManager_makeData','ZCRZp','updatePadding','CreateCommonEventKeys','KZkbX','drawItemStyleIcon','vWdfn','OYnAh','repositionEnemiesByResolution','Game_BattlerBase_addNewState','ActSeq_Horror_GlitchCreate','partyCommandWindowRectBorderStyle','getStypeIdWithName','_homeDuration','isDeathStateAffected','QWkej','_allTargets','Window_SkillList_maxCols','WaitForAngle','ActSeq_Movement_WaitForFloat','CbtaH','TP_Rate','_angleRevertOnFinish','svBattlerShadowVisible','drawBackgroundRect','addSkillTypeCommand','VisuMZ_3_SideviewBattleUI','_lineHeight','AxgpS','DistanceAdjust','useDigitGrouping','_windowLayer','VisuMZ_2_BattleSystemPTB','XElik','MotionAni','regionId','_methods','notFocusValid','replace','ActSeq_BattleLog_UI','_opacityEasing','Height','checkSubstitute','displayCritical','setEventCallback','aSIMX','VisuMZ_1_BattleCore\x20does\x20NOT\x20support\x20changing','yBTnw','pJxpH','clearBattleRefreshRequest','isSideButtonLayout','apply','setupIconTextPopup','tWkpA','yQVyh','startActorSelection','CoreEngine','IconStypeMagic','command3011','turnCount','_attackAnimationId','alive\x20actors\x20not\x20user','_totalValue','ShowActorGauge','startActorCommandSelection','scale','_baseY','RfCMn','canUseItemCommand','Game_System_initialize','Window_BattleLog_performDamage','mgnIx','WaitForEffect','PostEndBattleJS','_lines','alive\x20actors\x20not\x20target','ActSeq_Movement_FaceTarget','BattleLogRectJS','performCounter','actor%1-portrait','SvMotionIdleSolo-%1-%2','MAXMP','_enemy','makeHpDamageText','angle','BattleManager_makeActionOrders','updateEventMain','drawItem','YxNSn','zyusB','svAnchorX','ActSeq_Mechanics_AddState','helpAreaHeight','setupOversaturateImpactFilter','critical','alive\x20battlers\x20not\x20target','visible','skillItemWindowRectMiddle','ActSeq_Element_AddElements','State-%1-%2','onFloatEnd','isStatusAffected','ySuYh','ScaleToFit','Enable','start','PAZnU','updateCustomActionSequence','ActSeq_Mechanics_AtbGauge','_battleCoreBattleStartEvent','removedStateObjects','xDoUN','process_VisuMZ_BattleCore_Action_Notetags','IRbkY','Game_Action_isForFriend','isItem','EVAL','PopupDuration','PopupShiftY','attackStatesRate','removeHorrorEffect','okTargetSelectionVisibility','ActSeq_Animation_ShowAnimation','_actorSprites','loadSystem','onSelectAction','displayReflectionPlayBack','isDTB','_multipliers','isAffectedByBreakShield','forceAction','svBattlerAnchorY','isClicked','Sprite_Actor_setActorHome','onBattleStart','_interpreter','drawItemBackground','startAction','Scene_Battle_onEnemyCancel','ActSeq_BattleLog_Clear','updateActors','uyZin','Game_BattlerBase_canAttack','canAddSkillCommand','_checkOn','performMiss','ddGzm','ZjIRa','Exploiter','checkShowHideSwitchNotetags','visualHpGauge','isFightCommandEnabled','actorId','EscapeSuccessJS','custom','Destination','_action','Sprite_Damage_createChildSprite','bUbDj','ActionItemMsg','setupBattlebackBattleCore','escape','_borderPortraitDuration','updateCallMenu','ShowCurrentState','SlotID','cLhEa','worldTransform','deathStateId','OffsetX','VHrHt','EmergeText','TpbGaugeOffsetY','criticalHitFlat','Game_Battler_startTpbTurn','Parse_Notetags_Action','addNewState','jVQsD','faceWidth','QDfbW','LVGrb','attachSpritesToDistortionSprite','startTurn','nKTrw','ActSeq_Set_SetupAction','center','Strength','Sprite_Enemy_setHue','isSkewing','Scene_Options','ActSeq_Impact_MotionBlurTarget','createEmptyBitmap','statusText','cameraClamp','jumpBattler','Sprite_Actor_updateBitmap','turnOrderChangeOTB','battleMove','targetActionSet','autoSelect','IvkaO','maxBattleMembers','isAnimationPlaying','Window_BattleLog_refresh','BattleVictoryJS','hitFlat','useItem','parent','HelpEscape','uAVgS','Game_Action_setAttack','isAlwaysHidden','requestFauxAnimation','NTbSc','dndWv','weatherType','usePremadeActionSequence','StartTurnWait','updateSkew','SvWeaponSolo-%1-%2','isAnyoneGrowing','UNTITLED','QuDNh','battleCommands','isDisplayEmergedEnemies','createShadowSprite','Game_Action_executeDamage','_weaponSprite','refreshStatusWindow','mADwN','_onceParallelInterpreters','isFTB','battleOpacity','battleSpriteSkew','CommandAddAutoBattle','eFgfB','createEnemyNameContainer','ActSeq_DB_DragonbonesTimeScale','isHiddenSkill','clearActiveWeaponSet','getAttackMotion','criticalDmgFlat','DuIVB','eGUyR','Ogcgu','ActSeq_Mechanics_TextPopup','Enemy','CastPhysical','_wtypeIDs','ActSeq_Movement_MoveToTarget','currentExt','isMeleeMultiTargetAction','adjustPosition_ScaleDown','HZLIZ','lIfXR','Sprite_Battler_damageOffsetX','updateHelp','GUARD','WaitForFloat','bossCollapse','updateShadowVisibility','isNextSceneBattleTransitionable','KiNuG','fiJyc','DisablePartyCmd','npaKJ','performMoveToTargets','createActorCommandWindow','dmrUz','Game_Action_clear','finishActionSet','getInputButtonString','dbRCq','AUTO\x20BATTLE','_shadowSprite','Window_BattleLog_displayTpDamage','ForceDeath','CriticalDmgRate','hVJuP','ActorCmd','createContents','dyPyQ','opGro','partyCommandWindowRectDefaultStyle','jonzG','isUndecided','startSpin','getSkillIdWithName','CoRYP','setSTBExploited','updateStateSprite','makeSuccess','Sprite_Enemy_updateBossCollapse','toUpperCase','dDYBD','_makeFontNameText','Rroqi','extraPositionX','Sprite_Enemy_update','eraseState','guard','_additionalSprites','SBXSD','GQTmm','isEffecting','PostDamageJS','Game_Battler_regenerateAll','OffsetY','isForOpponent','BattleManager_isTpbMainPhase','_targetOpacity','Actor-%1-%2','_phase','ActSeq_Impact_ColorBreak','ECRox','MotionType','wENur','_duration','Game_Troop_expTotal','damageOffsetY','Sprite_Weapon_loadBitmap','EYrNW','Scene_Boot_onDatabaseLoaded','Scene_Battle_selectNextCommand','ActSeq_Mechanics_WaitForEffect','setupHpGaugeSprite','aHBxf','TwzPm','pTEsq','startMove','FlashDuration','setBattlerMotionTrailData','inHomePosition','gsEis','dead\x20battlers','ZgCAX','isShownOnBattlePortrait','ForceExploited','encounterList','float','NameAlwaysSelectOnly','Class-%1-%2','Mute','_battleCoreBattleResumeAfter','StateIconOffsetX','Defeat','pointX','ActionEffect','removeStatesAuto','textWidth','gainHalfActionsPTB','startFloat','processForcedAction','rZPAX','Game_Action_evalDamageFormula','randomTargets','getAttackMotionSlot','Sprite_Actor_initMembers','isSkillItemWindowsMiddle','removeBuff','swapEnemyIDs','jgVCf','GLUug','battleSys','hXjMg','nCZsS','_cursorSprite','BLNnS','ActiveTpbOptionsMessage','ActSeq_Motion_RefreshMotion','HelpSkillType','WDQMg','getItemDamageAmountLabelOriginal','pushBaseLine','executeDamage','animationNextDelay','skewBattler','ActSeq_Skew_WaitForSkew','processEscape','updateShadowBattleCore','onActorCancel','mNljZ','_surprise','gainMp','isMoving','description','CmdIconEscape','isCustomBattleScope','drawItemStyleIconText','gZhjt','FSyKT','DYpJG','chantStyle','_targets','jGBXY','Oimps','AutoBattleBgType','top','attackAnimationIdSlot','Game_Battler_performEvasion','FlinchDuration','performCastAnimation','ActSeq_Target_RandTarget','isStateResist','commandAutoBattle','Scene_Options_maxCommands','COMBATLOG','jmSqt','_animationContainer','ConfigManager_applyData','base','placeGauge','isAlwaysVisible','Game_Interpreter_command301','isSceneChanging','portrait','round','getDamageStyle','isGuardWaiting','Targets','_createDamageContainer','KaPTI','yFTIo','ihvxs','117384pWJLFZ','SkewX','process_VisuMZ_BattleCore_BaseTroops','applyGuard','CastCertain','updateCommandNameWindow','AutoMeleeAoE','xwSwj','_stateIconSprite','bitmap','FXsxT','evade','performActionMotions','isAnyoneChangingOpacity','command357','WCHXX','imBUi','VZXIu','displayChangedStates','actor','ActSeq_Camera_Offset','KSXOG','addGuardCommand','opacityStart','createHelpWindowBattleCore','battleSkew','updateLink','setHorrorEffectSettings','ParseAllNotetags','dead\x20enemies','exit','setupTextPopup','LKZpN','Hvzlv','HIfvV','IbmJe','loadSvEnemy','ActSeq_Mechanics_PtbConvert','isPreviousSceneBattleTransitionable','moveToStartPositionBattleCore','waitForOpacity','drawLineText','FlashColor','createBattleFieldContainer','GpQGX','BattleLog','forceWeaponAnimation','PreStartBattleJS','VisuMZ_2_BattleSystemSTB','startSkew','ShuffleArray','changePaintOpacity','showHelpWindow','clamp','ITEM','_regionBattleback1','_createClientArea','cYNzD','StateIconOffsetY','activate','HpGauge','dgMRM','clearForcedGameTroopSettingsBattleCore','_updateCursorFilterArea','_cache','checkShowHideSkillNotetags','Game_Map_battleback1Name','ARRAYSTRUCT','eLbFt','WaitForMovement','feYJQ','isSideView','ktWHm','_target','RUfTg','refreshRequest','Game_Battler_clearDamagePopup','BattleManager_startTurn','PostStartBattleJS','VgSiB','Text','jrRIy','inputtingAction','isMeleeSingleTargetAction','statusWindowRectDefaultStyle','zvHkA','ActionAnimation','getConfigValue','GGhRe','smooth','front\x20center','setTroopPage','AS\x20USER','onOpacityEnd','9gPgzEI','applyDamageCaps','TkBYG','Game_Battler_onTurnEnd','Window_BattleLog_performMagicEvasion','ActSeq_Weapon_SetActiveWeapon','Game_Battler_performMiss','Enemy-%1-%2','bYTjt','isAnyoneMoving','VKwUd','XarFx','isTriggered','_growDuration','_targetFloatHeight','initMembersBattleCore','itemCri','Game_BattlerBase_eraseState','%1StartTurnJS','PreApplyAsUserJS','allowRandomSpeed','performAttackSlot','setBattlePortrait','_createCursorSprite','forceSelect','PSqhS','SkillItemStandardCols','_autoBattle','Skill-%1-%2','updatePosition','updateBattlebackBitmap2','qjeHb','HelpAutoBattle','alterChange','createCommandNameWindow','1202514UiJyHb','processRefresh','fYsru','Sprite_StateIcon_updateFrame','npYPI','getCommonEventIdWithName','showPortraits','_targetAngle','_customDamageFormula','PlGCa','processBattleCoreJS','autoMeleeMultiTargetActionSet','updateUiContainerPosition','battlelog','PRE-','restore','list','WPYob','arPenFlat','Game_BattlerBase_die','ActSeq_Movement_MoveToPoint','startTpbTurn','noise','isFrameVisible','MDF','ParseActorNotetags','autoSelectLastSelected','addEscapeCommand','applyGlobal','aliveMembers','addShowHpGaugeCommand','Scene_Battle_start','BattleManager_inputtingAction','commandSymbol','actorCommandSingleSkill','Game_Battler_onBattleEnd','battleAnimation','call','ElementStatusCore','clearActiveWeaponSlot','applyTargetFilters','makeAutoBattleActions','IZqos','_inputting','prev\x20target','_angleDuration','UymwS','linkSprite','motionType','wwGHj','updatePointAnimations','_updateCursorArea','refreshCursor','wCYtr','isAnyoneFloating','mainSpriteScaleX','GSFhJ','actionSplicePoint','hGZRF','EECGZ','clearMotion','EnableSoftCap','visibilityState','message4','DTB','displayHpDamage','ActionCenteredName','status','Turns','sCkgt','clear','Direction','addAutoBattleCommands','_tpbNeedsPartyCommand','unchanged','PreApplyAsTargetJS','ActSeq_Impact_ZoomBlurTargetCenter','wFvwk','endBattle','spinBattler','onAllActionsEnd','jhASs','onEscapeFailure','indexOf','_updateClientArea','MOTIONS','alive\x20friends\x20not\x20user','srSvs','SkipPartyCmd','ActSeq_Projectile_Icon','Actor','timeScale','Scene_Battle_updateBattleProcess','min','KXXsO','refreshActorPortrait','ActSeq_Movement_HomeMoveToPoint','itemHit','ParseStateNotetags','_skewEasing','code','DamageDisplay','tdlxq','isSpriteVisible','Rate','process_VisuMZ_BattleCore_Failsafes','AddOption','BindCommonEventKeysForGroup','iconIndex','waitForAnimation','updateShadowPosition','_enemyIDs','gainBravePoints','ActSeq_Motion_MotionType','addState','UiDFH','ActSeq_Angle_WaitForAngle','canGuard','prepareCustomActionSequence','ParseSkillNotetags','+%1','TqxAT','Scene_Battle_startPartyCommandSelection','BSYNV','members','process_VisuMZ_BattleCore_CommonEventKeys','VisuMZ_1_SkillsStatesCore','iconWidth','_waitMode','addGeneralOptions','kSUDe','Window_BattleLog_performActionStart','hNyYi','XPSpriteYLocation','freezeMotion','FrontViewSelect','changeWeather','process_VisuMZ_BattleCore_Notetags','isCancelled','meIXQ','updateAction','VYQDd','%1StartActionJS','alphabetic','HxxID','PreStartTurnJS','_motionCount','itemWindowRect','vWwLV','NameOffsetY','onEscapeSuccess','stepFlinch','ysEMH','WRuWs','_targetIndex','NWDom','autoBattleWindowRect','OiQQV','CmdTextAlign','magicReflection','ActSeq_DB_DragonbonesMotionAni','nLlOA','gNxDO','ygLea','remove','revealNewWeaknesses','playEnemyDamage','XZSnG','clearResult','onBattleStartBattleCore','MhaYD','xLmfY','MP_Rate','_helpWindow','cEpec','YWvJT','_activeWeaponSlot','dying','Scene_Battle_startActorSelection','processDefeat','boZIJ','adjustPosition_ScaleToFit','motionSpeed','Scene_Battle_commandFight','Game_Temp_requestAnimation','setActiveWeaponSlot','moveBattlerHomeDistance','CWgKF','initElementStatusCore','svBattlerAnchorX','width','_growY','clearOnceParallelInterpreters','maxItems','HelpItem','OYvqd','addText','push','CopyCombatLog','currentSymbol','skew','removeAnimationFromContainer','isBattleRefreshRequested','isGrowing','Targets2','updateHomeMove','dead\x20friends','regenerateAll','createUIContainer','ActSeq_Camera_FocusTarget','battleEnd','eBqve','DDFPr','_growWholeDuration','join','_actorWindow','StatusWindowAttachmentBackOffsetY','ActSeq_ChangeSkew','isTurnBased','addChildAt','Sprite_Actor_setBattler','registerDefeatedEnemy','ActSeq_BattleLog_PushBaseLine','ActSeq_Mechanics_CustomDmgFormula','88CMFrvN','Spriteset_Battle_update','helpWindowRectBorderStyle','moveBattlerDistance','ShowRemovedState','Window_Options_addGeneralOptions','TOkRf','isBusy','VisuMZ_1_ElementStatusCore','checkBattleEnd','includes','HP_Flat','PostDamage%1JS','callUpdateHelp','drawItemStatusListStyle','Game_Action_isForRandom','uxRtF','BattleManager_updatePhase','ZVWuf','NrkkQ','EFFECT_COMMON_EVENT','NameFontSize','BattleCore','applyImmortal','sleep','ActSeq_Angle_Reset','wqbVk','applySoftDamageCap','iSCJH','itemEffectAddAttackState','displayTpDamage','fOeco','text','VgVRE','BdKtC','selectNextCommand','ShowCosts','isActiveTpb','DefaultDamageStyle','Window_ActorCommand_initialize','VisuMZ_0_CoreEngine','isAnyoneJumping','setCursorRect','NameAlwaysVisible','\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Declare\x20Arguments\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20user\x20=\x20arguments[0];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20skill\x20=\x20arguments[1];\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20a\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20const\x20b\x20=\x20user;\x0a\x20\x20\x20\x20\x20\x20\x20\x20let\x20visible\x20=\x20true;\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Process\x20Code\x0a\x20\x20\x20\x20\x20\x20\x20\x20try\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20%1\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x20catch\x20(e)\x20{\x0a\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20\x20if\x20($gameTemp.isPlaytest())\x20console.log(e);\x0a\x20\x20\x20\x20\x20\x20\x20\x20}\x0a\x0a\x20\x20\x20\x20\x20\x20\x20\x20//\x20Return\x20Value\x0a\x20\x20\x20\x20\x20\x20\x20\x20return\x20visible;\x0a\x20\x20\x20\x20','TcsoP','adjustFlippedBattlefield','ActSeq_Movement_WaitForJump','DZxgo','deadMembers','getEnemyIdWithName','revertTpbCachedActor','qaeyX','updateStyleOpacity','isAtbChargingState','pTJFO','ActSeq_BattleLog_AddText','DisplayAction','BattleManager_startBattle','mtcyR','jXqXz','-%1\x20MP','_callSceneOptions','GlcMu','statusWindowRectBorderStyle','uxMJE','_motion','Window_BattleLog_displayFailure','placeTimeGauge','split','PostApply%1JS','kOGSX','FlinchDistanceY','callOptions','PreEndTurnJS','evalDamageFormula','RrZTI','diXMQ','Parse_Notetags_TraitObjects','_growX','_regionBattleback2','Spriteset_Battle_createBattleField','Window_BattleLog_displayMiss','updateOnceParallelInterpreters','BattleManager_endAction','Sprite_Battler_updatePosition','process_VisuMZ_BattleCore_PluginParams','Game_Action_needsSelection','displayRemovedStates','JPMpF','isActionSelectionValid','IJgAd','2477144ZMlxsD','XAilb','_skillWindow','createBattleField','glitch','WaitForJump','attackMotions','ickJm','active','close','updateVisibility','Game_Action_itemEffectAddAttackState','debuffAdd','YgYTV','apQbP','applyAngleChange','setActionState','TpbGaugeOffsetX','string','XAFsM','_createCursorArea','xMtxf','isHidden','CriticalHitFlat','createEnemyNames','drawText','Window_ActorCommand_setup','Window_BattleLog_popupDamage','isChanting','message1','battleZoom','Sprite_Battler_setBattler','VisuMZ_4_CombatLog','SSsTa','isForFriend','1:1','QWcpH','lNtcI','clearRect','Zprfy','TP_Flat','qlXVI','max','ksNiP','spell','battleUIOffsetX','bRcBw','cancelActorInput','requestMotionRefresh','WIgUn','isAutoBattleCommandAdded','performDamage','centerFrontViewSprite','canInput','IZLTN','Window_BattleLog_performSubstitute','WaitCount1','HfDIZ','Game_Map_encounterList','updateBattleProcess','commandFight','hpHealingFmt','enemyNames','PTfrs','Intensity','updateWeather','XPActorCommandLines','IxfAv','uiMenuStyle','kHpOY','Window_BattleLog_performEvasion','setupMotionBlurImpactFilter','ActionSkillMsg2','zGpXA','battleCoreTpbMainPhase','updateSpin','height','ApplyImmortal','FUtqt','Game_Battler_performDamage','removeAnimation','DoHDP','ActSeq_Zoom_WaitForZoom','JS\x20%1START\x20ACTION','isFloating','actionBattleCoreJS','adjustPosition','mFNeV','Sprite_Enemy_initVisibility','isForFriendBattleCore','isFlipped','Game_Action_isForOpponent','_back2Sprite','tpbCommandFight','NameAttachStateIcon','ATBXN','nUJVR','DamageRate','SrWFr','rzygF','processAnimationRequests','IpJPw','VisuMZ_3_ActSeqCamera','ActSeqImpact','gainCurrentActionsETB','prxYT','OMLNJ','StatusWindowSkinFilename','createActors','alive\x20battlers\x20not\x20user','POST-','_forcing','popupDamage','Window_BattleLog_performRecovery','addCommand','ActSeq_Mechanics_BoostPointsStoreData','oYYvl','jsGjK','ActSeq_Impact_Negative','updatePositionBattleCore','Window_BattleLog_popBaseLine','PreRegenerateJS','command119','process_VisuMZ_BattleCore_jsFunctions','xRWEN','wYpjh','getNextDamagePopup','setLastPluginCommandInterpreter','HlPmm','thrust','skill','callNextMethod','onBattleEnd','CastAnimation','applyVariance','FaceAway','parse','addOnceParallelInterpreter','PostDamageAsUserJS','enemyId','startBattle','battleAngle','destroy','FUwCo','_offsetX','loadBitmap','dataId','focus','jump','nfIJe','BindCommonEventKeysForObj','JS\x20%1DAMAGE\x20%2','createActionSequenceProjectile','changeCtbCastTime','ISxOb','DefeatEvent','boxWidth','alive\x20opponents\x20not\x20target','setupBattleback','ActSeq_Movement_Skew','abs','mainSprite','expRate','gainCurrentActionsFTB','head','performAction','_battler','getWtypeIdWithName','Scale','_preBattleCommonEvent','AntiTintUiElements','OTkUE','QkNjS','Settings','arRedFlat','StyleName','_baseX','xjvHh','Scene_Battle_partyCommandWindowRect','tbreg','Parse_Notetags_Targets','JS\x20%1START\x20BATTLE','NameLegacy','occasion','isInputting','jIGlu','requestDragonbonesAnimation','Game_BattlerBase_refresh','charging','_currentAngle','updateBorderStyle','subject','mbYVR','ActSeq_Zoom_Reset','Sprite_Battler_damageOffsetY','QoL','updateEffectContainers','skills','ShowReflect','collapseType','_linkedSprite','finishActorInput','cepqr','zQimA','resetBreakShield','getBattlePortraitOffsetX','Scene_Battle_logWindowRect','_battleLayoutStyle','PreDamageAsUserJS','LwmJv','ActSeq_Weapon_NextActiveWeapon','cLLfT','shift','hCypG','playOnceParallelTroopPage','VisuMZ_3_BoostAction','bind','StatusWindowAttachmentFrontOffsetY','command339','ConvertActionSequenceTarget','WaitForNewLine','DualWield','Window_BattleStatus_drawItemImage','basicGaugesY','_floatHeight','HitFlat','nameY','isAnyProjectilePresent','isETB','_battlePortrait','KHIqI','zoomDuration','windowAreaHeight','fjxop','JS\x20%1START\x20TURN','attackAnimationId1','makeBattleCommand','displayAction','damageFlat','opponentsUnit','partyCommandWindowRect','drawSingleSkillCost','BattleManager_checkBattleEnd','_scene','addFightCommand','cBMHt','isAutoBattleCommandEnabled','ActSeq_Animation_AttackAnimation2','MyYOx','VarianceFormulaJS','isPhysical','border','ateyr','nidEi','ParseWeaponNotetags','Item-%1-%2','CalcEscapeRaiseJS','VariableID','applyGlobalCommonEventNotetags','ActSeq_Impact_ShockwaveCenterTargets','PostEndTurnJS','refreshDimmerBitmap','PreDamageAsTargetJS','setBattleAngle','PostApplyAsTargetJS','LfIVv','_back1Sprite','textSizeEx','QOmNq','Game_Action_setGuard','ebCcS','Ooeds','uiInputPosition','makeDeepCopy','_forcedBattlers','bTSvo','nWpRR','setupZoomBlurImpactFilter','Sprite_Actor_updateShadow','refresh','selectNextCommandTpb','isNonSubmenuCancel','makeActionListAutoAttack','performEvasion','loadWindowskin','Game_Action_apply','STRUCT','tvTMx','applyResultSwitches','Scene_Battle_createCancelButton','_targetSkewY','ESCAPE','PrioritySortActors','updateShadow','PPWIk','isBattleTest','setCustomDamageFormula','type','doesPageHaveOnceParallelStart','applyForcedGameTroopSettingsBattleCore','QrOfM','createHelpWindow','bEXus','scope','zLRPQ','makeTargetSprites','alterBreakShield','loadBattleback2','_skewWholeDuration','onAngleEnd','optDisplayTp','addOptionsCommand','ParseArmorNotetags','bkQSR','Window_BattleLog_performActionEnd','dimColor2','clearFreezeMotionForWeapons','battleLayoutStyle','XHxYx','GdWgm','ODtvG','%1EndBattleJS','DistanceX','updateJump','WaitForCamera','checkTpbInputClose','uHBym','measureTextWidth','MaxLines','AttackAnimation','process_VisuMZ_BattleCore_CreateRegExp','physical','AGI','createAutoBattleWindow','_battlerName','adjustWeaponSpriteOffset','SideviewSelect','logActionList','Scene_Map_initializeAfter','evalDamageFormulaBattleCore','481264BLstXM','ScZCS','ActSeq_Camera_FocusPoint','ShowPortraitsBorderStyle','ActSeq_Mechanics_HpMpTp','changeAtbChargeTime','battlerShadowScaleY','alive\x20enemies\x20not\x20user','Sprite_Actor_createStateSprite','_flashDuration','command301','performTpbActiveCheckSwitch','initBattlePortrait','SkillsStatesCore','setActorHome','makeActions','VisuMZ_1_MainMenuCore','dDFft','shouldPopupDamage','nxlMj','turn','floor','uxfnK','_commonEventKey','EGEiQ','EscapeFail','autoBattleAtStart','YLWjm','makeCommandList','sliceMin','PopupOffsetX','BattleEndEvent','_targetGrowY','icon','battleback2Name','clearBattleCoreData','fNFXu','getMenuImage','log','MotionSpeed','process_VisuMZ_BattleCore_PreBattleCommonEvent','open','addAttackCommand','fiwUE','stateMotionIndex','_animation','PartyCmd','CommandVisible','ibduo','EfliX','_spriteset','_backAttachmentSprite','Scene_Map_updateCallMenu','command283','Sprite_Actor_moveToStartPosition','aPsUS','battlerShadowScaleX','qaIOC','GrWTh','some','JS\x20%1END\x20BATTLE','isBattlerFlipped','YcuQW','innerHeight','Vsnnk','Game_Battler_makeSpeed','Point','mpDamageFmt','softDamageCapRate','CGZSR','Game_Battler_onBattleStart','ZmzcB','Game_Interpreter_updateWaitMode','alignBattleCoreDamageSprite','YtTJg','drawItemImageXPStyle','CmdIconAutoBattle','ActSeq_Horror_Clear','placeActorName','updateAttachmentSprites','Game_Action_makeTargets','ntRID','TextColor','updateBitmap','reserveCommonEvent','checkSceneBattleTransitionable','createMiss','UgIMt','ReflectPlayback','alterType','flashColor','isAutoBattle','frontviewSpriteY','hhwDA','bgType','resetResultSwitches','battleFloat','showEnemyAttackAnimation','PreStartActionJS','WNxWm','initMembers','weapons','updateForceAction','createAnimationContainer','hpDamage','Action\x20Sequence\x20Impact\x20needs\x20an\x20update!','CkaoT','performAttack','_damageContainer','inBattle','ActSeq_BattleLog_DisplayAction','StepDistanceY','displayChangedBuffs','ActSeq_Motion_WaitMotionFrame','battleStatusWindowAnimationContainer','text\x20target','drawItemImagePortraitStyle','PostDamageAsTargetJS','_growEasing','Game_Actor_makeActionList','createEffectActionSet','_branch','isLearnedSkill','validTargets','ShowEnemyGauge','applyFreezeMotionFrames','lJuab','_skewX','preparePartyRefresh','removeChild','getNextSubject','NWudB','qKuur','setSkill','battleback1Name','SeAbM','getBattlePortraitFilename','StatusWindowAttachmentFrontOffsetX','1256LALEYv','mVxYK','_dragonbonesSpriteContainer','ActSeq_Impact_ZoomBlurPoint','BattleManager_onEncounter','XjeIJ','_floatEasing','slice','ActSeq_Movement_FacePoint','_tpbState','SqkgX','AutoBattleCancel','Game_Actor_equips','EasingType','displayCurrentState','qqIgU','addBuff','performMoveToPoint','SRiGk','Damage','EgCib','OOyvC','vEPHn','#%1','effect','CheckMapBattleEventValid','resetFontSettings','displayReflection','statusWindowRectXPStyle','HvoMh','position','fontSize','xejZe','_battleField','redraw','isDying','clearHorrorEffects','messageSpeed','Game_Action_itemEffectAddNormalState','MotionIdle','setBattleCameraTargets','CriticalHitRateJS','Sprite_Battler_setHome','createAllWindows','VisuMZ_2_DragonbonesUnion','HelpOptions','Sprite_Enemy_updateCollapse','setAttack','LHkGk','attackAnimationId2','ActSeq_Impact_MotionTrailCreate','hDixx','Scene_ItemBase_applyItem','ParseEnemyNotetags','refreshMotion','isChangingOpacity','TimeScale','Sprite_Battleback_adjustPosition','isItemCommandEnabled','setupRgbSplitImpactFilter','kzUbo','animationShouldMirror','clearElementChanges','performFlinch','AutoBattleRect','isOptionsCommandEnabled','_jumpWholeDuration','sortEnemies','_currentActor','hwyCt','canBattlerMove','isForRandom','rHWwk','_cancelButton','setBattleZoom','onEncounterBattleCore','BattleManager_cancelActorInput','lgPJV','VisuMZ_4_BreakShields','Game_Battler_performActionStart','_lastEnemy','formula','startMotion','_tpbSceneChangeCacheActor','createTroopNote','gjOsT','setBattlerFlip','ORLWu','SrfCV','VariableDmg','_tempEquipCheck','fittingHeight','sqDkU','BattleCmdList','createEnemies','Window_PartyCommand_initialize','toString','isMagicSkill','createPartyCommandWindowBattleCore','repeatTargets','forceEscapeSprite','Name','_subject','kKFek','wholeActionSet','ActSeq_Horror_GlitchRemove','performSubstitute','splice','Exploited','SNkbe','PARTY','lukEffectRate','sideview_ui','_eventId','isQueueOptionsMenu','sLoLl','stepBack','allBattleMembers','YiJpL','createBattleUIOffsetX'];_0xbbda=function(){return _0x410ccc;};return _0xbbda();}function Sprite_HpGauge(){const _0x55ddc8=_0x3ffb9d;this[_0x55ddc8(0xacd)](...arguments);}Sprite_HpGauge[_0x3ffb9d(0xb66)]=Object[_0x3ffb9d(0x3c7)](Sprite_Gauge[_0x3ffb9d(0xb66)]),Sprite_HpGauge[_0x3ffb9d(0xb66)]['constructor']=Sprite_HpGauge,Sprite_HpGauge['prototype'][_0x3ffb9d(0xacd)]=function(){const _0x26a93f=_0x3ffb9d;Sprite_Gauge[_0x26a93f(0xb66)][_0x26a93f(0xacd)][_0x26a93f(0x73d)](this);},Sprite_HpGauge[_0x3ffb9d(0xb66)][_0x3ffb9d(0x354)]=function(){return 0x0;},Sprite_HpGauge[_0x3ffb9d(0xb66)]['redraw']=function(){const _0xe2a2fc=_0x3ffb9d;this['bitmap']['clear']();const _0x57a7c7=this[_0xe2a2fc(0x380)]();!isNaN(_0x57a7c7)&&this[_0xe2a2fc(0x48f)]();};function Sprite_EnemyName(){const _0x2c5443=_0x3ffb9d;this[_0x2c5443(0xacd)](...arguments);}Sprite_EnemyName[_0x3ffb9d(0xb66)]=Object[_0x3ffb9d(0x3c7)](Sprite_Name['prototype']),Sprite_EnemyName['prototype']['constructor']=Sprite_EnemyName,Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)]=function(){const _0x1ac188=_0x3ffb9d;Sprite_Name['prototype']['initialize'][_0x1ac188(0x73d)](this),this[_0x1ac188(0xbb9)]();},Sprite_EnemyName[_0x3ffb9d(0xb66)]['initMembers']=function(){const _0x3bf35e=_0x3ffb9d;Sprite_Name[_0x3bf35e(0xb66)][_0x3bf35e(0xa0c)][_0x3bf35e(0x73d)](this),this[_0x3bf35e(0x430)]=0x0,this['_linkedSprite']=null,this[_0x3bf35e(0xab2)]['x']=0.5,this[_0x3bf35e(0xab2)]['y']=0x0;},Sprite_EnemyName[_0x3ffb9d(0xb66)]['createAttachedSprites']=function(){const _0x4d4b37=_0x3ffb9d;VisuMZ[_0x4d4b37(0x80e)]['Settings'][_0x4d4b37(0x5e5)][_0x4d4b37(0x8b2)]&&(_0x4d4b37(0xb65)==='wgYTh'?_0x499a58=_0x2d9f1b>=_0x5dbd7e?_0x417176:_0x31d942:(this['_stateIconSprite']=new Sprite_StateIcon(),this[_0x4d4b37(0x237)](this[_0x4d4b37(0x69f)])));},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2f6)]=function(){const _0x49e1af=_0x3ffb9d;return Graphics[_0x49e1af(0x8f0)];},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1c0)]=function(){const _0x57918d=_0x3ffb9d;return this['_lineHeight']=this[_0x57918d(0x50a)]||Window_Base[_0x57918d(0xb66)]['lineHeight']()||0x24,this[_0x57918d(0x50a)]*0x4;},Sprite_EnemyName['prototype'][_0x3ffb9d(0xa51)]=function(){const _0x24c279=_0x3ffb9d;return VisuMZ['BattleCore'][_0x24c279(0x901)][_0x24c279(0x5e5)][_0x24c279(0x80d)]||$gameSystem[_0x24c279(0x2e8)]();},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x747)]=function(_0x41dc5c){const _0x500491=_0x3ffb9d;this[_0x500491(0x91c)]=_0x41dc5c;},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)]=function(){const _0x33ec8b=_0x3ffb9d;Sprite_Name[_0x33ec8b(0xb66)]['update'][_0x33ec8b(0x73d)](this),this[_0x33ec8b(0x6b1)](),this[_0x33ec8b(0x712)](),this['updateAttachedSprites'](),this[_0x33ec8b(0x1a2)]();},Sprite_EnemyName[_0x3ffb9d(0xb66)]['redraw']=function(){const _0xab0c0c=_0x3ffb9d;this[_0xab0c0c(0x3dc)]=undefined;const _0x593b3b=this['name'](),_0x4a198d=this[_0xab0c0c(0x2f6)](),_0x55e41d=Window_Base[_0xab0c0c(0xb66)][_0xab0c0c(0x230)]();this['setupFont'](),this['bitmap'][_0xab0c0c(0x75e)](),this['bitmap'][_0xab0c0c(0x86d)](_0x593b3b,0x0,0x0,_0x4a198d,_0x55e41d,'center');},Sprite_EnemyName['prototype'][_0x3ffb9d(0x6b1)]=function(){const _0x5cd48e=_0x3ffb9d;if(!this[_0x5cd48e(0x91c)])return;this[_0x5cd48e(0x8fa)]!==this[_0x5cd48e(0x91c)][_0x5cd48e(0x8fa)]&&this[_0x5cd48e(0x2eb)](this['_linkedSprite']['_battler']);},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x712)]=function(){const _0x53fb80=_0x3ffb9d;if(!this[_0x53fb80(0x91c)])return;this['_lineHeight']=this[_0x53fb80(0x50a)]||Window_Base[_0x53fb80(0xb66)][_0x53fb80(0x230)](),this['x']=this['_linkedSprite']['_baseX'],this['y']=this[_0x53fb80(0x91c)]['_baseY']-this[_0x53fb80(0x50a)]*0.5;const _0x161d7e=VisuMZ[_0x53fb80(0x80e)]['Settings'][_0x53fb80(0x5e5)];this['x']+=_0x161d7e[_0x53fb80(0x457)]||0x0,this['y']+=_0x161d7e[_0x53fb80(0x7ad)]||0x0;},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x42f)]=function(){const _0x22a561=_0x3ffb9d;this[_0x22a561(0x213)]();},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x213)]=function(){const _0x129504=_0x3ffb9d;if(!this['_stateIconSprite'])return;this['_battler']!==this[_0x129504(0x69f)]['_battler']&&this[_0x129504(0x69f)][_0x129504(0x2eb)](this[_0x129504(0x8fa)]);const _0x192196=this['textWidth']();this[_0x129504(0x50a)]=this[_0x129504(0x50a)]||Window_Base['prototype'][_0x129504(0x230)](),this[_0x129504(0x69f)]['x']=Math['round']((_0x192196+ImageManager[_0x129504(0x797)])/0x2)+0x8,this[_0x129504(0x69f)]['y']=this[_0x129504(0x50a)]/0x2;const _0x15d489=VisuMZ[_0x129504(0x80e)][_0x129504(0x901)][_0x129504(0x5e5)];this[_0x129504(0x69f)]['x']+=_0x15d489[_0x129504(0xba9)]||0x0,this[_0x129504(0x69f)]['y']+=_0x15d489[_0x129504(0x449)]||0x0;},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1a2)]=function(){const _0x4f6a20=_0x3ffb9d,_0x424abd=this[_0x4f6a20(0x756)]();if(_0x424abd&&this['opacity']<0xff)this[_0x4f6a20(0x430)]+=0x10;else!_0x424abd&&this['opacity']>0x0&&('ErCcu'!==_0x4f6a20(0x313)?_0x1ec6fb[_0x4f6a20(0x4b3)]():this['opacity']-=0x10);},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x756)]=function(){const _0x376858=_0x3ffb9d;if(this[_0x376858(0x5c2)]())return![];else{if(!this[_0x376858(0x8fa)]){if(_0x376858(0x6ac)!==_0x376858(0x6ac))_0x49672b-=this[_0x376858(0x934)],_0x4fec98-=this[_0x376858(0x415)];else return![];}else{if(this[_0x376858(0x8fa)][_0x376858(0xb78)]())return _0x376858(0x32c)===_0x376858(0x32c)?![]:_0xd9927[_0x376858(0x80e)][_0x376858(0x807)][_0x376858(0x73d)](this);else{if(!this['_battler'][_0x376858(0xc10)]())return![];else{if(this[_0x376858(0x344)]()){if('CLUmw'===_0x376858(0x812)){const _0x2536db=_0x68552[_0x376858(0x80e)][_0x376858(0x9bf)][_0x519319],_0x24ebd2={'code':0x2c,'dataId':_0x2536db,'value1':0x1,'value2':0x0};_0x3a2b35['effects'][_0x376858(0x7dd)](_0x24ebd2);}else return!![];}else{if(this[_0x376858(0x68b)]())return!![];else{if(this[_0x376858(0x46d)]()){if(_0x376858(0x949)===_0x376858(0x765)){const _0x4d06ab=_0x2fd367['regionId'](_0x1b21d['x'],_0x5dd0cd['y']);if(this[_0x376858(0x6ce)]&&this['_regionBattleback1'][_0x4d06ab])return this['_regionBattleback1'][_0x4d06ab];}else return!![];}else{if(this['opacity']>0x0)return _0x376858(0xb4d)===_0x376858(0xb4d)?![]:this[_0x376858(0x848)][_0x256243];}}}}}}}},Sprite_EnemyName[_0x3ffb9d(0xb66)]['isAlwaysHidden']=function(){const _0x2662b9=_0x3ffb9d;return VisuMZ[_0x2662b9(0x80e)][_0x2662b9(0x901)]['Enemy'][_0x2662b9(0x2c5)];},Sprite_EnemyName[_0x3ffb9d(0xb66)]['compatibilityVisible']=function(){return![];},Sprite_EnemyName[_0x3ffb9d(0xb66)]['isAlwaysVisible']=function(){const _0x551704=_0x3ffb9d;return VisuMZ['BattleCore'][_0x551704(0x901)][_0x551704(0x5e5)][_0x551704(0x823)];},Sprite_EnemyName['prototype'][_0x3ffb9d(0x46d)]=function(){const _0x111448=_0x3ffb9d;if(VisuMZ[_0x111448(0x80e)][_0x111448(0x901)][_0x111448(0x5e5)][_0x111448(0x643)]){if('YWvJT'!==_0x111448(0x7c7))_0x423267[_0x111448(0x80e)]['Scene_Battle_initialize']['call'](this),this[_0x111448(0x7d8)]();else return this[_0x111448(0x8fa)][_0x111448(0x4d8)]();}else return SceneManager['_scene']['_enemyWindow']&&SceneManager[_0x111448(0x947)][_0x111448(0xadb)][_0x111448(0x85c)]&&SceneManager[_0x111448(0x947)][_0x111448(0xadb)][_0x111448(0x24f)][_0x111448(0x802)](this[_0x111448(0x8fa)]);},Sprite_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x64c)]=function(){const _0x33a12c=_0x3ffb9d;if(!this[_0x33a12c(0x8fa)])return 0x0;if(this[_0x33a12c(0x3dc)])return this[_0x33a12c(0x3dc)];const _0x479ae=this[_0x33a12c(0x453)]();return this[_0x33a12c(0x483)](),this['_cacheTextWidth']=this[_0x33a12c(0x6a0)]['measureTextWidth'](_0x479ae)||0x1,this['_cacheTextWidth'];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xa6b)]=Sprite_Battleback[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8aa)],Sprite_Battleback[_0x3ffb9d(0xb66)]['adjustPosition']=function(){const _0x2f4e40=_0x3ffb9d,_0x1f6a32=VisuMZ['BattleCore'][_0x2f4e40(0x901)][_0x2f4e40(0xbfd)];if(!_0x1f6a32)return VisuMZ[_0x2f4e40(0x80e)][_0x2f4e40(0xa6b)][_0x2f4e40(0x73d)](this);const _0x3a30df=String(_0x1f6a32[_0x2f4e40(0x4b1)])||'MZ';switch(_0x3a30df){case'MZ':VisuMZ[_0x2f4e40(0x80e)][_0x2f4e40(0xa6b)]['call'](this);break;case _0x2f4e40(0x877):this[_0x2f4e40(0x340)]();break;case _0x2f4e40(0x556):this[_0x2f4e40(0x7cd)]();break;case _0x2f4e40(0x21a):this['adjustPosition_ScaleDown']();break;case _0x2f4e40(0x40a):this[_0x2f4e40(0x4e6)]();break;}},Sprite_Battleback[_0x3ffb9d(0xb66)][_0x3ffb9d(0x340)]=function(){const _0x547f32=_0x3ffb9d;this['width']=Graphics[_0x547f32(0x7d6)],this[_0x547f32(0x8a0)]=Graphics[_0x547f32(0x8a0)];const _0x25ac6b=0x1;this['scale']['x']=_0x25ac6b,this[_0x547f32(0x530)]['y']=_0x25ac6b,this['x']=0x0,this['y']=0x0;},Sprite_Battleback[_0x3ffb9d(0xb66)]['adjustPosition_ScaleToFit']=function(){const _0xead1da=_0x3ffb9d;this['width']=Graphics[_0xead1da(0x7d6)],this[_0xead1da(0x8a0)]=Graphics[_0xead1da(0x8a0)];const _0x5b4a3c=this[_0xead1da(0x7d6)]/this[_0xead1da(0x6a0)][_0xead1da(0x7d6)],_0x44f4a8=this['height']/this[_0xead1da(0x6a0)][_0xead1da(0x8a0)],_0x39fc3f=Math[_0xead1da(0x87e)](_0x5b4a3c,_0x44f4a8);this[_0xead1da(0x530)]['x']=_0x39fc3f,this[_0xead1da(0x530)]['y']=_0x39fc3f,this['x']=(Graphics[_0xead1da(0x7d6)]-this[_0xead1da(0x7d6)])/0x2,this['y']=Graphics[_0xead1da(0x8a0)]-this[_0xead1da(0x8a0)];},Sprite_Battleback['prototype'][_0x3ffb9d(0x5eb)]=function(){const _0x59e39b=_0x3ffb9d;this[_0x59e39b(0x7d6)]=Graphics[_0x59e39b(0x7d6)],this[_0x59e39b(0x8a0)]=Graphics[_0x59e39b(0x8a0)];const _0x309338=Math[_0x59e39b(0x775)](0x1,this[_0x59e39b(0x7d6)]/this[_0x59e39b(0x6a0)][_0x59e39b(0x7d6)]),_0x46571f=Math[_0x59e39b(0x775)](0x1,this[_0x59e39b(0x8a0)]/this[_0x59e39b(0x6a0)][_0x59e39b(0x8a0)]),_0x57810b=Math['max'](_0x309338,_0x46571f);this[_0x59e39b(0x530)]['x']=_0x57810b,this[_0x59e39b(0x530)]['y']=_0x57810b,this['x']=(Graphics['width']-this[_0x59e39b(0x7d6)])/0x2,this['y']=Graphics['height']-this[_0x59e39b(0x8a0)];},Sprite_Battleback[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4e6)]=function(){const _0x38b757=_0x3ffb9d;this[_0x38b757(0x7d6)]=Graphics[_0x38b757(0x7d6)],this[_0x38b757(0x8a0)]=Graphics[_0x38b757(0x8a0)];const _0x29ee5e=Math[_0x38b757(0x87e)](0x1,this[_0x38b757(0x7d6)]/this['bitmap'][_0x38b757(0x7d6)]),_0x53966e=Math['max'](0x1,this[_0x38b757(0x8a0)]/this[_0x38b757(0x6a0)]['height']),_0x27304d=Math[_0x38b757(0x87e)](_0x29ee5e,_0x53966e);this[_0x38b757(0x530)]['x']=_0x27304d,this[_0x38b757(0x530)]['y']=_0x27304d,this['x']=(Graphics[_0x38b757(0x7d6)]-this['width'])/0x2,this['y']=Graphics[_0x38b757(0x8a0)]-this[_0x38b757(0x8a0)];},Spriteset_Battle[_0x3ffb9d(0x1fd)]=VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x901)][_0x3ffb9d(0x190)][_0x3ffb9d(0x8fe)]??!![],Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8ae)]=function(){if(!$gameSystem['isSideView']())return![];return![];},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x199)]=function(){return 0x0;},Spriteset_Battle['prototype'][_0x3ffb9d(0x666)]=function(){return 0x0;},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x1cd)]=Spriteset_Battle['prototype'][_0x3ffb9d(0x306)],Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x306)]=function(){const _0x2f81c6=_0x3ffb9d;VisuMZ['BattleCore'][_0x2f81c6(0x1cd)][_0x2f81c6(0x73d)](this),this[_0x2f81c6(0x459)](),this['createEnemyNames']();},VisuMZ['BattleCore'][_0x3ffb9d(0x7f9)]=Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)],Spriteset_Battle['prototype']['update']=function(){const _0x5cfd03=_0x3ffb9d;VisuMZ['BattleCore']['Spriteset_Battle_update'][_0x5cfd03(0x73d)](this),this['updateUiContainerPosition'](),this[_0x5cfd03(0x895)]();},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x459)]=function(){const _0x5c15a9=_0x3ffb9d;this[_0x5c15a9(0xbb6)]=new Weather(),this[_0x5c15a9(0xa53)][_0x5c15a9(0x237)](this['_weather']);},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x895)]=function(){const _0x1be351=_0x3ffb9d;this[_0x1be351(0xbb6)]['type']=$gameScreen[_0x1be351(0x5c6)](),this[_0x1be351(0xbb6)][_0x1be351(0xbcd)]=$gameScreen[_0x1be351(0xb75)]();},Game_Interpreter[_0x3ffb9d(0xb66)]['command236']=function(_0x35df19){const _0x3c7e32=_0x3ffb9d;$gameScreen[_0x3c7e32(0x7a0)](_0x35df19[0x0],_0x35df19[0x1],_0x35df19[0x2]);if(_0x35df19[0x3])this[_0x3c7e32(0xb2d)](_0x35df19[0x2]);return!![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2e5)]=Game_Interpreter[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9dd)],Game_Interpreter[_0x3ffb9d(0xb66)]['command283']=function(_0x457915){const _0x509a7d=_0x3ffb9d;if(SceneManager[_0x509a7d(0x341)]()){if(_0x509a7d(0x851)==='JPMpF')return SceneManager[_0x509a7d(0x947)][_0x509a7d(0x9da)]['changeBattlebacks'](_0x457915[0x0],_0x457915[0x1]),!![];else _0x1cf73d+=_0x26328f[_0x509a7d(0x797)];}else{if(_0x509a7d(0x5b7)!==_0x509a7d(0x729))return VisuMZ[_0x509a7d(0x80e)]['Game_Interpreter_command283'][_0x509a7d(0x73d)](this,_0x457915);else _0x3ad4e5['prototype']['drawSkillCost'][_0x509a7d(0x73d)](this,_0x7a0bb0,_0x1fe75c,_0x4caecf,_0x227307);}},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2e6)]=function(_0x5eb265,_0x293d52){const _0x5976b3=_0x3ffb9d;_0x5eb265[_0x5976b3(0x6a0)]=_0x293d52;},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xaeb)]=function(_0x10a327,_0x4cde12){const _0x329045=_0x3ffb9d;_0x10a327=_0x10a327||'',_0x4cde12=_0x4cde12||'';_0x10a327===''&&_0x4cde12===''&&(_0x329045(0x4d7)!==_0x329045(0x4d7)?_0x321190+=(_0x3565e5[_0x329045(0x2a7)]()?-0x1:0x1)*_0x4ede93[_0x329045(0xc2d)]()/0x2:(_0x10a327=this['_back1Sprite'][_0x329045(0xa2e)](),_0x4cde12=this[_0x329045(0x8b0)]['battleback2Name']()));const _0x20e2aa=ImageManager[_0x329045(0x434)](_0x10a327),_0x51532e=ImageManager[_0x329045(0x987)](_0x4cde12);_0x20e2aa['addLoadListener'](this['updateBattlebackBitmap1'][_0x329045(0x92c)](this,this[_0x329045(0x95e)],this[_0x329045(0x8b0)],_0x20e2aa,_0x51532e));},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xac5)]=function(_0x52b519,_0x191157,_0x2b97fd,_0x31d9f){const _0x1e0b76=_0x3ffb9d;_0x31d9f['addLoadListener'](this[_0x1e0b76(0x713)][_0x1e0b76(0x92c)](this,_0x52b519,_0x191157,_0x2b97fd,_0x31d9f));},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x713)]=function(_0x285024,_0x425e44,_0x822b,_0x1af17f){const _0x5256ad=_0x3ffb9d;_0x285024[_0x5256ad(0x6a0)]=_0x822b,_0x425e44['bitmap']=_0x1af17f,_0x285024[_0x5256ad(0x8aa)](),_0x425e44[_0x5256ad(0x8aa)]();},VisuMZ['BattleCore'][_0x3ffb9d(0x849)]=Spriteset_Battle['prototype'][_0x3ffb9d(0x857)],Spriteset_Battle[_0x3ffb9d(0xb66)]['createBattleField']=function(){const _0x4b6dd3=_0x3ffb9d;VisuMZ[_0x4b6dd3(0x80e)][_0x4b6dd3(0x849)]['call'](this),this['createBattleFieldBattleCore']();},Spriteset_Battle['prototype'][_0x3ffb9d(0xb47)]=function(){const _0x338a71=_0x3ffb9d;this[_0x338a71(0x6c2)](),this[_0x338a71(0x7e8)](),this[_0x338a71(0xa0f)](),this[_0x338a71(0x48d)](),this[_0x338a71(0x826)]();},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6c2)]=function(){const _0x44bfdd=_0x3ffb9d;this[_0x44bfdd(0xb18)]=new Sprite(),this[_0x44bfdd(0xa53)][_0x44bfdd(0x237)](this['_battlerContainer']);},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa0f)]=function(){const _0x386a37=_0x3ffb9d;this[_0x386a37(0x687)]=new Sprite();if(Spriteset_Battle[_0x386a37(0x1fd)])this['addChild'](this[_0x386a37(0x687)]);else{if('lPyuo'!==_0x386a37(0x28c))this[_0x386a37(0xa53)][_0x386a37(0x237)](this['_animationContainer']);else{const _0x758dfc=_0x33caed[_0x386a37(0x8dc)]('['+_0x26cfd8['$1'][_0x386a37(0x1b7)](/\d+/g)+']');for(const _0x528a96 of _0x758dfc){if(_0x2bb0f5[_0x386a37(0x338)](_0x528a96))return!![];}return![];}}},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x48d)]=function(){const _0x14be05=_0x3ffb9d;this[_0x14be05(0xa14)]=new Sprite(),this['_damageContainer']['x']=this[_0x14be05(0xa53)]['x'],this[_0x14be05(0xa14)]['y']=this['_battleField']['y'],this[_0x14be05(0x237)](this[_0x14be05(0xa14)]);},Spriteset_Battle['prototype']['adjustFlippedBattlefield']=function(){const _0x5eadb5=_0x3ffb9d;if(!this[_0x5eadb5(0x8ae)]())return;this[_0x5eadb5(0xb18)][_0x5eadb5(0x530)]['x']=-0x1,this['_battlerContainer']['x']=this[_0x5eadb5(0xa53)][_0x5eadb5(0x7d6)],this['_uiContainer'][_0x5eadb5(0x530)]['x']=-0x1,this[_0x5eadb5(0xbca)]['x']=this['_battleField'][_0x5eadb5(0x7d6)],this[_0x5eadb5(0x687)][_0x5eadb5(0x530)]['x']=-0x1,this[_0x5eadb5(0x687)]['x']=this[_0x5eadb5(0xa53)]['width'],this[_0x5eadb5(0xa14)][_0x5eadb5(0x530)]['x']=-0x1,this[_0x5eadb5(0xa14)]['x']=this[_0x5eadb5(0xa53)]['x']+this[_0x5eadb5(0xa53)]['width'];},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa90)]=function(){const _0x1a8537=_0x3ffb9d;Imported[_0x1a8537(0x820)]&&this['coreEngineRepositionEnemies']()&&this[_0x1a8537(0x4f7)]();const _0x464c48=$gameTroop[_0x1a8537(0x794)](),_0x55fac6=[];for(const _0x279ca4 of _0x464c48){_0x55fac6['push'](new Sprite_Enemy(_0x279ca4));}_0x55fac6['sort'](this['compareEnemySprite']['bind'](this));for(const _0x5db8a9 of _0x55fac6){if(_0x1a8537(0x861)!==_0x1a8537(0x861)){if(!this[_0x1a8537(0x8c3)]&&this[_0x1a8537(0x913)]()[_0x1a8537(0xbb4)]())return![];if(this['isCustomBattleScope']())return!![];return typeof this['item']()[_0x1a8537(0x983)]==='string';}else this[_0x1a8537(0xb18)][_0x1a8537(0x237)](_0x5db8a9);}this[_0x1a8537(0x336)]=_0x55fac6;},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8c0)]=function(){const _0x5af3df=_0x3ffb9d;this['_actorSprites']=[];for(let _0x3b337f=0x0;_0x3b337f<$gameParty[_0x5af3df(0x5b8)]();_0x3b337f++){const _0x55c1ec=$gameParty[_0x5af3df(0xbf4)]()[_0x3b337f],_0x50adbc=new Sprite_Actor();_0x50adbc[_0x5af3df(0x6be)](_0x55c1ec),_0x50adbc[_0x5af3df(0x427)](_0x55c1ec),_0x50adbc[_0x5af3df(0x1e3)](),this[_0x5af3df(0x56a)][_0x5af3df(0x7dd)](_0x50adbc),this[_0x5af3df(0xb18)][_0x5af3df(0x237)](_0x50adbc);}},Spriteset_Battle[_0x3ffb9d(0xb66)]['createAnimationSprite']=function(_0x1afa9d,_0x40d532,_0x3ccb73,_0xae78cc){const _0x548ef3=_0x3ffb9d,_0x4ec996=this[_0x548ef3(0x1e5)](_0x40d532),_0x54d1fd=new(_0x4ec996?Sprite_AnimationMV:Sprite_Animation)(),_0x5935d8=this[_0x548ef3(0x985)](_0x1afa9d);if(this[_0x548ef3(0xa6f)](_0x1afa9d[0x0])){if(_0x548ef3(0xa87)!==_0x548ef3(0x69e))_0x3ccb73=!_0x3ccb73;else{const _0x5d0542=_0x35c64c[_0x548ef3(0x60e)](_0x481fa6['$1']);this[_0x548ef3(0x1b2)](_0x61fcb[_0x5d0542]);}}_0x54d1fd[_0x548ef3(0xb8d)]=_0x1afa9d,_0x54d1fd[_0x548ef3(0x2eb)](_0x5935d8,_0x40d532,_0x3ccb73,_0xae78cc),this[_0x548ef3(0xbaa)](_0x54d1fd);},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbaa)]=function(_0x293a78){const _0x13c4aa=_0x3ffb9d;if(this[_0x13c4aa(0x37f)](_0x293a78)){if(_0x13c4aa(0xb14)===_0x13c4aa(0xb14))this['battleStatusWindowAnimationContainer']()[_0x13c4aa(0x237)](_0x293a78);else{const _0x167856=_0x3a764c[_0x13c4aa(0x1a1)];_0x346670[_0x13c4aa(0xabb)][_0x167856]=new _0x2ae7df(_0x639b92);}}else this[_0x13c4aa(0x687)]['addChild'](_0x293a78);this['_animationSprites'][_0x13c4aa(0x7dd)](_0x293a78);},Spriteset_Battle['prototype']['isAnimationShownOnBattlePortrait']=function(_0x404c29){const _0x5a8fc4=_0x3ffb9d;if(!_0x404c29)return![];if(!_0x404c29[_0x5a8fc4(0x9d5)])return![];if(!_0x404c29[_0x5a8fc4(0xb8d)][0x0])return![];if(_0x404c29['targetObjects'][0x0][_0x5a8fc4(0x2bb)]&&!_0x404c29[_0x5a8fc4(0xb8d)][0x0][_0x5a8fc4(0x2bb)]())return![];if($gameSystem[_0x5a8fc4(0x6de)]())return![];if(!this['battleStatusWindowAnimationContainer']())return![];if(_0x404c29[_0x5a8fc4(0x4a3)]===Sprite_Animation){if(_0x404c29['_animation']['displayType']!==0x0)return![];}else{if(_0x404c29[_0x5a8fc4(0x4a3)]===Sprite_AnimationMV){if('KHIqI'!==_0x5a8fc4(0x93a))_0x2a2077=_0x3cb8f7(_0xfebba5['$1']),_0x2f41a7=_0x638e7e(_0x31470c['$2']);else{if(_0x404c29[_0x5a8fc4(0x9d5)][_0x5a8fc4(0xa50)]===0x3)return![];}}}return!![];const _0x6dd9b7=Window_BattleStatus[_0x5a8fc4(0xb66)][_0x5a8fc4(0x991)]();return['xp',_0x5a8fc4(0x68e)]['contains'](_0x6dd9b7);},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa1a)]=function(){const _0x2a25cd=_0x3ffb9d;if(!SceneManager[_0x2a25cd(0x947)])return null;if(!SceneManager[_0x2a25cd(0x947)][_0x2a25cd(0x1bb)])return null;if(!SceneManager[_0x2a25cd(0x947)][_0x2a25cd(0x1bb)][_0x2a25cd(0x1e6)])return null;return SceneManager[_0x2a25cd(0x947)][_0x2a25cd(0x1bb)][_0x2a25cd(0x1e6)];},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8a4)]=function(_0x2ceb1f){const _0x18a871=_0x3ffb9d;this[_0x18a871(0x7e1)](_0x2ceb1f);for(const _0x179b23 of _0x2ceb1f[_0x18a871(0xb8d)]){_0x179b23['endAnimation']&&_0x179b23['endAnimation']();}_0x2ceb1f[_0x18a871(0x8e2)]();},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7e1)]=function(_0x323d14){const _0x4ac4b6=_0x3ffb9d;this[_0x4ac4b6(0xab9)][_0x4ac4b6(0x7bc)](_0x323d14),this[_0x4ac4b6(0x37f)](_0x323d14)?this[_0x4ac4b6(0xa1a)]()[_0x4ac4b6(0xa29)](_0x323d14):this['_animationContainer'][_0x4ac4b6(0xa29)](_0x323d14);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xae7)]=Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x57b)],Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x57b)]=function(){const _0x1cc8c8=_0x3ffb9d;VisuMZ[_0x1cc8c8(0x80e)]['Spriteset_Battle_updateActors']['call'](this),this['updateBattlerContainer']();},Spriteset_Battle[_0x3ffb9d(0xb66)]['updateBattlerContainer']=function(){const _0x37b690=_0x3ffb9d;this[_0x37b690(0xb18)]['children'][_0x37b690(0x3e3)](this[_0x37b690(0x1ee)]['bind'](this)),this[_0x37b690(0x485)]();},Spriteset_Battle['prototype'][_0x3ffb9d(0x1ee)]=function(_0x93181f,_0x4ca1e9){const _0x3d48c2=_0x3ffb9d;if(VisuMZ[_0x3d48c2(0x80e)][_0x3d48c2(0x901)][_0x3d48c2(0x772)][_0x3d48c2(0x978)]){if(_0x93181f[_0x3d48c2(0x8fa)]&&_0x4ca1e9[_0x3d48c2(0x8fa)]){if(_0x3d48c2(0x398)===_0x3d48c2(0x398)){if(_0x93181f['_battler'][_0x3d48c2(0x2bb)]()&&_0x4ca1e9['_battler'][_0x3d48c2(0x2a7)]())return 0x1;else{if(_0x4ca1e9['_battler'][_0x3d48c2(0x2bb)]()&&_0x93181f[_0x3d48c2(0x8fa)][_0x3d48c2(0x2a7)]())return-0x1;}}else this[_0x3d48c2(0x847)]=this[_0x3d48c2(0xc18)],this[_0x3d48c2(0x7d7)]=this['_targetGrowY'];}}if(_0x93181f[_0x3d48c2(0x531)]!==_0x4ca1e9['_baseY'])return _0x93181f[_0x3d48c2(0x531)]-_0x4ca1e9[_0x3d48c2(0x531)];else{if(_0x3d48c2(0x608)!==_0x3d48c2(0x608))_0x5d7f07[_0x3d48c2(0x27b)](_0x3d48c2(0x73c));else return _0x4ca1e9[_0x3d48c2(0xbbd)]-_0x93181f[_0x3d48c2(0xbbd)];}},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x485)]=function(){const _0x1b46ae=_0x3ffb9d;if(!VisuMZ['BattleCore']['Settings'][_0x1b46ae(0x772)][_0x1b46ae(0xac1)])return;const _0x27aa6b=BattleManager[_0x1b46ae(0xa98)];if(_0x27aa6b){if(_0x27aa6b['isActor']()&&!$gameSystem[_0x1b46ae(0x6de)]())return;const _0x59bbe4=_0x27aa6b['battler']();if(_0x59bbe4&&_0x27aa6b[_0x1b46ae(0x2bb)]())this[_0x1b46ae(0xb18)]['addChild'](_0x59bbe4);}},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x669)]=function(){const _0x355147=_0x3ffb9d;for(const _0x51848f of $gameParty['aliveMembers']()){if(!_0x51848f)continue;if(!_0x51848f[_0x355147(0x491)]())continue;_0x51848f[_0x355147(0x491)]()[_0x355147(0xa96)]=!![],_0x51848f[_0x355147(0x491)]()[_0x355147(0xaab)]();}},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7e8)]=function(){const _0x1471a6=_0x3ffb9d;this[_0x1471a6(0xbca)]=new Sprite(),Spriteset_Battle[_0x1471a6(0x1fd)]?this['addChild'](this[_0x1471a6(0xbca)]):this[_0x1471a6(0xa53)]['addChild'](this[_0x1471a6(0xbca)]),SceneManager[_0x1471a6(0x947)][_0x1471a6(0xbca)]=this[_0x1471a6(0xbca)];},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x86c)]=function(){const _0x4f51c1=_0x3ffb9d;if(VisuMZ[_0x4f51c1(0x80e)][_0x4f51c1(0x901)][_0x4f51c1(0x5e5)][_0x4f51c1(0x90a)])return;this[_0x4f51c1(0x210)]=new Sprite(),BattleManager['addChildToUiContainer'](this['_enemyNameContainer']);for(const _0x1d1547 of this[_0x4f51c1(0x336)]){const _0x5263a3=new Sprite_EnemyName();this[_0x4f51c1(0x210)][_0x4f51c1(0x237)](_0x5263a3),_0x5263a3['linkSprite'](_0x1d1547);}},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x724)]=function(){const _0x321e9c=_0x3ffb9d;if(!this[_0x321e9c(0xa14)])return;if(!this[_0x321e9c(0xbca)])return;const _0x57148c=Spriteset_Battle['ANTI_TINT_UI']?this[_0x321e9c(0xa14)]['x']:0x0,_0x5e957a=Spriteset_Battle[_0x321e9c(0x1fd)]?this[_0x321e9c(0xa14)]['y']:0x0,_0x289944=Imported['VisuMZ_3_ActSeqCamera']?this[_0x321e9c(0xa53)]['x']:0x0,_0x92610c=Imported[_0x321e9c(0x8ba)]?this[_0x321e9c(0xa53)]['y']:0x0;this['_uiContainer']['x']=_0x57148c+_0x289944,this[_0x321e9c(0xbca)]['y']=_0x5e957a+_0x92610c;},BattleManager[_0x3ffb9d(0x2ee)]=function(_0x28af9b){const _0x54a124=_0x3ffb9d;if(!SceneManager['_scene']['_uiContainer'])return;SceneManager[_0x54a124(0x947)]['_uiContainer']['addChild'](_0x28af9b);},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7ff)]=function(){return![];},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x74e)]=function(){const _0x3b74e6=_0x3ffb9d;return this[_0x3b74e6(0x209)]()['some'](_0x26c500=>_0x26c500[_0x3b74e6(0x8a8)]());},Spriteset_Battle['prototype'][_0x3ffb9d(0x821)]=function(){const _0x190217=_0x3ffb9d;return this['battlerSprites']()[_0x190217(0x9e3)](_0x37595f=>_0x37595f['isJumping']());},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5cb)]=function(){const _0x27d023=_0x3ffb9d;return this[_0x27d023(0x209)]()[_0x27d023(0x9e3)](_0x4cc4e9=>_0x4cc4e9[_0x27d023(0x7e3)]());},Spriteset_Battle['prototype']['isAnyoneSkewing']=function(){const _0x40d477=_0x3ffb9d;return this[_0x40d477(0x209)]()[_0x40d477(0x9e3)](_0x2d8762=>_0x2d8762[_0x40d477(0x5ab)]());},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1ed)]=function(){const _0x2ed8d4=_0x3ffb9d;return this['battlerSprites']()['some'](_0x38389e=>_0x38389e[_0x2ed8d4(0xc2b)]());},Spriteset_Battle[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6a4)]=function(){const _0x498362=_0x3ffb9d;return this[_0x498362(0x209)]()[_0x498362(0x9e3)](_0x116c62=>_0x116c62[_0x498362(0xa69)]());},VisuMZ['BattleCore'][_0x3ffb9d(0x447)]=Window_ItemList['prototype']['maxCols'],Window_ItemList['prototype'][_0x3ffb9d(0x369)]=function(){const _0x37c313=_0x3ffb9d;if(SceneManager[_0x37c313(0x341)]()){if(_0x37c313(0x4a2)!==_0x37c313(0x4a2)){_0x513384[_0x37c313(0xb66)]['updateFrame'][_0x37c313(0x73d)](this);const _0x574b2d=this['mainSprite']()||this;if(!_0x574b2d)return;!_0x574b2d[_0x37c313(0x6a0)]&&(_0x574b2d[_0x37c313(0x6a0)]=new _0x55c841(this[_0x37c313(0x7d6)],this['height'])),this['_effectType']==='bossCollapse'?this[_0x37c313(0x3ff)][_0x37c313(0x452)](0x0,0x0,this[_0x37c313(0x3ff)][_0x37c313(0x7d6)],this[_0x37c313(0xb13)]):_0x574b2d[_0x37c313(0x452)](0x0,0x0,_0x574b2d[_0x37c313(0x6a0)][_0x37c313(0x7d6)],this['bitmap'][_0x37c313(0x8a0)]);}else{if(SceneManager[_0x37c313(0x947)][_0x37c313(0x991)]()===_0x37c313(0x94f)){if(_0x37c313(0x560)===_0x37c313(0x7a8))_0x3968f0[_0x37c313(0xb66)][_0x37c313(0x2a2)][_0x37c313(0x73d)](this),this[_0x37c313(0x42c)]('evade');else return VisuMZ['BattleCore']['Settings'][_0x37c313(0x190)][_0x37c313(0xb3e)];}else return VisuMZ[_0x37c313(0x80e)][_0x37c313(0x901)]['BattleLayout'][_0x37c313(0x70f)];}}else{if('VRoSy'===_0x37c313(0x599))_0x467901[_0x37c313(0x7dd)](this[_0x37c313(0x943)]()[_0x37c313(0xbf1)]());else return VisuMZ[_0x37c313(0x80e)]['Window_ItemList_maxCols']['call'](this);}},VisuMZ[_0x3ffb9d(0x80e)]['Window_SkillList_maxCols']=Window_SkillList[_0x3ffb9d(0xb66)][_0x3ffb9d(0x369)],Window_SkillList[_0x3ffb9d(0xb66)]['maxCols']=function(){const _0x397363=_0x3ffb9d;if(SceneManager[_0x397363(0x341)]()){if(SceneManager[_0x397363(0x947)][_0x397363(0x991)]()===_0x397363(0x94f)){if(_0x397363(0x8b7)===_0x397363(0x8b7))return VisuMZ[_0x397363(0x80e)][_0x397363(0x901)][_0x397363(0x190)][_0x397363(0xb3e)];else{if(this['_battlePortrait']===_0x54d885)this['initBattlePortrait']();return this[_0x397363(0x939)];}}else return'JYlfq'===_0x397363(0xbf8)?VisuMZ['BattleCore']['Settings']['BattleLayout'][_0x397363(0x70f)]:_0x3528cc['_scene']['_enemyWindow']&&_0x57939a[_0x397363(0x947)]['_enemyWindow'][_0x397363(0x85c)]&&_0x2c772c[_0x397363(0x947)][_0x397363(0xadb)][_0x397363(0x24f)][_0x397363(0x802)](this[_0x397363(0x8fa)]);}else{if(_0x397363(0xa05)!==_0x397363(0xa05))this[_0x397363(0x4df)]=![];else return VisuMZ[_0x397363(0x80e)][_0x397363(0x500)]['call'](this);}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x7fd)]=Window_Options['prototype'][_0x3ffb9d(0x799)],Window_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x799)]=function(){const _0x597e7a=_0x3ffb9d;VisuMZ['BattleCore'][_0x597e7a(0x7fd)]['call'](this),this[_0x597e7a(0x760)](),this[_0x597e7a(0x736)]();},Window_Options['prototype'][_0x3ffb9d(0x760)]=function(){const _0x54af8e=_0x3ffb9d;VisuMZ[_0x54af8e(0x80e)][_0x54af8e(0x901)][_0x54af8e(0x49f)][_0x54af8e(0x782)]&&(this[_0x54af8e(0x441)](),this[_0x54af8e(0x1dd)]());},Window_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x736)]=function(){const _0x3bbfd8=_0x3ffb9d;if(!VisuMZ[_0x3bbfd8(0x80e)]['Settings'][_0x3bbfd8(0x6d3)]['AddHpGaugeOption'])return;const _0x52b710=TextManager[_0x3bbfd8(0x585)],_0x31e50d=_0x3bbfd8(0x585);this[_0x3bbfd8(0x8c6)](_0x52b710,_0x31e50d);},Window_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x441)]=function(){const _0x8f12c3=_0x3ffb9d,_0x5268a1=TextManager[_0x8f12c3(0x20a)],_0x3b55c5=_0x8f12c3(0x9c2);this[_0x8f12c3(0x8c6)](_0x5268a1,_0x3b55c5);},Window_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1dd)]=function(){const _0x4016c1=_0x3ffb9d,_0x53c923=TextManager['autoBattleStyle'],_0x26b1e0=_0x4016c1(0xb59);this['addCommand'](_0x53c923,_0x26b1e0);},VisuMZ['BattleCore'][_0x3ffb9d(0xaf4)]=Window_Options['prototype'][_0x3ffb9d(0x5af)],Window_Options[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5af)]=function(_0x14ccb8){const _0x42f041=_0x3ffb9d,_0x215c0e=this[_0x42f041(0x739)](_0x14ccb8);return _0x215c0e==='autoBattleUseSkills'?this['statusTextAutoBattleStyle']():VisuMZ[_0x42f041(0x80e)][_0x42f041(0xaf4)][_0x42f041(0x73d)](this,_0x14ccb8);},Window_Options[_0x3ffb9d(0xb66)]['statusTextAutoBattleStyle']=function(){const _0x274351=_0x3ffb9d,_0x4e4305=VisuMZ[_0x274351(0x80e)]['Settings'][_0x274351(0x49f)],_0x1ca83f=this[_0x274351(0x6ee)](_0x274351(0xb59));return _0x1ca83f?_0x4e4305['StyleON']:_0x4e4305['StyleOFF'];},Window_ShopStatus['prototype'][_0x3ffb9d(0xc24)]=function(){const _0x2d794b=_0x3ffb9d,_0x47dc65=DataManager[_0x2d794b(0x690)](this[_0x2d794b(0x3e0)]),_0x5a6f3a=VisuMZ[_0x2d794b(0xbc8)][_0x47dc65];if(!_0x5a6f3a)return this[_0x2d794b(0x663)]();const _0x268f1a='DamageType%1'[_0x2d794b(0x4a7)](this[_0x2d794b(0x3e0)][_0x2d794b(0xbfc)][_0x2d794b(0x97d)]),_0x17c37f=[null,TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp'],TextManager['hp'],TextManager['mp']][this['_item'][_0x2d794b(0xbfc)][_0x2d794b(0x97d)]];return _0x5a6f3a[_0x268f1a]['format'](_0x17c37f);},Window_ShopStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x455)]=function(){const _0x3de325=_0x3ffb9d,_0x33cc8d=DataManager[_0x3de325(0x690)](this['_item']),_0x3954e6=VisuMZ['DamageStyles'][_0x33cc8d];if(!_0x3954e6)return this[_0x3de325(0x487)]();return _0x3954e6[_0x3de325(0x77d)][_0x3de325(0x73d)](this);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xa91)]=Window_PartyCommand[_0x3ffb9d(0xb66)]['initialize'],Window_PartyCommand[_0x3ffb9d(0xb66)]['initialize']=function(_0x2005a1){const _0x2beb78=_0x3ffb9d;VisuMZ['BattleCore']['Window_PartyCommand_initialize'][_0x2beb78(0x73d)](this,_0x2005a1),this[_0x2beb78(0x717)](_0x2005a1);},Window_PartyCommand['prototype'][_0x3ffb9d(0x717)]=function(_0x148f63){const _0x346b15=_0x3ffb9d,_0x22d05e=new Rectangle(0x0,0x0,_0x148f63[_0x346b15(0x7d6)],_0x148f63[_0x346b15(0x8a0)]);this[_0x346b15(0xba0)]=new Window_Base(_0x22d05e),this[_0x346b15(0xba0)][_0x346b15(0x430)]=0x0,this[_0x346b15(0x237)](this['_commandNameWindow']),this[_0x346b15(0x69c)]();},Window_PartyCommand['prototype'][_0x3ffb9d(0x805)]=function(){const _0x45f33=_0x3ffb9d;Window_Command[_0x45f33(0xb66)][_0x45f33(0x805)][_0x45f33(0x73d)](this);if(this[_0x45f33(0xba0)])this[_0x45f33(0x69c)]();},Window_PartyCommand[_0x3ffb9d(0xb66)]['updateCommandNameWindow']=function(){const _0x161362=_0x3ffb9d,_0x3d3359=this[_0x161362(0xba0)];_0x3d3359[_0x161362(0x3d3)][_0x161362(0x75e)]();const _0x1bc85d=this[_0x161362(0x45b)](this[_0x161362(0x2bd)]());if(_0x1bc85d===_0x161362(0x9c9)&&this['maxItems']()>0x0){if(_0x161362(0xb44)!==_0x161362(0xb44)){if(this['allowCollapse']())_0x4d9d16['BattleCore'][_0x161362(0x613)][_0x161362(0x73d)](this);}else{const _0x14d1ed=this['itemLineRect'](this['index']());let _0x47338c=this[_0x161362(0x1d3)](this[_0x161362(0x2bd)]());_0x47338c=_0x47338c[_0x161362(0x515)](/\\I\[(\d+)\]/gi,''),_0x3d3359[_0x161362(0xa4c)](),this[_0x161362(0x262)](_0x47338c,_0x14d1ed),this[_0x161362(0x319)](_0x47338c,_0x14d1ed),this['commandNameWindowCenter'](_0x47338c,_0x14d1ed);}}},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x262)]=function(_0x514936,_0x359563){},Window_PartyCommand['prototype'][_0x3ffb9d(0x319)]=function(_0x32a564,_0x43051f){const _0x3740c2=_0x3ffb9d,_0x4062bc=this[_0x3740c2(0xba0)];_0x4062bc['drawText'](_0x32a564,0x0,_0x43051f['y'],_0x4062bc[_0x3740c2(0x2c2)],_0x3740c2(0x5a8));},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x352)]=function(_0x2ffaf7,_0x35cd1a){const _0x20a59c=_0x3ffb9d,_0x82922b=this[_0x20a59c(0xba0)],_0x36b60a=$gameSystem['windowPadding'](),_0x265c33=_0x35cd1a['x']+Math['floor'](_0x35cd1a[_0x20a59c(0x7d6)]/0x2)+_0x36b60a;_0x82922b['x']=_0x82922b['width']/-0x2+_0x265c33,_0x82922b['y']=Math[_0x20a59c(0x9bd)](_0x35cd1a['height']/0x2);},Window_PartyCommand[_0x3ffb9d(0xb66)]['makeCommandList']=function(){const _0x156e3e=_0x3ffb9d;this[_0x156e3e(0x948)](),this[_0x156e3e(0x390)](),this[_0x156e3e(0x249)](),this['addOptionsCommand'](),this['addEscapeCommand']();},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x948)]=function(){const _0xe5521=_0x3ffb9d,_0x109b81=this['commandStyle'](),_0x114502=VisuMZ['BattleCore'][_0xe5521(0x901)]['PartyCmd'][_0xe5521(0xb11)],_0x523076=_0x109b81===_0xe5521(0x818)?TextManager[_0xe5521(0x473)]:_0xe5521(0x2f4)['format'](_0x114502,TextManager['fight']),_0x384256=this[_0xe5521(0x586)]();this['addCommand'](_0x523076,_0xe5521(0x473),_0x384256);},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x586)]=function(){return!![];},Window_PartyCommand[_0x3ffb9d(0xb66)]['addAutoBattleCommand']=function(){const _0x34e0c3=_0x3ffb9d;if(!this[_0x34e0c3(0x886)]())return;const _0x59fae4=this[_0x34e0c3(0x4e3)](),_0x1073bb=VisuMZ[_0x34e0c3(0x80e)]['Settings'][_0x34e0c3(0x9d6)][_0x34e0c3(0x9f4)],_0x256810=_0x59fae4==='text'?TextManager[_0x34e0c3(0x1e8)]:_0x34e0c3(0x2f4)['format'](_0x1073bb,TextManager[_0x34e0c3(0x1e8)]),_0x19eb21=this[_0x34e0c3(0x94a)]();this[_0x34e0c3(0x8c6)](_0x256810,_0x34e0c3(0x1e8),_0x19eb21);},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x886)]=function(){const _0x5d1aed=_0x3ffb9d;return VisuMZ['BattleCore']['Settings'][_0x5d1aed(0x9d6)][_0x5d1aed(0x5d9)];},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x94a)]=function(){return!![];},Window_PartyCommand[_0x3ffb9d(0xb66)]['addCustomCommands']=function(){},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x98b)]=function(){const _0x39d74d=_0x3ffb9d;if(!this[_0x39d74d(0x400)]())return;const _0x482eba=this[_0x39d74d(0x4e3)](),_0x53aee7=VisuMZ[_0x39d74d(0x80e)]['Settings'][_0x39d74d(0x9d6)]['CmdIconOptions'],_0x319701=_0x482eba===_0x39d74d(0x818)?TextManager[_0x39d74d(0x40b)]:'\x5cI[%1]%2'[_0x39d74d(0x4a7)](_0x53aee7,TextManager[_0x39d74d(0x40b)]),_0xe49662=this[_0x39d74d(0xa73)]();this['addCommand'](_0x319701,_0x39d74d(0x40b),_0xe49662);},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x400)]=function(){const _0x4c7cdb=_0x3ffb9d;return VisuMZ['BattleCore'][_0x4c7cdb(0x901)][_0x4c7cdb(0x9d6)]['CommandAddOptions'];},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa73)]=function(){return!![];},Window_PartyCommand['prototype'][_0x3ffb9d(0x733)]=function(){const _0x48febb=_0x3ffb9d,_0x336387=this[_0x48febb(0x4e3)](),_0x104732=VisuMZ[_0x48febb(0x80e)][_0x48febb(0x901)][_0x48febb(0x9d6)][_0x48febb(0x671)],_0x1f046d=_0x336387===_0x48febb(0x818)?TextManager['escape']:_0x48febb(0x2f4)['format'](_0x104732,TextManager['escape']),_0x1c87a9=this[_0x48febb(0xc14)]();this['addCommand'](_0x1f046d,_0x48febb(0x590),_0x1c87a9);},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc14)]=function(){const _0x469ba1=_0x3ffb9d;return BattleManager[_0x469ba1(0x3a4)]();},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2a1)]=function(){const _0x742808=_0x3ffb9d;return VisuMZ[_0x742808(0x80e)][_0x742808(0x901)][_0x742808(0x9d6)][_0x742808(0x7b6)];},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x546)]=function(_0x30876e){const _0x2e290d=_0x3ffb9d,_0x4ee855=this['commandStyleCheck'](_0x30876e);if(_0x4ee855===_0x2e290d(0x42e))this[_0x2e290d(0x673)](_0x30876e);else _0x4ee855===_0x2e290d(0x9c9)?this[_0x2e290d(0x4f4)](_0x30876e):Window_Command['prototype'][_0x2e290d(0x546)][_0x2e290d(0x73d)](this,_0x30876e);},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4e3)]=function(){const _0x14bf3f=_0x3ffb9d;return VisuMZ['BattleCore']['Settings'][_0x14bf3f(0x9d6)][_0x14bf3f(0xade)];},Window_PartyCommand[_0x3ffb9d(0xb66)]['commandStyleCheck']=function(_0x47e251){const _0x18efb=_0x3ffb9d;if(_0x47e251<0x0)return'text';const _0x4cf8d3=this['commandStyle']();if(_0x4cf8d3!==_0x18efb(0x3a6))return _0x4cf8d3;else{if(this[_0x18efb(0x7d9)]()>0x0){const _0x4d77d3=this['commandName'](_0x47e251);if(_0x4d77d3['match'](/\\I\[(\d+)\]/i)){if('bcaag'===_0x18efb(0xc37)){const _0x5d4616=this[_0x18efb(0x3fd)](_0x47e251),_0x557bca=this['textSizeEx'](_0x4d77d3)[_0x18efb(0x7d6)];if(_0x557bca<=_0x5d4616[_0x18efb(0x7d6)]){if(_0x18efb(0x7c6)!==_0x18efb(0xb56))return _0x18efb(0x42e);else _0x497acc[_0x18efb(0xbfc)][_0x18efb(0x54d)]=!![];}else return _0x18efb(0x9c9);}else _0x175432+=_0xc7a3f7[_0x18efb(0x2bb)]()?-_0x331202:_0x24a311,_0x25fea6+=_0x371b56[_0x18efb(0x2bb)]()?-_0x12defe:_0x37bc9c;}}}return'text';},Window_PartyCommand[_0x3ffb9d(0xb66)]['drawItemStyleIconText']=function(_0x1c2075){const _0x1a4e3b=_0x3ffb9d,_0x1d3cda=this[_0x1a4e3b(0x3fd)](_0x1c2075),_0x59c4b7=this[_0x1a4e3b(0x1d3)](_0x1c2075),_0x516699=this[_0x1a4e3b(0x95f)](_0x59c4b7)['width'];this['changePaintOpacity'](this[_0x1a4e3b(0xbeb)](_0x1c2075));const _0x5ee2ac=this[_0x1a4e3b(0x2a1)]();if(_0x5ee2ac===_0x1a4e3b(0x2ce)){if('fiwUE'!==_0x1a4e3b(0x9d3)){if(_0xbcbbdb[_0x1a4e3b(0x97d)]===0x0)this[_0x1a4e3b(0x42c)](_0x1a4e3b(0x8d5));else{if(_0x47a2aa[_0x1a4e3b(0x97d)]===0x1)this[_0x1a4e3b(0x42c)](_0x1a4e3b(0x243));else _0x1e2af2['type']===0x2&&this['requestMotion']('missile');}this[_0x1a4e3b(0x1cb)](_0x2932e2[_0x1a4e3b(0x29b)]);}else this[_0x1a4e3b(0xb91)](_0x59c4b7,_0x1d3cda['x']+_0x1d3cda[_0x1a4e3b(0x7d6)]-_0x516699,_0x1d3cda['y'],_0x516699);}else{if(_0x5ee2ac===_0x1a4e3b(0x5a8)){if(_0x1a4e3b(0x32e)!==_0x1a4e3b(0x32e))this[_0x1a4e3b(0xa14)]=new _0x182939(),this[_0x1a4e3b(0x237)](this[_0x1a4e3b(0xa14)]);else{const _0x33989d=_0x1d3cda['x']+Math[_0x1a4e3b(0x9bd)]((_0x1d3cda[_0x1a4e3b(0x7d6)]-_0x516699)/0x2);this[_0x1a4e3b(0xb91)](_0x59c4b7,_0x33989d,_0x1d3cda['y'],_0x516699);}}else this['drawTextEx'](_0x59c4b7,_0x1d3cda['x'],_0x1d3cda['y'],_0x516699);}},Window_PartyCommand['prototype'][_0x3ffb9d(0x4f4)]=function(_0x423e72){const _0x49868d=_0x3ffb9d;this['commandName'](_0x423e72)[_0x49868d(0x1b7)](/\\I\[(\d+)\]/i);const _0x58f99b=Number(RegExp['$1'])||0x0,_0x188373=this[_0x49868d(0x3fd)](_0x423e72),_0x1ad742=_0x188373['x']+Math[_0x49868d(0x9bd)]((_0x188373['width']-ImageManager[_0x49868d(0x797)])/0x2),_0x45a898=_0x188373['y']+(_0x188373[_0x49868d(0x8a0)]-ImageManager[_0x49868d(0xb57)])/0x2;this[_0x49868d(0xafc)](_0x58f99b,_0x1ad742,_0x45a898);},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x18d)]=function(){},Window_PartyCommand[_0x3ffb9d(0xb66)]['activate']=function(){const _0x1a2fa8=_0x3ffb9d;Window_Command[_0x1a2fa8(0xb66)][_0x1a2fa8(0x6d2)][_0x1a2fa8(0x73d)](this);const _0x28ae0e=this[_0x1a2fa8(0x991)]();_0x28ae0e==='border'&&(_0x1a2fa8(0xc03)!==_0x1a2fa8(0xc03)?this['_defeatedEnemies']=this['_defeatedEnemies']||[]:this['showHelpWindow']());},Window_PartyCommand['prototype'][_0x3ffb9d(0x991)]=function(){const _0x1a0cad=_0x3ffb9d;if(this['_battleLayoutStyle'])return this['_battleLayoutStyle'];return this[_0x1a0cad(0x923)]=SceneManager[_0x1a0cad(0x947)][_0x1a0cad(0x991)](),this[_0x1a0cad(0x923)];},Window_PartyCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5ef)]=function(){const _0x4c01ab=_0x3ffb9d,_0x26d18b=VisuMZ[_0x4c01ab(0x80e)][_0x4c01ab(0x901)][_0x4c01ab(0x9d6)],_0x571454=this[_0x4c01ab(0x7df)]();switch(_0x571454){case _0x4c01ab(0x473):this[_0x4c01ab(0x7c5)][_0x4c01ab(0x3a3)](_0x26d18b[_0x4c01ab(0xbbc)]);break;case _0x4c01ab(0x1e8):this[_0x4c01ab(0x7c5)][_0x4c01ab(0x3a3)](_0x26d18b[_0x4c01ab(0x715)]);break;case'options':this[_0x4c01ab(0x7c5)][_0x4c01ab(0x3a3)](_0x26d18b[_0x4c01ab(0xa5f)]);break;case _0x4c01ab(0x590):this[_0x4c01ab(0x7c5)]['setText'](_0x26d18b[_0x4c01ab(0x5bf)]);break;default:this['_helpWindow']['setText']('');break;}},VisuMZ['BattleCore']['Window_ActorCommand_initialize']=Window_ActorCommand['prototype'][_0x3ffb9d(0xacd)],Window_ActorCommand['prototype'][_0x3ffb9d(0xacd)]=function(_0x4a7cd7){const _0x56ca6b=_0x3ffb9d;VisuMZ['BattleCore'][_0x56ca6b(0x81f)][_0x56ca6b(0x73d)](this,_0x4a7cd7),this[_0x56ca6b(0x717)](_0x4a7cd7);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x717)]=function(_0x3007f9){const _0x1e5024=_0x3ffb9d,_0x3711a9=new Rectangle(0x0,0x0,_0x3007f9[_0x1e5024(0x7d6)],_0x3007f9[_0x1e5024(0x8a0)]);this[_0x1e5024(0xba0)]=new Window_Base(_0x3711a9),this[_0x1e5024(0xba0)]['opacity']=0x0,this['addChild'](this['_commandNameWindow']),this[_0x1e5024(0x69c)]();},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x805)]=function(){const _0xf6de51=_0x3ffb9d;Window_Command['prototype'][_0xf6de51(0x805)][_0xf6de51(0x73d)](this);if(this[_0xf6de51(0xba0)])this[_0xf6de51(0x69c)]();},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x69c)]=function(){const _0x2a198d=_0x3ffb9d,_0x1766cc=this[_0x2a198d(0xba0)];_0x1766cc[_0x2a198d(0x3d3)][_0x2a198d(0x75e)]();const _0x54918b=this[_0x2a198d(0x45b)](this[_0x2a198d(0x2bd)]());if(_0x54918b===_0x2a198d(0x9c9)&&this['maxItems']()>0x0){const _0x41f3ae=this[_0x2a198d(0x3fd)](this[_0x2a198d(0x2bd)]());let _0x54d71a=this[_0x2a198d(0x1d3)](this['index']());_0x54d71a=_0x54d71a['replace'](/\\I\[(\d+)\]/gi,''),_0x1766cc['resetFontSettings'](),this[_0x2a198d(0x262)](_0x54d71a,_0x41f3ae),this[_0x2a198d(0x319)](_0x54d71a,_0x41f3ae),this[_0x2a198d(0x352)](_0x54d71a,_0x41f3ae);}},Window_ActorCommand[_0x3ffb9d(0xb66)]['commandNameWindowDrawBackground']=function(_0x338146,_0x39e8db){},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x319)]=function(_0x1ac053,_0x501b9a){const _0x5e5d19=_0x3ffb9d,_0x7ef976=this[_0x5e5d19(0xba0)];_0x7ef976[_0x5e5d19(0x86d)](_0x1ac053,0x0,_0x501b9a['y'],_0x7ef976[_0x5e5d19(0x2c2)],_0x5e5d19(0x5a8));},Window_ActorCommand[_0x3ffb9d(0xb66)]['commandNameWindowCenter']=function(_0x126720,_0x511f28){const _0x34d1a7=_0x3ffb9d,_0x5c7246=this[_0x34d1a7(0xba0)],_0x567fc8=$gameSystem['windowPadding'](),_0x48dcbe=_0x511f28['x']+Math['floor'](_0x511f28['width']/0x2)+_0x567fc8;_0x5c7246['x']=_0x5c7246[_0x34d1a7(0x7d6)]/-0x2+_0x48dcbe,_0x5c7246['y']=Math[_0x34d1a7(0x9bd)](_0x511f28[_0x34d1a7(0x8a0)]/0x2);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9c4)]=function(){const _0x3f3605=_0x3ffb9d;if(!this[_0x3f3605(0x4c8)])return;const _0x295449=this[_0x3f3605(0x4c8)][_0x3f3605(0x5ce)]();for(const _0xa4e85e of _0x295449){'XkmZE'===_0x3f3605(0x44c)?this[_0x3f3605(0x940)](_0xa4e85e[_0x3f3605(0x614)]()['trim']()):(_0x4e80d4=_0x34961b[_0x3f3605(0x515)](/\x1I\[(\d+)\]/gi,''),_0x50e103=_0x37036b[_0x3f3605(0x515)](/\\I\[(\d+)\]/gi,''));}},Window_ActorCommand[_0x3ffb9d(0xb66)]['makeBattleCommand']=function(_0x1b93c7){const _0x398df5=_0x3ffb9d;_0x1b93c7==='ATTACK'&&this['addAttackCommand']();['STYPES','SKILLS'][_0x398df5(0x802)](_0x1b93c7)&&this[_0x398df5(0x32f)]();_0x1b93c7===_0x398df5(0x5f0)&&this[_0x398df5(0x6ad)]();_0x1b93c7===_0x398df5(0x6cd)&&this['addItemCommand']();if(_0x1b93c7===_0x398df5(0x977)){if('wnbZW'!=='wnbZW'){const _0x171e75=_0xadc28[_0x398df5(0x3ab)](0x2)===0x0?this[_0x398df5(0x943)]():this[_0x398df5(0x432)]();_0xf8323a[_0x398df5(0x7dd)](_0x171e75['trueRandomTarget']());}else this[_0x398df5(0x733)]();}_0x1b93c7===_0x398df5(0x600)&&this[_0x398df5(0x390)]();if(_0x1b93c7[_0x398df5(0x1b7)](/STYPE: (\d+)/i)){if('AVTBj'!==_0x398df5(0x93d)){const _0x4a3798=Number(RegExp['$1']);this[_0x398df5(0x508)](_0x4a3798);}else{const _0x50e5d0=this[_0x398df5(0x3ad)](),_0x43e303=this[_0x398df5(0x9d4)]();_0x51c10f[_0x398df5(0x80e)]['Game_BattlerBase_addNewState'][_0x398df5(0x73d)](this,_0x54cabc),this[_0x398df5(0x2a7)]()&&_0x50e5d0&&this[_0x398df5(0xb78)]()&&(this[_0x398df5(0x411)]=!this[_0x398df5(0xb6f)](),_0xf95b64[_0x398df5(0x7f5)](this[_0x398df5(0x8df)]())),_0x2f348e[_0x398df5(0x341)]()&&_0x43e303!==this[_0x398df5(0x9d4)]()&&(this[_0x398df5(0x491)]()&&this[_0x398df5(0x491)]()['refreshMotion']());}}else{if(_0x1b93c7[_0x398df5(0x1b7)](/STYPE: (.*)/i)){if(_0x398df5(0xb98)!==_0x398df5(0x442)){const _0x4a24ea=DataManager[_0x398df5(0x4fb)](RegExp['$1']);this[_0x398df5(0x508)](_0x4a24ea);}else{if(!_0xa4bae3[_0x398df5(0x341)]())return;_0x51730f['ConvertParams'](_0x2d2696,_0x3fb0f8);const _0x4719a6=_0x14d93a[_0x398df5(0x58b)];if(!_0x4719a6)return;let _0x3bf03e=_0x2506b6[_0x398df5(0x188)];_0x4719a6[_0x398df5(0x97c)](_0x3bf03e);}}}_0x1b93c7===_0x398df5(0x43c)&&this[_0x398df5(0xb62)]();if(_0x1b93c7[_0x398df5(0x1b7)](/SKILL: (\d+)/i)){const _0x192880=Number(RegExp['$1']);this[_0x398df5(0x1b2)]($dataSkills[_0x192880]);}else{if(_0x1b93c7[_0x398df5(0x1b7)](/SKILL: (.*)/i)){if('yxcCD'!==_0x398df5(0x63e)){const _0x523bec=DataManager[_0x398df5(0x60e)](RegExp['$1']);this['addSingleSkillCommand']($dataSkills[_0x523bec]);}else{if(!this[_0x398df5(0x601)])return;if(this[_0x398df5(0x8fa)]&&this['_battler'][_0x398df5(0x506)]()){const _0x42c833=this[_0x398df5(0x601)][_0x398df5(0x6a0)];this[_0x398df5(0x601)][_0x398df5(0x452)](0x0,0x0,_0x42c833[_0x398df5(0x7d6)],_0x42c833[_0x398df5(0x8a0)]);}else this[_0x398df5(0x601)][_0x398df5(0x452)](0x0,0x0,0x0,0x0);}}}_0x1b93c7===_0x398df5(0xaa0)&&Imported['VisuMZ_2_PartySystem']&&this['addPartyCommand']();if([_0x398df5(0x685),_0x398df5(0x19c)][_0x398df5(0x802)](_0x1b93c7)&&Imported['VisuMZ_4_CombatLog']){if(_0x398df5(0x2f2)!==_0x398df5(0x4c2))this[_0x398df5(0xc1c)]();else{const _0x5acef1=_0x22d9ae(_0x42feb8['$1'])['split'](/[\r\n]+/)[_0x398df5(0x7bc)]('');_0x2e4a58[_0x398df5(0x453)]=_0x3924bf['processRandomizedData'](_0x5acef1);}}if(_0x1b93c7==='WEAPON\x20SWAP'&&Imported[_0x398df5(0xbff)]){if(_0x398df5(0x261)!==_0x398df5(0x1bd))this[_0x398df5(0xbe1)](!![]);else{if(!_0x302229[_0x398df5(0x341)]())return;const _0x353f19=_0x3317df[_0x398df5(0x292)]();if(!_0x353f19)return;_0x353f19['setWaitMode']('battleFloat');}}},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9d2)]=function(){const _0x53aab8=_0x3ffb9d,_0x2f312e=$dataSkills[this[_0x53aab8(0x4c8)]['attackSkillId']()];if(!_0x2f312e)return;if(!this['canAddSkillCommand'](_0x2f312e))return;const _0x2fa250=this[_0x53aab8(0x4e3)](),_0x3c29ce=DataManager['battleCommandName'](_0x2f312e),_0x55d7c2=DataManager['battleCommandIcon'](_0x2f312e),_0x22c2a1=_0x2fa250===_0x53aab8(0x818)?_0x3c29ce:_0x53aab8(0x2f4)[_0x53aab8(0x4a7)](_0x55d7c2,_0x3c29ce);this[_0x53aab8(0x8c6)](_0x22c2a1,_0x53aab8(0x308),this[_0x53aab8(0x4c8)]['canAttack']());},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6ad)]=function(){const _0x5e0bd4=_0x3ffb9d,_0x53f6bd=$dataSkills[this[_0x5e0bd4(0x4c8)][_0x5e0bd4(0x3e1)]()];if(!_0x53f6bd)return;if(!this[_0x5e0bd4(0x57e)](_0x53f6bd))return;const _0x23073a=this[_0x5e0bd4(0x4e3)](),_0x11df1f=DataManager[_0x5e0bd4(0x44f)](_0x53f6bd),_0x14e223=DataManager[_0x5e0bd4(0x23b)](_0x53f6bd),_0x53d5ce=_0x23073a===_0x5e0bd4(0x818)?_0x11df1f:_0x5e0bd4(0x2f4)[_0x5e0bd4(0x4a7)](_0x14e223,_0x11df1f);this['addCommand'](_0x53d5ce,_0x5e0bd4(0x61b),this[_0x5e0bd4(0x4c8)][_0x5e0bd4(0x78d)]());},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x197)]=function(){const _0x519bf0=_0x3ffb9d,_0x208530=this[_0x519bf0(0x4e3)](),_0x2b4ef4=VisuMZ[_0x519bf0(0x80e)]['Settings'][_0x519bf0(0x606)]['CmdIconItem'],_0x259932=_0x208530==='text'?TextManager['item']:_0x519bf0(0x2f4)['format'](_0x2b4ef4,TextManager[_0x519bf0(0x33b)]),_0x3e493f=this[_0x519bf0(0xa6c)]();this[_0x519bf0(0x8c6)](_0x259932,_0x519bf0(0x33b),_0x3e493f);},Window_ActorCommand['prototype'][_0x3ffb9d(0xa6c)]=function(){const _0x28c527=_0x3ffb9d;return this[_0x28c527(0x4c8)]&&this[_0x28c527(0x4c8)][_0x28c527(0x533)]();},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x32f)]=function(){const _0x3d2557=_0x3ffb9d,_0x1d7a89=this[_0x3d2557(0x4c8)][_0x3d2557(0xad9)]();for(const _0x119d82 of _0x1d7a89){if('SkumX'===_0x3d2557(0xbe0))return;else this[_0x3d2557(0x508)](_0x119d82);}},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x508)]=function(_0x59a08c){const _0xcc2824=_0x3ffb9d;let _0x474acb=$dataSystem['skillTypes'][_0x59a08c];if(!_0x474acb)return;let _0x3950a8=_0x474acb;const _0x1858bd=this['commandStyle']();if(_0x1858bd===_0xcc2824(0x818))_0x3950a8=_0x3950a8[_0xcc2824(0x515)](/\x1I\[(\d+)\]/gi,''),_0x3950a8=_0x3950a8['replace'](/\\I\[(\d+)\]/gi,'');else{if(!_0x474acb['match'](/\\I\[(\d+)\]/i)){const _0x522417=Imported[_0xcc2824(0x796)]?VisuMZ[_0xcc2824(0x9b5)]['Settings']['Skills']:VisuMZ[_0xcc2824(0x80e)]['Settings'][_0xcc2824(0x606)],_0x4b40de=$dataSystem[_0xcc2824(0x20c)][_0xcc2824(0x802)](_0x59a08c),_0x4b5945=_0x4b40de?_0x522417[_0xcc2824(0x528)]:_0x522417['IconStypeNorm'];_0x3950a8=_0xcc2824(0x2f4)[_0xcc2824(0x4a7)](_0x4b5945,_0x474acb);}}this[_0xcc2824(0x8c6)](_0x3950a8,_0xcc2824(0x8d6),!![],_0x59a08c);},Window_ActorCommand['prototype']['addSingleSkillCommands']=function(){const _0x16e57d=_0x3ffb9d,_0x4433ff=this[_0x16e57d(0x4c8)][_0x16e57d(0xad9)](),_0x1852a0=this[_0x16e57d(0x4c8)][_0x16e57d(0x919)]();for(const _0x4ffea0 of _0x1852a0){if(!_0x4ffea0)continue;if(Imported[_0x16e57d(0x796)]){if(_0x16e57d(0xa77)!==_0x16e57d(0x893)){if(this['noSimilarSTypes'](_0x4ffea0))continue;if(this[_0x16e57d(0x5dd)](_0x4ffea0))continue;}else this[_0x16e57d(0x430)]=this['_targetOpacity'];}else{if(!_0x4433ff[_0x16e57d(0x802)](_0x4ffea0[_0x16e57d(0x30b)]))continue;}this[_0x16e57d(0x1b2)](_0x4ffea0);}},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4e1)]=function(_0x4a31f9){const _0x3205bc=_0x3ffb9d,_0x87df07=this[_0x3205bc(0x4c8)][_0x3205bc(0xad9)](),_0x2f1cd5=_0x87df07[_0x3205bc(0xae9)](_0x1be9c7=>DataManager['getSkillTypes'](_0x4a31f9)[_0x3205bc(0x802)](_0x1be9c7));return _0x2f1cd5[_0x3205bc(0x205)]<=0x0;},Window_ActorCommand['prototype'][_0x3ffb9d(0x5dd)]=function(_0x38e80c){const _0x373991=_0x3ffb9d;if(!Window_SkillList[_0x373991(0xb66)]['checkShowHideBattleNotetags'][_0x373991(0x73d)](this,_0x38e80c))return!![];if(!Window_SkillList[_0x373991(0xb66)]['checkShowHideSwitchNotetags'][_0x373991(0x73d)](this,_0x38e80c))return!![];if(!Window_SkillList['prototype'][_0x373991(0x6d8)][_0x373991(0x73d)](this,_0x38e80c))return!![];return![];},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1b2)]=function(_0x54b42e){const _0x2db531=_0x3ffb9d;if(!_0x54b42e)return;if(!this['canAddSkillCommand'](_0x54b42e))return;const _0x2fb23c=this['commandStyle'](),_0x2cc67d=DataManager[_0x2db531(0x44f)](_0x54b42e),_0x42b8bd=DataManager['battleCommandIcon'](_0x54b42e),_0x332527=_0x2fb23c==='text'?_0x2cc67d:_0x2db531(0x2f4)[_0x2db531(0x4a7)](_0x42b8bd,_0x2cc67d),_0x76d51b=this['_actor'][_0x2db531(0x368)](_0x54b42e);this[_0x2db531(0x8c6)](_0x332527,_0x2db531(0xbea),_0x76d51b,_0x54b42e['id']);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x57e)]=function(_0x49c9f0){const _0x3aa784=_0x3ffb9d,_0x23a8d3=_0x49c9f0[_0x3aa784(0x365)];if(_0x23a8d3[_0x3aa784(0x1b7)](/<COMMAND REQUIRE LEARN>/i)){if(!this['_actor'][_0x3aa784(0xa22)](_0x49c9f0['id']))return![];}if(_0x23a8d3[_0x3aa784(0x1b7)](/<COMMAND REQUIRE ACCESS>/i)){if(!this['_actor'][_0x3aa784(0x33d)](_0x49c9f0['id']))return![];}const _0x2d083f=VisuMZ[_0x3aa784(0x80e)][_0x3aa784(0xb88)](_0x49c9f0,'CommandVisible');if(VisuMZ['BattleCore']['JS'][_0x2d083f]){if(!VisuMZ[_0x3aa784(0x80e)]['JS'][_0x2d083f][_0x3aa784(0x73d)](this,this['_actor'],_0x49c9f0))return![];}return VisuMZ[_0x3aa784(0x80e)][_0x3aa784(0xb50)](_0x49c9f0);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xb50)]=function(_0x5b18af){const _0x2489b8=_0x3ffb9d,_0x3f68cb=_0x5b18af[_0x2489b8(0x365)];if(_0x3f68cb[_0x2489b8(0x1b7)](/<COMMAND SHOW[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x20ea92=JSON[_0x2489b8(0x8dc)]('['+RegExp['$1'][_0x2489b8(0x1b7)](/\d+/g)+']');for(const _0xe11e84 of _0x20ea92){if(!$gameSwitches[_0x2489b8(0x338)](_0xe11e84))return![];}return!![];}if(_0x3f68cb[_0x2489b8(0x1b7)](/<COMMAND SHOW ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x4b7fc4=JSON[_0x2489b8(0x8dc)]('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0x3fee16 of _0x4b7fc4){if(!$gameSwitches['value'](_0x3fee16))return![];}return!![];}if(_0x3f68cb[_0x2489b8(0x1b7)](/<COMMAND SHOW ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5457fa=JSON[_0x2489b8(0x8dc)]('['+RegExp['$1'][_0x2489b8(0x1b7)](/\d+/g)+']');for(const _0x2afaa8 of _0x5457fa){if($gameSwitches['value'](_0x2afaa8))return!![];}return![];}if(_0x3f68cb['match'](/<COMMAND HIDE[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x5315d6=JSON[_0x2489b8(0x8dc)]('['+RegExp['$1'][_0x2489b8(0x1b7)](/\d+/g)+']');for(const _0x5dc507 of _0x5315d6){if(!$gameSwitches[_0x2489b8(0x338)](_0x5dc507))return!![];}return![];}if(_0x3f68cb[_0x2489b8(0x1b7)](/<COMMAND HIDE ALL[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){const _0x1c56f3=JSON['parse']('['+RegExp['$1']['match'](/\d+/g)+']');for(const _0xe91819 of _0x1c56f3){if('qJsnO'==='qJsnO'){if(!$gameSwitches[_0x2489b8(0x338)](_0xe91819))return!![];}else _0x548f48[_0x2489b8(0x78a)](_0x3729d5);}return![];}if(_0x3f68cb[_0x2489b8(0x1b7)](/<COMMAND HIDE ANY[ ](?:SW|SWITCH|SWITCHES):[ ]*(\d+(?:\s*,\s*\d+)*)>/i)){if(_0x2489b8(0xab5)!==_0x2489b8(0x5f8)){const _0x5c3ec9=JSON[_0x2489b8(0x8dc)]('['+RegExp['$1'][_0x2489b8(0x1b7)](/\d+/g)+']');for(const _0x29b395 of _0x5c3ec9){if(_0x2489b8(0x87b)!==_0x2489b8(0x536)){if($gameSwitches[_0x2489b8(0x338)](_0x29b395))return![];}else _0xdaf364=_0x244309>=_0x5e3ab2?_0x2350ca:_0x135927;}return!![];}else return;}return!![];},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x733)]=function(){const _0x420ea7=_0x3ffb9d,_0x41c633=this[_0x420ea7(0x4e3)](),_0x135a1d=VisuMZ[_0x420ea7(0x80e)][_0x420ea7(0x901)][_0x420ea7(0x9d6)][_0x420ea7(0x671)],_0x15458f=_0x41c633===_0x420ea7(0x818)?TextManager[_0x420ea7(0x590)]:'\x5cI[%1]%2'[_0x420ea7(0x4a7)](_0x135a1d,TextManager[_0x420ea7(0x590)]),_0xf6689a=this[_0x420ea7(0xc14)]();this[_0x420ea7(0x8c6)](_0x15458f,_0x420ea7(0x590),_0xf6689a);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0xc14)]=function(){const _0x226c92=_0x3ffb9d;return BattleManager[_0x226c92(0x3a4)]();},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x390)]=function(){const _0x33cc22=_0x3ffb9d,_0x40e782=this['commandStyle'](),_0x2018fb=VisuMZ['BattleCore'][_0x33cc22(0x901)][_0x33cc22(0x9d6)][_0x33cc22(0x9f4)],_0x275399=_0x40e782===_0x33cc22(0x818)?TextManager[_0x33cc22(0x1e8)]:_0x33cc22(0x2f4)[_0x33cc22(0x4a7)](_0x2018fb,TextManager[_0x33cc22(0x1e8)]),_0x5cf286=this[_0x33cc22(0x94a)]();this[_0x33cc22(0x8c6)](_0x275399,_0x33cc22(0x1e8),_0x5cf286);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x94a)]=function(){return!![];},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2a1)]=function(){const _0x37f75a=_0x3ffb9d;return VisuMZ[_0x37f75a(0x80e)][_0x37f75a(0x901)][_0x37f75a(0x606)][_0x37f75a(0x7b6)];},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x546)]=function(_0xd3566c){const _0x112c6a=_0x3ffb9d,_0x3091f5=this[_0x112c6a(0x45b)](_0xd3566c);if(_0x3091f5===_0x112c6a(0x42e))this[_0x112c6a(0x673)](_0xd3566c);else _0x3091f5===_0x112c6a(0x9c9)?this[_0x112c6a(0x4f4)](_0xd3566c):_0x112c6a(0xa4f)===_0x112c6a(0xa4f)?Window_Command['prototype'][_0x112c6a(0x546)][_0x112c6a(0x73d)](this,_0xd3566c):(_0x2cf40b[_0x112c6a(0x80e)][_0x112c6a(0x23d)]['call'](this),this[_0x112c6a(0x704)]());this[_0x112c6a(0x945)](_0xd3566c);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4e3)]=function(){const _0x110ad7=_0x3ffb9d;return VisuMZ['BattleCore'][_0x110ad7(0x901)][_0x110ad7(0x606)][_0x110ad7(0xade)];},Window_ActorCommand[_0x3ffb9d(0xb66)]['commandStyleCheck']=function(_0x5ec32c){const _0x139b9a=_0x3ffb9d;if(_0x5ec32c<0x0)return'text';const _0x1326d6=this[_0x139b9a(0x4e3)]();if(_0x1326d6!==_0x139b9a(0x3a6))return _0x1326d6;else{if(this[_0x139b9a(0x7d9)]()>0x0){if('GWDcd'!=='EzWOn'){const _0x2a0060=this[_0x139b9a(0x1d3)](_0x5ec32c);if(_0x2a0060[_0x139b9a(0x1b7)](/\\I\[(\d+)\]/i)){const _0x109395=this[_0x139b9a(0x3fd)](_0x5ec32c),_0x273bfa=this[_0x139b9a(0x95f)](_0x2a0060)['width'];if(_0x273bfa<=_0x109395['width'])return'iconText';else{if(_0x139b9a(0x837)===_0x139b9a(0x2c6))!_0x1c377a[_0x139b9a(0x4fd)]()&&(_0x3cebb5[_0x139b9a(0x571)](_0x593bc4[0x2],_0x4d39c1[0x3]),_0x6836c5[_0x139b9a(0x571)](_0x9468d));else return'icon';}}}else this[_0x139b9a(0xb5a)]++;}}return'text';},Window_ActorCommand['prototype'][_0x3ffb9d(0x673)]=function(_0x2b1be4){const _0x3495da=_0x3ffb9d,_0x1ac8f1=this[_0x3495da(0x3fd)](_0x2b1be4),_0x1e24f4=this[_0x3495da(0x1d3)](_0x2b1be4),_0xee3efd=this[_0x3495da(0x95f)](_0x1e24f4)['width'];this[_0x3495da(0x6ca)](this[_0x3495da(0xbeb)](_0x2b1be4));const _0x14d713=this[_0x3495da(0x2a1)]();if(_0x14d713===_0x3495da(0x2ce))this[_0x3495da(0xb91)](_0x1e24f4,_0x1ac8f1['x']+_0x1ac8f1[_0x3495da(0x7d6)]-_0xee3efd,_0x1ac8f1['y'],_0xee3efd);else{if(_0x14d713===_0x3495da(0x5a8)){if(_0x3495da(0x686)!==_0x3495da(0x635)){const _0x5313fb=_0x1ac8f1['x']+Math[_0x3495da(0x9bd)]((_0x1ac8f1[_0x3495da(0x7d6)]-_0xee3efd)/0x2);this[_0x3495da(0xb91)](_0x1e24f4,_0x5313fb,_0x1ac8f1['y'],_0xee3efd);}else this[_0x3495da(0x38b)]();}else this[_0x3495da(0xb91)](_0x1e24f4,_0x1ac8f1['x'],_0x1ac8f1['y'],_0xee3efd);}},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4f4)]=function(_0x13c12e){const _0x65525b=_0x3ffb9d;this['commandName'](_0x13c12e)[_0x65525b(0x1b7)](/\\I\[(\d+)\]/i);const _0x2a00bc=Number(RegExp['$1'])||0x0,_0x2dffde=this[_0x65525b(0x3fd)](_0x13c12e),_0x45d63e=_0x2dffde['x']+Math[_0x65525b(0x9bd)]((_0x2dffde[_0x65525b(0x7d6)]-ImageManager[_0x65525b(0x797)])/0x2),_0x7161b6=_0x2dffde['y']+(_0x2dffde[_0x65525b(0x8a0)]-ImageManager['iconHeight'])/0x2;this[_0x65525b(0xafc)](_0x2a00bc,_0x45d63e,_0x7161b6);},Window_ActorCommand['prototype']['drawSingleSkillCost']=function(_0x4e7d5f){const _0x3d48f2=_0x3ffb9d;if(!(VisuMZ[_0x3d48f2(0x80e)]['Settings'][_0x3d48f2(0x606)][_0x3d48f2(0x81c)]??!![]))return;const _0x31e297=this['commandSymbol'](_0x4e7d5f);if(![_0x3d48f2(0x308),_0x3d48f2(0x61b),'singleSkill']['includes'](_0x31e297))return;const _0x696f29=this[_0x3d48f2(0x3fd)](_0x4e7d5f);let _0x57ce81=null;if(_0x31e297===_0x3d48f2(0x308))_0x3d48f2(0x5e3)===_0x3d48f2(0x5e3)?_0x57ce81=$dataSkills[this[_0x3d48f2(0x4c8)][_0x3d48f2(0x382)]()]:this['_mainSprite'][_0x3d48f2(0x6a0)]['smooth']=this[_0x3d48f2(0x8fa)][_0x3d48f2(0x23c)]();else _0x31e297==='guard'?_0x57ce81=$dataSkills[this[_0x3d48f2(0x4c8)]['guardSkillId']()]:_0x57ce81=$dataSkills[this[_0x3d48f2(0x330)][_0x4e7d5f]['ext']];this['drawSkillCost'](this[_0x3d48f2(0x4c8)],_0x57ce81,_0x696f29['x'],_0x696f29['y'],_0x696f29[_0x3d48f2(0x7d6)]);},Window_ActorCommand[_0x3ffb9d(0xb66)]['drawSkillCost']=function(_0x34c0fd,_0x459c1f,_0x3a37fb,_0x13fe3e,_0x5c0dff){const _0x3bc222=_0x3ffb9d;if(!_0x459c1f)return;Imported[_0x3bc222(0x796)]?Window_Command[_0x3bc222(0xb66)][_0x3bc222(0x3fb)][_0x3bc222(0x73d)](this,_0x34c0fd,_0x459c1f,_0x3a37fb,_0x13fe3e,_0x5c0dff):_0x3bc222(0x4f6)===_0x3bc222(0x4f6)?Window_SkillList[_0x3bc222(0xb66)][_0x3bc222(0x3fb)][_0x3bc222(0x73d)](this,_0x459c1f,_0x3a37fb,_0x13fe3e,_0x5c0dff):_0x5735cb=_0x474efe>=_0x23314f?_0x2557db:_0x17d53c;},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x18d)]=function(){},Window_ActorCommand[_0x3ffb9d(0xb66)]['activate']=function(){const _0x394b8=_0x3ffb9d;Window_Command['prototype'][_0x394b8(0x6d2)][_0x394b8(0x73d)](this);const _0x1d6586=this['battleLayoutStyle']();_0x1d6586==='border'&&(_0x394b8(0x4e0)!==_0x394b8(0xb76)?this[_0x394b8(0x6cb)]():this[_0x394b8(0x7dd)](_0x394b8(0x887),_0x2fc30e));},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x991)]=function(){const _0x4a9107=_0x3ffb9d;if(this[_0x4a9107(0x923)])return this[_0x4a9107(0x923)];return this[_0x4a9107(0x923)]=SceneManager['_scene'][_0x4a9107(0x991)](),this[_0x4a9107(0x923)];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x86e)]=Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2eb)],Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2eb)]=function(_0x143ab5){const _0x17e4ad=_0x3ffb9d,_0x2c0121=this[_0x17e4ad(0x991)]();if(_0x143ab5&&['xp','portrait'][_0x17e4ad(0x802)](_0x2c0121)){if(_0x17e4ad(0xa47)==='OOyvC')this[_0x17e4ad(0xab4)](_0x143ab5);else{const _0xbfab9c=_0x123d1d['actor']();_0x5f4d6b[_0x17e4ad(0x80e)][_0x17e4ad(0x632)]['call'](this);if(_0xbfab9c){if(_0xbfab9c===_0x9bebf['actor']())return;if(_0xbfab9c===_0x535897['_subject'])return;if(_0xbfab9c[_0x17e4ad(0x491)]())_0xbfab9c['battler']()[_0x17e4ad(0xaa6)]();}}}else{if(_0x143ab5&&[_0x17e4ad(0x94f)]['includes'](_0x2c0121)){if(_0x17e4ad(0x5a0)!==_0x17e4ad(0x5a0)){if(_0x17b79a[_0x17e4ad(0x55c)])return;_0x4b0056['BattleCore']['Scene_Map_updateCallMenu'][_0x17e4ad(0x73d)](this);}else this[_0x17e4ad(0x25d)](_0x143ab5),this['showHelpWindow']();}}VisuMZ[_0x17e4ad(0x80e)][_0x17e4ad(0x86e)][_0x17e4ad(0x73d)](this,_0x143ab5),_0x143ab5&&$gameTroop[_0x17e4ad(0x735)]()[_0x17e4ad(0x205)]>0x0&&_0x143ab5[_0x17e4ad(0x491)]()&&_0x143ab5[_0x17e4ad(0x491)]()[_0x17e4ad(0x1b8)]();},Window_ActorCommand['prototype'][_0x3ffb9d(0xab4)]=function(_0x5bf728){const _0x41d549=_0x3ffb9d,_0x169781=Math['round'](Graphics[_0x41d549(0x8f0)]/0x3),_0x1020f6=Math['round'](Graphics[_0x41d549(0x8f0)]/$gameParty[_0x41d549(0xbf4)]()[_0x41d549(0x205)]),_0x532094=Math[_0x41d549(0x775)](_0x169781,_0x1020f6),_0x594c36=this[_0x41d549(0xa8d)](VisuMZ[_0x41d549(0x80e)]['Settings'][_0x41d549(0x190)][_0x41d549(0x896)]),_0x4c2f1f=_0x1020f6*_0x5bf728[_0x41d549(0x2bd)]()+(_0x1020f6-_0x532094)/0x2,_0x19466b=SceneManager[_0x41d549(0x947)]['_statusWindow']['y']-_0x594c36;this[_0x41d549(0x2f3)](_0x4c2f1f,_0x19466b,_0x532094,_0x594c36),this['createContents'](),this[_0x41d549(0x4d3)](0x1);},Window_ActorCommand['prototype'][_0x3ffb9d(0x25d)]=function(_0x446cac){const _0x2d1d75=_0x3ffb9d,_0x3202e2=SceneManager[_0x2d1d75(0x947)][_0x2d1d75(0x4fa)]();this[_0x2d1d75(0x2f3)](_0x3202e2['x'],_0x3202e2['y'],_0x3202e2[_0x2d1d75(0x7d6)],_0x3202e2[_0x2d1d75(0x8a0)]),this[_0x2d1d75(0x607)](),this['setBackgroundType'](0x0);},Window_ActorCommand[_0x3ffb9d(0xb66)][_0x3ffb9d(0x959)]=function(){const _0xe639d5=_0x3ffb9d;if(this['_dimmerSprite']){const _0x2604ae=this[_0xe639d5(0xbfb)][_0xe639d5(0x6a0)],_0xd4e1f7=this[_0xe639d5(0x7d6)]-0x8,_0x323cc8=this['height'],_0x306c84=this[_0xe639d5(0xc1f)],_0x332272=ColorManager['dimColor1'](),_0x517d70=ColorManager[_0xe639d5(0x98f)]();this[_0xe639d5(0xbfb)]['x']=0x4,_0x2604ae[_0xe639d5(0x218)](_0xd4e1f7,_0x323cc8),_0x2604ae['gradientFillRect'](0x0,0x0,_0xd4e1f7,_0x306c84,_0x517d70,_0x332272,!![]),_0x2604ae[_0xe639d5(0x355)](0x0,_0x306c84,_0xd4e1f7,_0x323cc8-_0x306c84*0x2,_0x332272),_0x2604ae[_0xe639d5(0x397)](0x0,_0x323cc8-_0x306c84,_0xd4e1f7,_0x306c84,_0x332272,_0x517d70,!![]),this[_0xe639d5(0xbfb)][_0xe639d5(0x452)](0x0,0x0,_0xd4e1f7,_0x323cc8);}},Window_ActorCommand['prototype'][_0x3ffb9d(0x5ef)]=function(){const _0x1fce3a=_0x3ffb9d;if(!this[_0x1fce3a(0x4c8)])return;const _0x4378ec=VisuMZ[_0x1fce3a(0x80e)][_0x1fce3a(0x901)][_0x1fce3a(0x606)],_0xfa262b=this['currentSymbol']();switch(_0xfa262b){case _0x1fce3a(0x308):this[_0x1fce3a(0x37a)]($dataSkills[this[_0x1fce3a(0x4c8)][_0x1fce3a(0x382)]()]);break;case _0x1fce3a(0x61b):this[_0x1fce3a(0x37a)]($dataSkills[this[_0x1fce3a(0x4c8)][_0x1fce3a(0x3e1)]()]);break;case _0x1fce3a(0x8d6):const _0x1546df=_0x4378ec[_0x1fce3a(0x661)],_0x425998=_0x1546df[_0x1fce3a(0x4a7)]($dataSystem[_0x1fce3a(0xad9)][this['currentExt']()]);this[_0x1fce3a(0x7c5)][_0x1fce3a(0x3a3)](_0x425998);break;case _0x1fce3a(0xbea):this[_0x1fce3a(0x37a)]($dataSkills[this['currentExt']()]);break;case _0x1fce3a(0x33b):this[_0x1fce3a(0x7c5)][_0x1fce3a(0x3a3)](_0x4378ec[_0x1fce3a(0x7da)]);break;case _0x1fce3a(0x590):this[_0x1fce3a(0x7c5)][_0x1fce3a(0x3a3)](_0x4378ec[_0x1fce3a(0x5bf)]);break;case _0x1fce3a(0x1e8):this[_0x1fce3a(0x7c5)]['setText'](_0x4378ec[_0x1fce3a(0x715)]);break;default:this[_0x1fce3a(0x7c5)]['setText']('');break;}},VisuMZ[_0x3ffb9d(0x80e)]['Window_BattleStatus_initialize']=Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)],Window_BattleStatus[_0x3ffb9d(0xb66)]['initialize']=function(_0x299747){const _0x4f867a=_0x3ffb9d;VisuMZ[_0x4f867a(0x80e)]['Window_BattleStatus_initialize'][_0x4f867a(0x73d)](this,_0x299747),this[_0x4f867a(0xbe2)](),this[_0x4f867a(0x22d)]();},Window_BattleStatus['prototype']['battleLayoutStyle']=function(){const _0x5eb4a6=_0x3ffb9d;if(this[_0x5eb4a6(0x923)])return this[_0x5eb4a6(0x923)];return this['_battleLayoutStyle']=SceneManager['_scene'][_0x5eb4a6(0x991)](),this[_0x5eb4a6(0x923)];},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbe2)]=function(){const _0x5b5602=_0x3ffb9d;this['frameVisible']=this['isFrameVisible']();const _0x36a2b3=VisuMZ[_0x5b5602(0x80e)][_0x5b5602(0x901)][_0x5b5602(0x190)];_0x36a2b3['StatusWindowSkinHide']&&(_0x5b5602(0xb3b)!==_0x5b5602(0xbf3)?this['opacity']=0x0:this[_0x5b5602(0x37d)]());},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x72f)]=function(){const _0x113555=_0x3ffb9d,_0x17770e=VisuMZ[_0x113555(0x80e)][_0x113555(0x901)][_0x113555(0x190)];if(_0x17770e['StatusWindowSkinFilename'])return!![];const _0x4c6a19=this[_0x113555(0x991)]();switch(_0x4c6a19){case _0x113555(0x728):case _0x113555(0x94f):return!![];break;case _0x113555(0x232):case'xp':case _0x113555(0x68e):default:return![];break;}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1c7)]=function(){const _0x2d0564=_0x3ffb9d;return this[_0x2d0564(0x72f)]()?0x0:0xa;},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x369)]=function(){const _0x45f5e2=_0x3ffb9d,_0xccb455=this[_0x45f5e2(0x991)]();switch(_0xccb455){case _0x45f5e2(0x728):return 0x1;break;case'xp':case'portrait':return $gameParty[_0x45f5e2(0xbf4)]()[_0x45f5e2(0x205)];break;case _0x45f5e2(0x232):default:return $gameParty['maxBattleMembers']();break;}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x366)]=function(){const _0x1f8e47=_0x3ffb9d,_0x36f6d3=this[_0x1f8e47(0x991)]();switch(_0x36f6d3){case _0x1f8e47(0x728):return Window_StatusBase['prototype'][_0x1f8e47(0x366)][_0x1f8e47(0x73d)](this);break;case'default':case'xp':case _0x1f8e47(0x68e):default:return this['innerHeight'];break;}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1ca)]=function(){const _0x549618=_0x3ffb9d,_0x1ea255=this[_0x549618(0x991)]();switch(_0x1ea255){case _0x549618(0x728):return Window_StatusBase[_0x549618(0xb66)][_0x549618(0x1ca)]['call'](this);break;case _0x549618(0x232):case'xp':case'portrait':default:return 0x0;break;}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4f1)]=function(){const _0x358e78=_0x3ffb9d;if(this[_0x358e78(0x72f)]())Window_StatusBase[_0x358e78(0xb66)][_0x358e78(0x4f1)][_0x358e78(0x73d)](this);else{if(_0x358e78(0x26b)===_0x358e78(0xb5e)){const _0xf701e9=_0x4b7c14['boxWidth']/0x2,_0x3972eb=this['calcWindowHeight'](_0x472842[_0x358e78(0x80e)][_0x358e78(0x901)][_0x358e78(0x190)][_0x358e78(0x896)],!![]),_0x4e7b34=_0x29d01d[_0x358e78(0x68f)]((_0xca795b[_0x358e78(0x8f0)]-_0xf701e9)/0x2),_0x206a0c=_0x17cb13[_0x358e78(0xbd1)]-_0x3972eb-this[_0x358e78(0xa4e)]()['height'];return new _0x38c43d(_0x4e7b34,_0x206a0c,_0xf701e9,_0x3972eb);}else this[_0x358e78(0xc1f)]=0x8;}},Window_BattleStatus['prototype'][_0x3ffb9d(0x970)]=function(){const _0x3b7ac8=_0x3ffb9d,_0x6de16=VisuMZ[_0x3b7ac8(0x80e)][_0x3b7ac8(0x901)][_0x3b7ac8(0x190)];_0x6de16[_0x3b7ac8(0x8bf)]?this[_0x3b7ac8(0x393)]=ImageManager[_0x3b7ac8(0x56b)](_0x6de16[_0x3b7ac8(0x8bf)]):'KVIRu'==='KVIRu'?Window_StatusBase[_0x3b7ac8(0xb66)][_0x3b7ac8(0x970)]['call'](this):(_0x2591eb[_0x3b7ac8(0x80e)][_0x3b7ac8(0x81f)][_0x3b7ac8(0x73d)](this,_0xb1c9a3),this['createCommandNameWindow'](_0x12bead));},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x577)]=function(_0x3b50ac){const _0x2dfaa9=_0x3ffb9d,_0x5f3b5c=VisuMZ[_0x2dfaa9(0x80e)][_0x2dfaa9(0x901)][_0x2dfaa9(0x190)];if(_0x5f3b5c['StatusWindowSelectableBackHide'])return;Window_StatusBase[_0x2dfaa9(0xb66)]['drawItemBackground'][_0x2dfaa9(0x73d)](this,_0x3b50ac);},Window_BattleStatus['prototype'][_0x3ffb9d(0x283)]=function(){const _0x23e6cc=_0x3ffb9d;this[_0x23e6cc(0xb85)]=!![];},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)]=function(){const _0x20c813=_0x3ffb9d;Window_StatusBase[_0x20c813(0xb66)][_0x20c813(0x1e3)]['call'](this),this[_0x20c813(0x2df)](),this[_0x20c813(0x918)]();if(this[_0x20c813(0x991)]()===_0x20c813(0x94f))this[_0x20c813(0x912)]();},Window_BattleStatus[_0x3ffb9d(0xb66)]['updateRefresh']=function(){const _0x46c63a=_0x3ffb9d;if($gameTemp[_0x46c63a(0x7e2)]())this[_0x46c63a(0xa28)](),this['_requestRefresh']=![],$gameTemp[_0x46c63a(0x520)]();else{if(this['_requestRefresh']){if(_0x46c63a(0x39d)==='mGOlL'){if(_0x391082[_0x46c63a(0x3b1)]&&_0x4bc304[_0x46c63a(0x97b)]())return!![];if(this[_0x46c63a(0x8fa)][_0x46c63a(0x411)])return![];return this[_0x46c63a(0x8fa)][_0x46c63a(0xb6f)]();}else this['_requestRefresh']=![],this[_0x46c63a(0x96b)](),this['updateAttachmentSprites']();}}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4cc)]=function(){const _0x8a594=_0x3ffb9d;Window_StatusBase[_0x8a594(0xb66)][_0x8a594(0x4cc)][_0x8a594(0x73d)](this);if(!$gameSystem[_0x8a594(0x6de)]())this[_0x8a594(0x96b)]();},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x18d)]=function(){const _0x55663c=_0x3ffb9d;if(this[_0x55663c(0x4a3)]===Window_BattleStatus)return;Window_StatusBase[_0x55663c(0xb66)]['hide'][_0x55663c(0x73d)](this);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x507)]=function(_0x17ebbb){const _0x4f2a85=_0x3ffb9d,_0x14b7c7=this[_0x4f2a85(0x991)]();switch(_0x14b7c7){case'xp':case _0x4f2a85(0x68e):break;case _0x4f2a85(0x232):case _0x4f2a85(0x728):case'border':default:return Window_StatusBase[_0x4f2a85(0xb66)][_0x4f2a85(0x507)][_0x4f2a85(0x73d)](this,_0x17ebbb);break;}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x932)]=Window_BattleStatus['prototype']['drawItemImage'],Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb64)]=function(_0x439d05){const _0x50cdfd=_0x3ffb9d,_0x1016a9=this[_0x50cdfd(0x991)]();switch(_0x1016a9){case _0x50cdfd(0x728):this[_0x50cdfd(0x34b)](_0x439d05);break;case'xp':this[_0x50cdfd(0x9f3)](_0x439d05);break;case _0x50cdfd(0x68e):this[_0x50cdfd(0xa1c)](_0x439d05);break;case _0x50cdfd(0x232):case'border':default:VisuMZ[_0x50cdfd(0x80e)][_0x50cdfd(0x932)][_0x50cdfd(0x73d)](this,_0x439d05);break;}},Window_BattleStatus['prototype'][_0x3ffb9d(0x362)]=function(_0x1f76cc){const _0x25daad=_0x3ffb9d,_0x280e9b=this[_0x25daad(0x991)]();if(!$gameSystem[_0x25daad(0x6de)]())this['centerFrontViewSprite'](_0x1f76cc);switch(_0x280e9b){case _0x25daad(0x728):this[_0x25daad(0x806)](_0x1f76cc);break;case'xp':case'portrait':case _0x25daad(0x232):case _0x25daad(0x94f):default:this['drawItemStatusXPStyle'](_0x1f76cc);break;}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x74c)]=function(){const _0x2be781=_0x3ffb9d,_0x784e61=this[_0x2be781(0x991)]();if(['xp'][_0x2be781(0x802)](_0x784e61)&&!$gameSystem['isSideView']()){if('GQTmm'===_0x2be781(0x61e)){this[_0x2be781(0x822)](0x0,0x0,0x0,0x0);return;}else this[_0x2be781(0x23e)]();}Window_StatusBase[_0x2be781(0xb66)][_0x2be781(0x74c)][_0x2be781(0x73d)](this);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x888)]=function(_0x5479cb){const _0x43d888=_0x3ffb9d,_0x2e8abb=this[_0x43d888(0x6aa)](_0x5479cb)[_0x43d888(0x491)]();if(!_0x2e8abb)return;const _0x52f4e1=this[_0x43d888(0x991)](),_0x14fc91=this[_0x43d888(0xc29)](_0x5479cb);let _0x4fb5ef=Math['round'](_0x14fc91['x']+_0x14fc91[_0x43d888(0x7d6)]/0x2)+this['padding'];[_0x43d888(0x728)][_0x43d888(0x802)](_0x52f4e1)&&(_0x4fb5ef=_0x14fc91[_0x43d888(0x7d6)]/$gameParty[_0x43d888(0xbf4)]()[_0x43d888(0x205)],_0x4fb5ef*=_0x5479cb,_0x4fb5ef+=_0x14fc91[_0x43d888(0x7d6)]/$gameParty[_0x43d888(0xbf4)]()['length']/0x2);let _0x5e7702=Math['round'](this[_0x43d888(0xa04)](_0x5479cb,_0x2e8abb,_0x14fc91));_0x2e8abb['setHome'](_0x4fb5ef,_0x5e7702),this[_0x43d888(0x7f3)](_0x2e8abb,0x1),_0x2e8abb[_0x43d888(0x4cc)](),this[_0x43d888(0x48a)](),this[_0x43d888(0x9f7)]();},Window_BattleStatus['prototype'][_0x3ffb9d(0xa04)]=function(_0xe07cab,_0xe5b142,_0x40f476){const _0x3bb830=_0x3ffb9d,_0xf1850d=VisuMZ[_0x3bb830(0x80e)]['Settings'][_0x3bb830(0x190)],_0x375372=this[_0x3bb830(0x991)]();if(_0x375372==='xp'){const _0x37ef0d=_0xf1850d[_0x3bb830(0x79d)];switch(_0x37ef0d[_0x3bb830(0x456)]()['trim']()){case'bottom':return _0x40f476['height']-_0xe5b142['_shadowSprite']['height']/0x4;break;case _0x3bb830(0x5a8):const _0x2f4034=_0xf1850d['XPActorDefaultHeight'];return(_0x40f476[_0x3bb830(0x8a0)]+(_0xe5b142['height']||_0x2f4034))/0x2;break;case _0x3bb830(0x67c):return 0x0;case _0x3bb830(0x453):default:return this[_0x3bb830(0x936)](_0x40f476);break;}}else{if(_0x375372==='portrait'){}}return _0xe5b142[_0x3bb830(0x8a0)];},Sprite_Name['prototype'][_0x3ffb9d(0x1c0)]=function(){return 0x24;},Sprite_Name[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa54)]=function(){const _0x29521d=_0x3ffb9d,_0x173b24=this[_0x29521d(0x453)](),_0x1f1f99=this['bitmapWidth'](),_0x1d6d9f=this['bitmapHeight']();this['setupFont'](),this['bitmap'][_0x29521d(0x75e)](),this[_0x29521d(0x6a0)]['drawTextTopAligned'](_0x173b24,0x0,0x0,_0x1f1f99,_0x1d6d9f,_0x29521d(0xc04));},Bitmap[_0x3ffb9d(0xb66)]['drawTextTopAligned']=function(_0x2f1657,_0x4f2e88,_0x263756,_0x4a68db,_0x51b04c,_0x2f9393){const _0xf3cb3=_0x3ffb9d,_0x214ece=this[_0xf3cb3(0x2da)],_0x5a1dc5=_0x214ece[_0xf3cb3(0x1f0)];_0x4a68db=_0x4a68db||0xffffffff;let _0x16503d=_0x4f2e88,_0x152d0d=Math[_0xf3cb3(0x68f)](_0x263756+0x18/0x2+this[_0xf3cb3(0xa51)]*0.35);_0x2f9393===_0xf3cb3(0x5a8)&&(_0x16503d+=_0x4a68db/0x2),_0x2f9393===_0xf3cb3(0x2ce)&&(_0x16503d+=_0x4a68db),_0x214ece['save'](),_0x214ece[_0xf3cb3(0x202)]=this[_0xf3cb3(0x616)](),_0x214ece['textAlign']=_0x2f9393,_0x214ece['textBaseline']=_0xf3cb3(0x7a7),_0x214ece[_0xf3cb3(0x1f0)]=0x1,this[_0xf3cb3(0xae0)](_0x2f1657,_0x16503d,_0x152d0d,_0x4a68db),_0x214ece[_0xf3cb3(0x1f0)]=_0x5a1dc5,this[_0xf3cb3(0xb37)](_0x2f1657,_0x16503d,_0x152d0d,_0x4a68db),_0x214ece[_0xf3cb3(0x727)](),this['_baseTexture'][_0xf3cb3(0x1e3)]();},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x936)]=function(_0x566594){const _0x1b6eb2=_0x3ffb9d;return this[_0x1b6eb2(0x933)](_0x566594)-this['gaugeLineHeight']();},Window_BattleStatus['prototype'][_0x3ffb9d(0x34b)]=function(_0x24b773){const _0x4325b9=_0x3ffb9d;if(!VisuMZ[_0x4325b9(0x80e)]['Settings'][_0x4325b9(0x190)][_0x4325b9(0xbd6)])return;const _0x53d498=this[_0x4325b9(0x6aa)](_0x24b773),_0x18375c=this[_0x4325b9(0xc29)](_0x24b773);_0x18375c[_0x4325b9(0x7d6)]=ImageManager[_0x4325b9(0x5a1)],_0x18375c[_0x4325b9(0x8a0)]-=0x2,this[_0x4325b9(0x204)](_0x53d498,_0x18375c['x']+0x1,_0x18375c['y']+0x1,_0x18375c['width'],_0x18375c['height']);},Window_BattleStatus[_0x3ffb9d(0xb66)]['drawItemStatusListStyle']=function(_0x521a16){const _0x5228c8=_0x3ffb9d,_0x32774d=VisuMZ[_0x5228c8(0x80e)][_0x5228c8(0x901)]['BattleLayout'],_0x4d6d7e=$dataSystem['optDisplayTp']?0x4:0x3,_0x37e0fd=_0x4d6d7e*0x80+(_0x4d6d7e-0x1)*0x8+0x4,_0x5adacd=this[_0x5228c8(0x6aa)](_0x521a16),_0x5ed318=this['itemRect'](_0x521a16);let _0x2e1240=_0x5ed318['x']+this[_0x5228c8(0xc1f)];_0x32774d[_0x5228c8(0xbd6)]?_0x5228c8(0x417)===_0x5228c8(0x885)?_0x2af8a0[_0x5228c8(0x6a0)]=new _0x53c838(this[_0x5228c8(0x7d6)],this[_0x5228c8(0x8a0)]):_0x2e1240=_0x5ed318['x']+ImageManager[_0x5228c8(0x5a1)]+0x8:_0x2e1240+=ImageManager['iconWidth'];const _0x100e84=Math[_0x5228c8(0x68f)](Math[_0x5228c8(0x775)](_0x5ed318['x']+_0x5ed318[_0x5228c8(0x7d6)]-_0x37e0fd,_0x2e1240)),_0x2d2a5c=Math[_0x5228c8(0x68f)](_0x5ed318['y']+(_0x5ed318['height']-Sprite_Name[_0x5228c8(0xb66)][_0x5228c8(0x1c0)]())/0x2),_0x353326=Math[_0x5228c8(0x68f)](_0x100e84-ImageManager[_0x5228c8(0x797)]/0x2-0x4),_0x1ca355=Math[_0x5228c8(0x68f)](_0x5ed318['y']+(_0x5ed318[_0x5228c8(0x8a0)]-ImageManager[_0x5228c8(0xb57)])/0x2+ImageManager[_0x5228c8(0xb57)]/0x2);let _0x3b2b21=_0x100e84+0x88;const _0x44b893=_0x2d2a5c;this[_0x5228c8(0x83c)](_0x5adacd,_0x100e84-0x4+(_0x32774d[_0x5228c8(0x865)]||0x0),_0x2d2a5c+(_0x32774d[_0x5228c8(0x59b)]||0x0)),this[_0x5228c8(0x9f6)](_0x5adacd,_0x100e84+(_0x32774d['NameOffsetX']||0x0),_0x2d2a5c+(_0x32774d[_0x5228c8(0x7ad)]||0x0)),this[_0x5228c8(0x2b4)](_0x5adacd,_0x353326+(_0x32774d[_0x5228c8(0x647)]||0x0),_0x1ca355+(_0x32774d[_0x5228c8(0x6d1)]||0x0)),this[_0x5228c8(0x68a)](_0x5adacd,'hp',_0x3b2b21+0x88*0x0+(_0x32774d['HpGaugeOffsetX']||0x0),_0x44b893+(_0x32774d['HpGaugeOffsetY']||0x0)),this[_0x5228c8(0x68a)](_0x5adacd,'mp',_0x3b2b21+0x88*0x1+(_0x32774d[_0x5228c8(0x4cb)]||0x0),_0x44b893+(_0x32774d[_0x5228c8(0x299)]||0x0));if($dataSystem[_0x5228c8(0x98a)]){if(_0x5228c8(0x7db)===_0x5228c8(0x7db))this[_0x5228c8(0x68a)](_0x5adacd,'tp',_0x3b2b21+0x88*0x2+(_0x32774d[_0x5228c8(0xb90)]||0x0),_0x44b893+(_0x32774d['TpGaugeOffsetY']||0x0));else{const _0x2a1600=_0x167dc2[_0x5228c8(0x80e)]['Settings'][_0x5228c8(0x772)],_0x488cdb=this[_0x5228c8(0x8fa)]&&this[_0x5228c8(0x8fa)][_0x5228c8(0x2bb)]()?0x1:-0x1,_0x67c956=this['_baseX']-this[_0x5228c8(0xb48)]+_0x488cdb*_0x2a1600[_0x5228c8(0xb2a)],_0x33cc0b=this['_baseY']-this['_homeY']+_0x488cdb*_0x2a1600[_0x5228c8(0x840)],_0x46f2ef=_0x2a1600[_0x5228c8(0x67f)];this['startMove'](_0x67c956,_0x33cc0b,_0x46f2ef);}}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9f3)]=function(_0x5b73db){const _0xf3838c=_0x3ffb9d;if(!$gameSystem[_0xf3838c(0x6de)]())return;VisuMZ['BattleCore'][_0xf3838c(0x932)][_0xf3838c(0x73d)](this,_0x5b73db);},Window_BattleStatus[_0x3ffb9d(0xb66)]['drawItemStatusXPStyle']=function(_0x15eebe){const _0x1588bf=_0x3ffb9d,_0x552dea=VisuMZ[_0x1588bf(0x80e)]['Settings'][_0x1588bf(0x190)],_0x1ab4f6=this[_0x1588bf(0x6aa)](_0x15eebe),_0x36ce96=this[_0x1588bf(0xc29)](_0x15eebe),_0x4feded=Math['round'](_0x36ce96['x']+(_0x36ce96['width']-0x80)/0x2),_0x2b9723=this[_0x1588bf(0x936)](_0x36ce96);let _0x6c2709=_0x4feded-ImageManager[_0x1588bf(0x797)]/0x2-0x4,_0x579984=_0x2b9723+ImageManager[_0x1588bf(0xb57)]/0x2;_0x6c2709-ImageManager['iconWidth']/0x2<_0x36ce96['x']&&(_0x6c2709=_0x4feded+ImageManager[_0x1588bf(0x797)]/0x2-0x4,_0x579984=_0x2b9723-ImageManager[_0x1588bf(0xb57)]/0x2);const _0x237ca3=_0x4feded,_0x3fcca0=this['basicGaugesY'](_0x36ce96);this[_0x1588bf(0x83c)](_0x1ab4f6,_0x4feded+(_0x552dea[_0x1588bf(0x865)]||0x0),_0x2b9723+(_0x552dea['TpbGaugeOffsetY']||0x0)),this[_0x1588bf(0x9f6)](_0x1ab4f6,_0x4feded+(_0x552dea[_0x1588bf(0x457)]||0x0),_0x2b9723+(_0x552dea[_0x1588bf(0x7ad)]||0x0)),this['placeStateIcon'](_0x1ab4f6,_0x6c2709+(_0x552dea[_0x1588bf(0x647)]||0x0),_0x579984+(_0x552dea[_0x1588bf(0x6d1)]||0x0)),this['placeGauge'](_0x1ab4f6,'hp',_0x237ca3+(_0x552dea['HpGaugeOffsetX']||0x0),_0x3fcca0+(_0x552dea['HpGaugeOffsetY']||0x0)),this[_0x1588bf(0x68a)](_0x1ab4f6,'mp',_0x237ca3+(_0x552dea[_0x1588bf(0x4cb)]||0x0),_0x3fcca0+this[_0x1588bf(0xb7c)]()+(_0x552dea[_0x1588bf(0x299)]||0x0)),$dataSystem['optDisplayTp']&&this['placeGauge'](_0x1ab4f6,'tp',_0x237ca3+(_0x552dea[_0x1588bf(0xb90)]||0x0),_0x3fcca0+this['gaugeLineHeight']()*0x2+(_0x552dea[_0x1588bf(0x293)]||0x0));},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x71e)]=function(_0x5d7d6d){const _0x3868b3=_0x3ffb9d;if(!VisuMZ[_0x3868b3(0x80e)]['Settings'][_0x3868b3(0x190)]['ShowPortraits'])return![];if(_0x5d7d6d['getBattlePortrait']())return!![];return Imported['VisuMZ_1_MainMenuCore']&&_0x5d7d6d[_0x3868b3(0x9cd)]();},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x921)]=function(){const _0x4fd448=_0x3ffb9d;if(this['actor']()['note'][_0x4fd448(0x1b7)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET X:[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);else{if(this[_0x4fd448(0x6aa)]()[_0x4fd448(0x365)][_0x4fd448(0x1b7)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$1']);}return 0x0;},Game_Actor[_0x3ffb9d(0xb66)][_0x3ffb9d(0xac0)]=function(){const _0x1863be=_0x3ffb9d;if(this[_0x1863be(0x6aa)]()[_0x1863be(0x365)][_0x1863be(0x1b7)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET Y:[ ]([\+\-]\d+)>/i)){if(_0x1863be(0x291)!==_0x1863be(0x291))_0x1d6781[_0x1863be(0x80e)][_0x1863be(0x77a)]&&_0x2d5137[_0x1863be(0x80e)][_0x1863be(0x77a)][_0x1863be(0x73d)](this,_0x201001),_0x3752fa[_0x1863be(0x80e)][_0x1863be(0x846)](_0x3ba5dc);else return Number(RegExp['$1']);}else{if(this[_0x1863be(0x6aa)]()[_0x1863be(0x365)][_0x1863be(0x1b7)](/<BATTLE (?:IMAGE|PORTRAIT) OFFSET:[ ]([\+\-]\d+),[ ]([\+\-]\d+)>/i))return Number(RegExp['$2']);}return 0x0;},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa1c)]=function(_0xb946dc){const _0x4def4d=_0x3ffb9d,_0xf5d6da=this[_0x4def4d(0x6aa)](_0xb946dc);if(this[_0x4def4d(0x71e)](_0xf5d6da)){if(_0x4def4d(0x6d4)==='WNczG'){const _0x641b86=this['commandStyle'](),_0x30a0ea=_0x1e70bb[_0x4def4d(0x80e)][_0x4def4d(0x901)][_0x4def4d(0x606)][_0x4def4d(0xc15)],_0x357926=_0x641b86===_0x4def4d(0x818)?_0x2eb970[_0x4def4d(0x33b)]:_0x4def4d(0x2f4)['format'](_0x30a0ea,_0x287cff['item']),_0x53ce8f=this[_0x4def4d(0xa6c)]();this[_0x4def4d(0x8c6)](_0x357926,_0x4def4d(0x33b),_0x53ce8f);}else{const _0xf5d000=_0x4def4d(0x53e)['format'](_0xf5d6da['actorId']()),_0x2ea34c=this[_0x4def4d(0x1c6)](_0xf5d000,Sprite),_0x4f35c0=_0xf5d6da[_0x4def4d(0xa30)]();if(_0x4f35c0!==''){if('AqwmB'!=='PnviN')_0x2ea34c[_0x4def4d(0x6a0)]=ImageManager[_0x4def4d(0xac4)](_0x4f35c0);else{if(this[_0x4def4d(0xc11)]())this[_0x4def4d(0x4c1)][_0x4def4d(0x6c5)](_0x35243c);}}else _0x4def4d(0x396)==='jxiua'?_0x2ea34c[_0x4def4d(0x6a0)]=ImageManager[_0x4def4d(0x385)]:_0x11a37b=_0x303e79>=_0x18b3e5?_0x49df01:_0x5ee6cc;const _0x4e2950=this[_0x4def4d(0xc29)](_0xb946dc);_0x2ea34c[_0x4def4d(0xab2)]['x']=0.5,_0x2ea34c[_0x4def4d(0xab2)]['y']=0x1;let _0x3ddcbe=Math[_0x4def4d(0x68f)](_0x4e2950['x']+_0x4e2950['width']/0x2)+this[_0x4def4d(0xc1f)];_0x3ddcbe+=_0xf5d6da[_0x4def4d(0x921)]();let _0x525cf2=Math[_0x4def4d(0x68f)](this[_0x4def4d(0x8a0)]);_0x525cf2+=_0xf5d6da['getBattlePortraitOffsetY'](),_0x2ea34c[_0x4def4d(0x2f3)](_0x3ddcbe,_0x525cf2);const _0x15da0f=VisuMZ[_0x4def4d(0x80e)][_0x4def4d(0x901)][_0x4def4d(0x190)]['PortraitScale'];_0x2ea34c['scale']['x']=_0x15da0f,_0x2ea34c[_0x4def4d(0x530)]['y']=_0x15da0f,_0x2ea34c[_0x4def4d(0x4cc)]();}}else{if(_0x4def4d(0xb24)!==_0x4def4d(0xbfe)){const _0x162d3e=this['faceRect'](_0xb946dc);this[_0x4def4d(0x204)](_0xf5d6da,_0x162d3e['x'],_0x162d3e['y'],_0x162d3e[_0x4def4d(0x7d6)],_0x162d3e[_0x4def4d(0x8a0)]);}else _0x1a728a=_0x8ab08b['x']+_0x6d6a8[_0x4def4d(0x5a1)]+0x8;}},Window_BattleStatus['prototype'][_0x3ffb9d(0x1c6)]=function(_0x5658b4,_0x12a71a){const _0x456a6d=_0x3ffb9d,_0x226fc5=this['_additionalSprites'];if(_0x226fc5[_0x5658b4])return _0x226fc5[_0x5658b4];else{const _0xd285f9=new _0x12a71a();return _0x226fc5[_0x5658b4]=_0xd285f9,this[_0x456a6d(0xaff)](_0xd285f9),this[_0x456a6d(0xaff)](this[_0x456a6d(0x28b)]),_0xd285f9;}},Window_BattleStatus[_0x3ffb9d(0xb66)]['_createClientArea']=function(){const _0x198449=_0x3ffb9d;this[_0x198449(0x868)](),this['_createEffectsContainer'](),Window_StatusBase['prototype'][_0x198449(0x6cf)]['call'](this),this[_0x198449(0x693)]();},Window_BattleStatus['prototype'][_0x3ffb9d(0x868)]=function(){const _0x5ab604=_0x3ffb9d;this[_0x5ab604(0x28b)]=new Sprite(),this[_0x5ab604(0x28b)][_0x5ab604(0x208)]=[new PIXI[(_0x5ab604(0x208))][(_0x5ab604(0x2d5))]()],this['_cursorArea'][_0x5ab604(0x346)]=new Rectangle(),this['_cursorArea'][_0x5ab604(0x2f3)](this[_0x5ab604(0x428)],this[_0x5ab604(0x428)]),this['addChild'](this['_cursorArea']);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3df)]=function(){const _0x27877d=_0x3ffb9d;this[_0x27877d(0x1e6)]=new Sprite(),this[_0x27877d(0x237)](this[_0x27877d(0x1e6)]);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x48a)]=function(){const _0x2d8e98=_0x3ffb9d;this[_0x2d8e98(0x1e6)]&&this['addChild'](this[_0x2d8e98(0x1e6)]);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x693)]=function(){const _0x2a13b2=_0x3ffb9d;this[_0x2a13b2(0xa14)]=new Sprite(),this[_0x2a13b2(0x237)](this['_damageContainer']);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x70c)]=function(){const _0x254dd2=_0x3ffb9d;this[_0x254dd2(0x65d)]=new Sprite();for(let _0x1d6d01=0x0;_0x1d6d01<0x9;_0x1d6d01++){this[_0x254dd2(0x65d)][_0x254dd2(0x237)](new Sprite());}this[_0x254dd2(0x28b)][_0x254dd2(0x237)](this[_0x254dd2(0x65d)]);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x76c)]=function(){const _0x257964=_0x3ffb9d;Window_StatusBase[_0x257964(0xb66)]['_updateClientArea'][_0x257964(0x73d)](this),this[_0x257964(0x74b)]();},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x74b)]=function(){const _0x45bd59=_0x3ffb9d,_0x3a2068=this[_0x45bd59(0x428)];this[_0x45bd59(0x28b)][_0x45bd59(0x2f3)](_0x3a2068,_0x3a2068),this[_0x45bd59(0x28b)]['x']=_0x3a2068-this['origin']['x'],this[_0x45bd59(0x28b)]['y']=_0x3a2068-this['origin']['y'];if(this[_0x45bd59(0x2c2)]>0x0&&this[_0x45bd59(0x9e7)]>0x0)this[_0x45bd59(0x28b)][_0x45bd59(0x54f)]=this['isOpen']();else{if(_0x45bd59(0xad7)!==_0x45bd59(0xc07))this[_0x45bd59(0x28b)]['visible']=![];else{if(!_0xdd830f[_0x45bd59(0x80e)][_0x45bd59(0x901)]['BattleLog'][_0x45bd59(0x593)])return;_0x43cfd2[_0x45bd59(0x80e)]['Window_BattleLog_displayCurrentState'][_0x45bd59(0x73d)](this,_0x3a7fe1);}}},Window_BattleStatus['prototype'][_0x3ffb9d(0xac6)]=function(){const _0x1238ad=_0x3ffb9d;Window_StatusBase[_0x1238ad(0xb66)][_0x1238ad(0xac6)]['call'](this),this[_0x1238ad(0x6d6)]();},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6d6)]=function(){const _0x3e8246=_0x3ffb9d,_0x559c2c=this[_0x3e8246(0x28b)][_0x3e8246(0x596)][_0x3e8246(0x522)](new Point(0x0,0x0)),_0x377449=this['_cursorArea']['filterArea'];_0x377449['x']=_0x559c2c['x']+this[_0x3e8246(0x4af)]['x'],_0x377449['y']=_0x559c2c['y']+this[_0x3e8246(0x4af)]['y'],_0x377449[_0x3e8246(0x7d6)]=this['innerWidth'],_0x377449[_0x3e8246(0x8a0)]=this[_0x3e8246(0x9e7)];},Window_BattleStatus[_0x3ffb9d(0xb66)]['refreshActorPortrait']=function(_0x51c3a2){const _0x254e93=_0x3ffb9d;if(this['battleLayoutStyle']()!==_0x254e93(0x68e))return;this['drawItemImagePortraitStyle'](_0x51c3a2[_0x254e93(0x2bd)]());},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb1f)]=function(_0x4b7d06,_0x4ce3b9){const _0x23e2f6=_0x3ffb9d;if(!this[_0x23e2f6(0xa14)])return;if(!_0x4b7d06)return;if(!_0x4ce3b9)return;const _0x5bbc24=this[_0x23e2f6(0xc29)](_0x4ce3b9['index']());_0x5bbc24['x']+=_0x5bbc24['width']/0x2+this['padding'],_0x4b7d06['x']=_0x5bbc24['x'],_0x4b7d06['y']=_0x5bbc24['y'],this[_0x23e2f6(0xa14)][_0x23e2f6(0x237)](_0x4b7d06);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2b2)]=function(_0x58e226){const _0x1caa1f=_0x3ffb9d;if(!this[_0x1caa1f(0xa14)])return;if(!_0x58e226)return;this['_damageContainer']['removeChild'](_0x58e226);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x912)]=function(){const _0x227915=_0x3ffb9d;if(!this['isBorderStylePortraitShown']())return;if(!this[_0x227915(0x24b)])this[_0x227915(0x3f4)]();this[_0x227915(0xb5d)](),this['updateBorderSprite']();},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x440)]=function(){const _0x45c49d=_0x3ffb9d;if(this[_0x45c49d(0x4a3)]!==Window_BattleStatus)return![];if(!SceneManager['isSceneBattle']())return![];return VisuMZ['BattleCore'][_0x45c49d(0x901)][_0x45c49d(0x190)][_0x45c49d(0x9ab)];},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3f4)]=function(){const _0x30e40e=_0x3ffb9d;this[_0x30e40e(0x24b)]=new Sprite();const _0x2060fc=SceneManager[_0x30e40e(0x947)],_0x1673f4=_0x2060fc[_0x30e40e(0xbc7)][_0x30e40e(0x76b)](_0x2060fc['_windowLayer']);_0x2060fc[_0x30e40e(0x7f3)](this[_0x30e40e(0x24b)],_0x1673f4),this[_0x30e40e(0x24b)][_0x30e40e(0xab2)]['x']=0.5,this[_0x30e40e(0x24b)][_0x30e40e(0xab2)]['y']=0x1;const _0x458d41=VisuMZ[_0x30e40e(0x80e)][_0x30e40e(0x901)][_0x30e40e(0x190)]['PortraitScaleBorderStyle'];this['_borderPortraitSprite'][_0x30e40e(0x530)]['x']=_0x458d41,this['_borderPortraitSprite'][_0x30e40e(0x530)]['y']=_0x458d41,this['_borderPortraitSprite']['y']=this['y']+this[_0x30e40e(0x8a0)],this['_borderPortraitDuration']=0x0;},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb5d)]=function(){const _0x2b7b34=_0x3ffb9d;this['_borderPortraitSprite']['visible']=BattleManager[_0x2b7b34(0x90c)]();const _0x5de1e8=BattleManager[_0x2b7b34(0x6aa)]();if(_0x5de1e8===this[_0x2b7b34(0x24b)]['actor'])return;this['_borderPortraitSprite'][_0x2b7b34(0x6aa)]=_0x5de1e8||this[_0x2b7b34(0x24b)][_0x2b7b34(0x6aa)];if(!_0x5de1e8)return;else{if(_0x5de1e8['getBattlePortraitFilename']()===''){this[_0x2b7b34(0x24b)][_0x2b7b34(0x6a0)]=ImageManager[_0x2b7b34(0x385)];return;}else{if('TIlgx'===_0x2b7b34(0x605))_0x4e9386['Actor'][_0x2b7b34(0xac1)]=![];else{const _0x83f01d=ImageManager[_0x2b7b34(0xac4)](_0x5de1e8[_0x2b7b34(0xa30)]());_0x83f01d['addLoadListener'](this[_0x2b7b34(0x334)]['bind'](this,_0x83f01d));}}}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x334)]=function(_0x570b5e){const _0x517f87=_0x3ffb9d;this['_borderPortraitDuration']=0x14,this[_0x517f87(0x24b)][_0x517f87(0x6a0)]=_0x570b5e;if(SceneManager[_0x517f87(0x947)][_0x517f87(0x4b4)]())'ADdtl'!==_0x517f87(0x495)?(this[_0x517f87(0x24b)]['x']=0x0,this[_0x517f87(0x41e)]=Math[_0x517f87(0x21e)](_0x570b5e[_0x517f87(0x7d6)]/0x2)):(this['push'](_0x517f87(0x22f)),this[_0x517f87(0x7dd)](_0x517f87(0x234)),this['push']('pushBaseLine'),this[_0x517f87(0x7dd)](_0x517f87(0x7dc),_0x625084[_0x517f87(0x757)]['format'](_0x4489f5[_0x517f87(0x453)]())),this[_0x517f87(0x7dd)](_0x517f87(0xb2d)));else{if(_0x517f87(0x1a4)==='sAChC')this['_borderPortraitSprite']['x']=this[_0x517f87(0x7d6)],this[_0x517f87(0x41e)]=this[_0x517f87(0x7d6)]*0x3/0x4;else return _0x3a9cfa[_0x517f87(0x829)]();}this[_0x517f87(0x24b)][_0x517f87(0x430)]=0x0,this[_0x517f87(0x24b)]['y']=this['y']+this['height'];const _0x1889af=BattleManager[_0x517f87(0x6aa)]();_0x1889af&&(_0x517f87(0x674)!==_0x517f87(0x9d9)?(this[_0x517f87(0x41e)]+=_0x1889af[_0x517f87(0x921)](),this[_0x517f87(0x24b)]['y']+=_0x1889af[_0x517f87(0xac0)]()):this[_0x517f87(0x733)]());},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2c7)]=function(){const _0x390d75=_0x3ffb9d;if(this[_0x390d75(0x591)]>0x0){if(_0x390d75(0xb46)===_0x390d75(0x82c)){if(_0x17ab3f[_0x390d75(0x710)]&&!_0x547d3f[_0x390d75(0xb59)])return this[_0x390d75(0x96e)]();else{return _0x469569['BattleCore'][_0x390d75(0xa1f)][_0x390d75(0x73d)](this);;}}else{const _0x5da7ff=this[_0x390d75(0x591)],_0x330e5b=this[_0x390d75(0x24b)];_0x330e5b['x']=(_0x330e5b['x']*(_0x5da7ff-0x1)+this[_0x390d75(0x41e)])/_0x5da7ff,_0x330e5b[_0x390d75(0x430)]=(_0x330e5b['opacity']*(_0x5da7ff-0x1)+0xff)/_0x5da7ff,this[_0x390d75(0x591)]--;}}},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x918)]=function(){const _0x39b01c=_0x3ffb9d;return;this['_effectsContainer']&&(_0x39b01c(0x3e2)===_0x39b01c(0x3e2)?(this['_effectsContainer']['x']=this['x'],this[_0x39b01c(0x1e6)]['y']=this['y']):(this[_0x39b01c(0x6c2)](),this[_0x39b01c(0x7e8)](),this[_0x39b01c(0xa0f)](),this[_0x39b01c(0x48d)](),this[_0x39b01c(0x826)]())),this[_0x39b01c(0xa14)]&&(this[_0x39b01c(0xa14)]['x']=this['x'],this[_0x39b01c(0xa14)]['y']=this['y']);},Window_BattleStatus[_0x3ffb9d(0xb66)][_0x3ffb9d(0x22d)]=function(){const _0x5ad1f3=_0x3ffb9d,_0x50c5ee=VisuMZ[_0x5ad1f3(0x80e)][_0x5ad1f3(0x901)][_0x5ad1f3(0x190)];if(_0x50c5ee[_0x5ad1f3(0x257)]){const _0x28cddc=new Sprite();_0x28cddc[_0x5ad1f3(0x6a0)]=ImageManager['loadSystem'](_0x50c5ee[_0x5ad1f3(0x257)]),_0x28cddc['x']=_0x50c5ee[_0x5ad1f3(0xbab)]||0x0,_0x28cddc['y']=_0x50c5ee[_0x5ad1f3(0x7f0)]||0x0,this[_0x5ad1f3(0xaff)](_0x28cddc),this[_0x5ad1f3(0x9db)]=_0x28cddc;}if(_0x50c5ee[_0x5ad1f3(0x4cd)]){const _0x1a475c=new Sprite();_0x1a475c[_0x5ad1f3(0x6a0)]=ImageManager[_0x5ad1f3(0x56b)](_0x50c5ee[_0x5ad1f3(0x4cd)]),_0x1a475c['x']=_0x50c5ee[_0x5ad1f3(0xa31)]||0x0,_0x1a475c['y']=_0x50c5ee[_0x5ad1f3(0x92d)]||0x0,this[_0x5ad1f3(0x237)](_0x1a475c),this[_0x5ad1f3(0x20b)]=_0x1a475c;}},Window_BattleStatus['prototype'][_0x3ffb9d(0x9f7)]=function(){const _0x1ad480=_0x3ffb9d;this[_0x1ad480(0x20b)]&&this['addChild'](this['_frontAttachmentSprite']);if(this[_0x1ad480(0x9db)]){if(_0x1ad480(0x194)!==_0x1ad480(0x194)){if(!this[_0x1ad480(0x2db)]())return;if(!this[_0x1ad480(0x391)])return;if(this['_targetAngle']===_0x4d5645)return;this['_targetAngle']=_0x18061b,this[_0x1ad480(0x745)]=_0xba15d9,this['_angleWholeDuration']=_0x6f91b7,this[_0x1ad480(0x490)]=_0xa53618||_0x1ad480(0xb45),this['_angleRevertOnFinish']=_0x291a67,this[_0x1ad480(0x505)]===_0x13a555&&(this['_angleRevertOnFinish']=!![]),_0x4ec642<=0x0&&(this[_0x1ad480(0x911)]=_0x3e8f2a,this[_0x1ad480(0x505)]&&(this[_0x1ad480(0x71f)]=0x0,this[_0x1ad480(0x911)]=0x0));}else this['addChildToBack'](this[_0x1ad480(0x9db)]);}},Window_BattleActor[_0x3ffb9d(0xb66)][_0x3ffb9d(0x265)]=function(){const _0x4377e5=_0x3ffb9d;return Window_BattleStatus[_0x4377e5(0xb66)]['isOkEnabled']['call'](this)&&this['isActionSelectionValid']();},Window_BattleActor['prototype'][_0x3ffb9d(0x852)]=function(){const _0x362e9a=_0x3ffb9d,_0x545b23=BattleManager[_0x362e9a(0x6e9)](),_0x2cbc59=this['actor'](this['index']());if(!_0x545b23)return!![];if(!_0x545b23[_0x362e9a(0x33b)]())return!![];const _0x14ef2a=_0x545b23['item']()[_0x362e9a(0x365)];if(_0x14ef2a[_0x362e9a(0x1b7)](/<CANNOT TARGET (?:USER|SELF)>/i)){if(_0x2cbc59===BattleManager['actor']())return![];}return!![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x192)]=Window_BattleEnemy['prototype']['initialize'],Window_BattleEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)]=function(_0x591862){const _0x10542d=_0x3ffb9d;this[_0x10542d(0xa82)]=null,VisuMZ[_0x10542d(0x80e)]['Window_BattleEnemy_initialize']['call'](this,_0x591862);},Window_BattleEnemy['prototype']['maxCols']=function(){const _0x2072c9=_0x3ffb9d;return this[_0x2072c9(0x7d9)]();},VisuMZ['BattleCore'][_0x3ffb9d(0x281)]=Window_BattleEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4cc)],Window_BattleEnemy['prototype']['show']=function(){const _0x2a8103=_0x3ffb9d;VisuMZ[_0x2a8103(0x80e)][_0x2a8103(0x281)][_0x2a8103(0x73d)](this),this['y']=Graphics['height']*0xa;},Window_BattleEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa23)]=function(){const _0x42443f=_0x3ffb9d;return $gameTroop[_0x42443f(0x735)]()[_0x42443f(0xa39)](0x0);},Window_BattleEnemy['prototype'][_0x3ffb9d(0x96b)]=function(){const _0x2a216e=_0x3ffb9d;this[_0x2a216e(0x24f)]=this[_0x2a216e(0xa23)](),this[_0x2a216e(0xa75)](),Window_Selectable[_0x2a216e(0xb66)][_0x2a216e(0x96b)][_0x2a216e(0x73d)](this);},Window_BattleEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa75)]=function(){const _0x535f2e=_0x3ffb9d;this['_enemies']['sort']((_0x50b0c8,_0xa1846b)=>{const _0x5cc75d=_0x2630;return _0x50b0c8[_0x5cc75d(0x491)]()[_0x5cc75d(0x904)]===_0xa1846b[_0x5cc75d(0x491)]()[_0x5cc75d(0x904)]?_0x50b0c8['battler']()[_0x5cc75d(0x531)]-_0xa1846b[_0x5cc75d(0x491)]()[_0x5cc75d(0x531)]:_0x50b0c8[_0x5cc75d(0x491)]()['_baseX']-_0xa1846b[_0x5cc75d(0x491)]()[_0x5cc75d(0x904)];}),SceneManager[_0x535f2e(0xb0b)]()&&this[_0x535f2e(0x24f)][_0x535f2e(0x426)]();},Window_BattleEnemy['prototype']['autoSelect']=function(){const _0x14c674=_0x3ffb9d,_0x538a8d=VisuMZ[_0x14c674(0x80e)][_0x14c674(0x901)][_0x14c674(0x5e5)];if(_0x538a8d[_0x14c674(0xba7)]){if('JufwA'!==_0x14c674(0x814))this[_0x14c674(0x732)]();else{this[_0x14c674(0x465)]()[_0x14c674(0x237)](_0x504005);if(_0xff8939['isBattleFlipped']())_0x26cb97[_0x14c674(0x530)]['x']=-0x1;}}else{if('lIfXR'!==_0x14c674(0x5ed)){if(!_0x27d5e8[_0x14c674(0x341)]())return;const _0x17a600=_0x3f5857['getLastPluginCommandInterpreter']();if(!_0x17a600)return;_0x17a600[_0x14c674(0x27b)](_0x14c674(0x3eb));}else this[_0x14c674(0x312)]();}},Window_BattleEnemy[_0x3ffb9d(0xb66)][_0x3ffb9d(0x732)]=function(){const _0x1866ef=_0x3ffb9d;if(this['_lastEnemy']&&this[_0x1866ef(0x24f)][_0x1866ef(0x802)](this['_lastEnemy'])){if(_0x1866ef(0x8ee)==='ISxOb'){const _0x59308d=this['_enemies'][_0x1866ef(0x76b)](this['_lastEnemy']);this['forceSelect'](_0x59308d);}else _0x11234f['collapse']=!![];}else{if(_0x1866ef(0x555)===_0x1866ef(0x3f1))return this[_0x1866ef(0xc11)]()&&this[_0x1866ef(0x3aa)]()[_0x1866ef(0x1b7)](/\$/i);else this[_0x1866ef(0x312)]();}},Window_BattleEnemy[_0x3ffb9d(0xb66)]['autoSelectPriority']=function(){const _0x54d10a=_0x3ffb9d,_0xe9d574=VisuMZ['BattleCore'][_0x54d10a(0x901)][_0x54d10a(0x5e5)];let _0x108f2b=![];$gameSystem[_0x54d10a(0x6de)]()?_0x108f2b=_0xe9d574[_0x54d10a(0x9a4)]:_0x108f2b=_0xe9d574[_0x54d10a(0x79f)],this[_0x54d10a(0x70d)](_0x108f2b?this['maxItems']()-0x1:0x0);},Window_BattleEnemy['prototype'][_0x3ffb9d(0x38a)]=function(){const _0x29208e=_0x3ffb9d;Window_Selectable[_0x29208e(0xb66)][_0x29208e(0x38a)][_0x29208e(0x73d)](this),this[_0x29208e(0xa82)]=this[_0x29208e(0x402)]();},Window_BattleItem[_0x3ffb9d(0xb66)][_0x3ffb9d(0x802)]=function(_0x443ad5){const _0x48ffdf=_0x3ffb9d;if(!_0x443ad5)return![];return _0x443ad5[_0x48ffdf(0x90b)]===0x0||_0x443ad5[_0x48ffdf(0x90b)]===0x1;};function Window_AutoBattleCancel(){const _0x56794b=_0x3ffb9d;this[_0x56794b(0xacd)](...arguments);}Window_AutoBattleCancel['prototype']=Object['create'](Window_Base[_0x3ffb9d(0xb66)]),Window_AutoBattleCancel[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4a3)]=Window_AutoBattleCancel,Window_AutoBattleCancel['prototype']['initialize']=function(_0x2b924f){const _0x287bbf=_0x3ffb9d;Window_Base[_0x287bbf(0xb66)][_0x287bbf(0xacd)]['call'](this,_0x2b924f),this[_0x287bbf(0x4d3)](this[_0x287bbf(0xa06)]()),this[_0x287bbf(0x96b)]();},Window_AutoBattleCancel[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa06)]=function(){const _0x781bfd=_0x3ffb9d;return VisuMZ[_0x781bfd(0x80e)][_0x781bfd(0x901)][_0x781bfd(0x49f)]['AutoBattleBgType'];},Window_AutoBattleCancel['prototype'][_0x3ffb9d(0x96b)]=function(){const _0x10fad5=_0x3ffb9d;this[_0x10fad5(0x3d3)][_0x10fad5(0x75e)]();const _0x191aac=VisuMZ[_0x10fad5(0x80e)][_0x10fad5(0x901)][_0x10fad5(0x49f)]['AutoBattleMsg'],_0x199bb0=_0x191aac[_0x10fad5(0x4a7)](this['okButtonText'](),this[_0x10fad5(0x3e5)]()),_0x4ce5fc=this['textSizeEx'](_0x199bb0)[_0x10fad5(0x7d6)],_0x26c0ba=Math[_0x10fad5(0x9bd)]((this[_0x10fad5(0x2c2)]-_0x4ce5fc)/0x2);this[_0x10fad5(0xb91)](_0x199bb0,_0x26c0ba,0x0,_0x4ce5fc);},Window_AutoBattleCancel['prototype']['okButtonText']=function(){const _0x4ed1bb=_0x3ffb9d;if(Imported[_0x4ed1bb(0x820)])return TextManager['getInputButtonString']('ok');else{if('JsVbO'!==_0x4ed1bb(0x353)){const _0x1130bc=this[_0x4ed1bb(0x491)]();_0x1130bc&&(_0x1130bc[_0x4ed1bb(0x26c)](_0x538062),[_0x4ed1bb(0x243),_0x4ed1bb(0x8d5),_0x4ed1bb(0xc13)]['includes'](_0x37e31f)&&this['performWeaponAnimation']());}else return VisuMZ[_0x4ed1bb(0x80e)]['Settings']['AutoBattle']['AutoBattleOK'];}},Window_AutoBattleCancel['prototype'][_0x3ffb9d(0x3e5)]=function(){const _0x2cd0d8=_0x3ffb9d;return Imported[_0x2cd0d8(0x820)]?TextManager[_0x2cd0d8(0x5fe)](_0x2cd0d8(0x3fa)):VisuMZ[_0x2cd0d8(0x80e)]['Settings'][_0x2cd0d8(0x49f)][_0x2cd0d8(0xa3d)];},Window_AutoBattleCancel['prototype'][_0x3ffb9d(0x1e3)]=function(){const _0x5ed25b=_0x3ffb9d;Window_Base[_0x5ed25b(0xb66)][_0x5ed25b(0x1e3)][_0x5ed25b(0x73d)](this),this[_0x5ed25b(0x85e)](),this[_0x5ed25b(0x4c6)]();},Window_AutoBattleCancel[_0x3ffb9d(0xb66)][_0x3ffb9d(0x85e)]=function(){this['visible']=BattleManager['_autoBattle'];},Window_AutoBattleCancel[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4c6)]=function(){const _0x2e3adc=_0x3ffb9d;if(!BattleManager['_autoBattle'])return;(Input['isTriggered']('ok')||Input[_0x2e3adc(0x701)](_0x2e3adc(0x3fa))||TouchInput['isClicked']()||TouchInput[_0x2e3adc(0x7a2)]())&&(SoundManager[_0x2e3adc(0x470)](),BattleManager[_0x2e3adc(0x710)]=![],Input['clear'](),TouchInput['clear']());};function Window_EnemyName(){const _0x4e509b=_0x3ffb9d;this[_0x4e509b(0xacd)](...arguments);}function _0x2630(_0x5f106c,_0x247c7f){const _0xbbda3e=_0xbbda();return _0x2630=function(_0x2630b6,_0x505724){_0x2630b6=_0x2630b6-0x187;let _0x3e9e3=_0xbbda3e[_0x2630b6];return _0x3e9e3;},_0x2630(_0x5f106c,_0x247c7f);}Window_EnemyName[_0x3ffb9d(0xb66)]=Object['create'](Window_StatusBase['prototype']),Window_EnemyName['prototype'][_0x3ffb9d(0x4a3)]=Window_EnemyName,Window_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0xacd)]=function(_0x3a07ab){const _0x54ce9a=_0x3ffb9d;this['_enemyID']=_0x3a07ab,this['_text']='';const _0xb7c50f=new Rectangle(0x0,0x0,Graphics['boxWidth'],this[_0x54ce9a(0x230)]()*0x4);Window_StatusBase[_0x54ce9a(0xb66)][_0x54ce9a(0xacd)][_0x54ce9a(0x73d)](this,_0xb7c50f),this['setBackgroundType'](0x2),this[_0x54ce9a(0x405)]=0x0;},Window_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4f1)]=function(){this['padding']=0x0;},Window_EnemyName['prototype'][_0x3ffb9d(0x402)]=function(){const _0x164ce5=_0x3ffb9d;return $gameTroop[_0x164ce5(0x794)]()[this['_enemyID']];},Window_EnemyName['prototype'][_0x3ffb9d(0x1e3)]=function(){const _0x4ac3cc=_0x3ffb9d;Window_StatusBase[_0x4ac3cc(0xb66)][_0x4ac3cc(0x1e3)][_0x4ac3cc(0x73d)](this),this[_0x4ac3cc(0x402)]()&&this[_0x4ac3cc(0x402)]()[_0x4ac3cc(0x453)]()!==this[_0x4ac3cc(0xbb8)]&&(this[_0x4ac3cc(0xbb8)]=this[_0x4ac3cc(0x402)]()[_0x4ac3cc(0x453)](),this[_0x4ac3cc(0x96b)]()),this[_0x4ac3cc(0x1a2)](),this[_0x4ac3cc(0x712)]();},Window_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1a2)]=function(){const _0x230b0c=_0x3ffb9d;if(!this[_0x230b0c(0x402)]()){if(_0x230b0c(0x2fb)==='qdCEM'){if(this[_0x230b0c(0x405)]>0x0)this[_0x230b0c(0x405)]-=0x10;}else{const _0x531e53=_0xb43ecd[_0x230b0c(0x4a7)](_0x595747[_0x230b0c(0x453)](),_0x2f2733[_0x230b0c(0x196)](_0x54f04b));this['push'](_0x230b0c(0x234)),this[_0x230b0c(0x7dd)](_0x230b0c(0x664)),this[_0x230b0c(0x7dd)]('addText',_0x531e53),this[_0x230b0c(0x7dd)](_0x230b0c(0xb2d));}}else{if(this['enemy']()['isDead']()){if(this[_0x230b0c(0x405)]>0x0)this[_0x230b0c(0x405)]-=0x10;}else{if(SceneManager[_0x230b0c(0x947)]['_enemyWindow']&&SceneManager[_0x230b0c(0x947)][_0x230b0c(0xadb)][_0x230b0c(0x85c)]&&SceneManager['_scene']['_enemyWindow'][_0x230b0c(0x24f)][_0x230b0c(0x802)](this[_0x230b0c(0x402)]())){if(_0x230b0c(0x98d)!==_0x230b0c(0x98d)){const _0x1a4b1e=_0x262646[_0x230b0c(0x365)];if(_0x1a4b1e[_0x230b0c(0x1b7)](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](\d+)([%％])>/i))return _0x27d7fb(_0x1766be['$1'])*0.01;else{if(_0x1a4b1e['match'](/<SIDEVIEW SHADOW (?:SCALE|SCALE Y):[ ](.*)>/i))return _0x479892(_0x56f25e['$1'])||0x0;}}else{if(this[_0x230b0c(0x405)]<0xff)this[_0x230b0c(0x405)]+=0x10;}}else this[_0x230b0c(0x405)]>0x0&&(this[_0x230b0c(0x405)]-=0x10);}}},Window_EnemyName[_0x3ffb9d(0xb66)]['updatePosition']=function(){const _0x49cb93=_0x3ffb9d;if(!this[_0x49cb93(0x402)]())return;if(SceneManager['isBattleFlipped']()){if(_0x49cb93(0x329)!==_0x49cb93(0x329))return this['attackAnimationId1']();else this['x']=Graphics[_0x49cb93(0x8f0)]-this['enemy']()[_0x49cb93(0x491)]()[_0x49cb93(0x904)];}else{if(_0x49cb93(0xa46)!==_0x49cb93(0x862))this['x']=this[_0x49cb93(0x402)]()['battler']()[_0x49cb93(0x904)];else return 0x0;}this['x']-=Math[_0x49cb93(0x68f)](this[_0x49cb93(0x7d6)]/0x2),this['y']=this['enemy']()[_0x49cb93(0x491)]()[_0x49cb93(0x531)]-Math['round'](this[_0x49cb93(0x230)]()*1.5);const _0x5e4e9f=VisuMZ[_0x49cb93(0x80e)][_0x49cb93(0x901)][_0x49cb93(0x5e5)];this['x']+=_0x5e4e9f['NameOffsetX']||0x0,this['y']+=_0x5e4e9f['NameOffsetY']||0x0;},Window_EnemyName[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa4c)]=function(){const _0x3017f3=_0x3ffb9d;Window_Base[_0x3017f3(0xb66)][_0x3017f3(0xa4c)][_0x3017f3(0x73d)](this),this[_0x3017f3(0x3d3)][_0x3017f3(0xa51)]=VisuMZ[_0x3017f3(0x80e)][_0x3017f3(0x901)][_0x3017f3(0x5e5)]['NameFontSize'];},Window_EnemyName['prototype']['refresh']=function(){const _0x5aa23f=_0x3ffb9d;Window_StatusBase[_0x5aa23f(0xb66)][_0x5aa23f(0x96b)][_0x5aa23f(0x73d)](this),this[_0x5aa23f(0x3d3)][_0x5aa23f(0x75e)]();if(!this[_0x5aa23f(0x402)]())return;this[_0x5aa23f(0x40e)]();},Window_EnemyName['prototype']['drawEnemyName']=function(){const _0x4fb59a=_0x3ffb9d;this[_0x4fb59a(0xbb8)]=this[_0x4fb59a(0x402)]()[_0x4fb59a(0x453)]();const _0x43e32e=this['textSizeEx'](this[_0x4fb59a(0xbb8)])['width'],_0x284630=Math['round']((this[_0x4fb59a(0x2c2)]-_0x43e32e)/0x2);this['drawTextEx'](this[_0x4fb59a(0xbb8)],_0x284630,0x0,_0x43e32e+0x8);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x41d)]=function(){const _0x55c0f2=_0x3ffb9d;return VisuMZ[_0x55c0f2(0x80e)][_0x55c0f2(0x901)][_0x55c0f2(0x6c4)][_0x55c0f2(0x99c)];},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa57)]=function(){const _0x3ff1f8=_0x3ffb9d;return VisuMZ[_0x3ff1f8(0x80e)][_0x3ff1f8(0x901)]['BattleLog'][_0x3ff1f8(0x2d3)];},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb9c)]=function(){const _0x2d20de=_0x3ffb9d;return VisuMZ['BattleCore'][_0x2d20de(0x901)][_0x2d20de(0x6c4)][_0x2d20de(0xb41)];},Window_BattleLog[_0x3ffb9d(0xb66)]['isFastForward']=function(){return![];},Window_BattleLog[_0x3ffb9d(0xb66)]['actionEffect']=function(_0xda27b,_0x14dd4f){const _0xeee1db=_0x3ffb9d;this[_0xeee1db(0x384)](_0xeee1db(0x751)),BattleManager[_0xeee1db(0x372)](_0xda27b,_0x14dd4f),this[_0xeee1db(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x751)]=function(){this['callNextMethod']();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x7dd)]=function(_0x44f16f){const _0x283831=_0x3ffb9d,_0x15d344=Array[_0x283831(0xb66)][_0x283831(0xa39)][_0x283831(0x73d)](arguments,0x1),_0x49702c={'name':_0x44f16f,'params':_0x15d344},_0xb913e8=this[_0x283831(0x513)][_0x283831(0x2e9)](_0x3566e1=>_0x3566e1[_0x283831(0x453)])[_0x283831(0x76b)](_0x283831(0x751));if(_0xb913e8>=0x0){if(_0x283831(0xbae)!=='oZvcv')this[_0x283831(0x513)][_0x283831(0xa9d)](_0xb913e8,0x0,_0x49702c);else{const _0x1ea0b6=this[_0x283831(0x3fd)](_0x5e0911),_0x2255e9=this[_0x283831(0x1d3)](_0x19f24d),_0x35a7d7=this[_0x283831(0x95f)](_0x2255e9)[_0x283831(0x7d6)];this[_0x283831(0x6ca)](this[_0x283831(0xbeb)](_0x2787c9));const _0x43c00d=this[_0x283831(0x2a1)]();if(_0x43c00d==='right')this['drawTextEx'](_0x2255e9,_0x1ea0b6['x']+_0x1ea0b6[_0x283831(0x7d6)]-_0x35a7d7,_0x1ea0b6['y'],_0x35a7d7);else{if(_0x43c00d===_0x283831(0x5a8)){const _0x4b3e0b=_0x1ea0b6['x']+_0x43233a[_0x283831(0x9bd)]((_0x1ea0b6[_0x283831(0x7d6)]-_0x35a7d7)/0x2);this[_0x283831(0xb91)](_0x2255e9,_0x4b3e0b,_0x1ea0b6['y'],_0x35a7d7);}else this['drawTextEx'](_0x2255e9,_0x1ea0b6['x'],_0x1ea0b6['y'],_0x35a7d7);}}}else{if(_0x283831(0x963)===_0x283831(0x963))this['_methods'][_0x283831(0x7dd)](_0x49702c);else{if(!_0x5b6159[_0x283831(0x710)])return;(_0x6a4abf[_0x283831(0x701)]('ok')||_0x202e23['isTriggered']('cancel')||_0xd9a610[_0x283831(0x573)]()||_0x37a65f[_0x283831(0x7a2)]())&&(_0x4d67d[_0x283831(0x470)](),_0x25144a['_autoBattle']=![],_0x57162f[_0x283831(0x75e)](),_0x1a2517[_0x283831(0x75e)]());}}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x384)]=function(_0x32681c){const _0x3ba0a6=_0x3ffb9d,_0x2d55a0=Array[_0x3ba0a6(0xb66)][_0x3ba0a6(0xa39)]['call'](arguments,0x1);this[_0x3ba0a6(0x513)][_0x3ba0a6(0x384)]({'name':_0x32681c,'params':_0x2d55a0});},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x9a5)]=function(){const _0xea6949=_0x3ffb9d;if(!$gameTemp[_0xea6949(0x2aa)]())return;console[_0xea6949(0x9ce)](this['_methods'][_0xea6949(0x2e9)](_0x25c05d=>_0x25c05d[_0xea6949(0x453)])[_0xea6949(0x7ee)]('\x0a'));},VisuMZ['BattleCore'][_0x3ffb9d(0x5ba)]=Window_BattleLog['prototype'][_0x3ffb9d(0x96b)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x96b)]=function(){this['_requestRefresh']=!![];},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x3cb)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1e3)]=function(){const _0x4e9036=_0x3ffb9d;VisuMZ[_0x4e9036(0x80e)][_0x4e9036(0x3cb)]['call'](this);if(this[_0x4e9036(0xb85)])this['processRefresh']();},Window_BattleLog['prototype'][_0x3ffb9d(0x719)]=function(){const _0x499f45=_0x3ffb9d;this[_0x499f45(0xb85)]=![],VisuMZ[_0x499f45(0x80e)][_0x499f45(0x5ba)][_0x499f45(0x73d)](this);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6c0)]=function(_0x5064e7){const _0x18c01f=_0x3ffb9d;let _0x1b00d2=VisuMZ[_0x18c01f(0x80e)][_0x18c01f(0x901)][_0x18c01f(0x6c4)]['TextAlign'][_0x18c01f(0x456)]()[_0x18c01f(0x33a)](),_0x1abbc1=this['_lines'][_0x5064e7];if(_0x1abbc1[_0x18c01f(0x1b7)](/<LEFT>/i))_0x1b00d2=_0x18c01f(0xc04);else{if(_0x1abbc1[_0x18c01f(0x1b7)](/<CENTER>/i))_0x1b00d2=_0x18c01f(0x5a8);else{if(_0x1abbc1[_0x18c01f(0x1b7)](/<RIGHT>/i)){if(_0x18c01f(0xab0)==='PQysk')return _0x1939db[_0x18c01f(0xae9)](_0x7e8a4e=>_0x7e8a4e[_0x18c01f(0x3ad)]()&&_0x7e8a4e!==_0x4de80e);else _0x1b00d2=_0x18c01f(0x2ce);}}}_0x1abbc1=_0x1abbc1[_0x18c01f(0x515)](/<(?:LEFT|CENTER|RIGHT)>/gi,''),_0x1abbc1=_0x1abbc1['replace'](/\\I\[0\]/gi,'');const _0x425dfb=this[_0x18c01f(0x399)](_0x5064e7);this['contents'][_0x18c01f(0x87a)](_0x425dfb['x'],_0x425dfb['y'],_0x425dfb[_0x18c01f(0x7d6)],_0x425dfb['height']);const _0x401db7=this[_0x18c01f(0x95f)](_0x1abbc1)[_0x18c01f(0x7d6)];let _0x1de6e8=_0x425dfb['x'];if(_0x1b00d2==='center'){if(_0x18c01f(0x749)==='nJvUm'){const _0xefc16c=_0x10c838[0x0][_0x18c01f(0x4a7)](_0x2ac683[0x0],_0x52edd1[0x0]),_0x5776a9=_0x46660e[0x1][_0x18c01f(0x4a7)](_0x2c877d[0x1],_0x5948f1[0x1])['trim'](),_0x4bb4be=new _0x5383f7(_0x5adba5[_0x18c01f(0x4a7)](_0x5776a9),'i');_0xe3f6b[_0xefc16c]=_0x4bb4be;}else _0x1de6e8+=(_0x425dfb[_0x18c01f(0x7d6)]-_0x401db7)/0x2;}else _0x1b00d2===_0x18c01f(0x2ce)&&(_0x1de6e8+=_0x425dfb[_0x18c01f(0x7d6)]-_0x401db7);this[_0x18c01f(0xb91)](_0x1abbc1,_0x1de6e8,_0x425dfb['y'],_0x401db7+0x8);},Window_BattleLog['prototype'][_0x3ffb9d(0x7dc)]=function(_0x46598a){const _0xb8a978=_0x3ffb9d;this[_0xb8a978(0x539)][_0xb8a978(0x7dd)](_0x46598a),this[_0xb8a978(0x96b)](),this['callNextMethod']();},Window_BattleLog['prototype'][_0x3ffb9d(0x2b9)]=function(){const _0x49f8e8=_0x3ffb9d;let _0x1ff056=![];switch(this[_0x49f8e8(0x798)]){case _0x49f8e8(0xa4a):_0x1ff056=this[_0x49f8e8(0x9da)][_0x49f8e8(0x61f)]();break;case'movement':_0x1ff056=this[_0x49f8e8(0x9da)][_0x49f8e8(0x6fe)]();break;case'animation':_0x1ff056=this['_spriteset']['isAnimationPlaying']();break;case _0x49f8e8(0x642):_0x1ff056=this[_0x49f8e8(0x9da)][_0x49f8e8(0x74e)]();break;case _0x49f8e8(0x8e8):_0x1ff056=this[_0x49f8e8(0x9da)]['isAnyoneJumping']();break;case _0x49f8e8(0x430):_0x1ff056=this[_0x49f8e8(0x9da)]['isAnyoneChangingOpacity']();break;}return!_0x1ff056&&(this[_0x49f8e8(0x798)]=''),_0x1ff056;},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x785)]=function(){const _0x129a90=_0x3ffb9d;this['setWaitMode'](_0x129a90(0x4e2));},Window_BattleLog[_0x3ffb9d(0xb66)]['waitForFloat']=function(){const _0x15a59e=_0x3ffb9d;this[_0x15a59e(0x27b)]('float');},Window_BattleLog[_0x3ffb9d(0xb66)]['waitForJump']=function(){const _0x4d6b3c=_0x3ffb9d;this[_0x4d6b3c(0x27b)]('jump');},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x6bf)]=function(){const _0x445645=_0x3ffb9d;this[_0x445645(0x27b)](_0x445645(0x430));},Window_BattleLog['prototype'][_0x3ffb9d(0x5a5)]=function(){const _0x268052=_0x3ffb9d,_0x41f70e=VisuMZ[_0x268052(0x80e)][_0x268052(0x901)][_0x268052(0x6c4)];if(!_0x41f70e[_0x268052(0x38d)])return;this['push'](_0x268052(0x7dc),_0x41f70e['StartTurnMsg'][_0x268052(0x4a7)]($gameTroop['turnCount']())),this['push'](_0x268052(0x327),_0x41f70e[_0x268052(0x5c8)]),this['push'](_0x268052(0x75e));},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x578)]=function(_0x9f1272,_0x540634,_0x5af61c){const _0x5f1720=_0x3ffb9d;this['isCustomActionSequence'](_0x540634)?BattleManager[_0x5f1720(0x78e)]():this[_0x5f1720(0x5c7)](_0x9f1272,_0x540634,_0x5af61c);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x35a)]=function(_0x4ebe5b){const _0x2a4c77=_0x3ffb9d;if(!SceneManager['isSceneBattle']())return![];if(!_0x4ebe5b)return![];if(!_0x4ebe5b['item']())return![];if(_0x4ebe5b[_0x2a4c77(0x33b)]()[_0x2a4c77(0x365)][_0x2a4c77(0x1b7)](/<CUSTOM ACTION SEQUENCE>/i)){if(_0x2a4c77(0x4f0)!==_0x2a4c77(0x4f0)){_0x15bff2[_0x2a4c77(0x7a0)](_0x174f38[0x0],_0xb4e13c[0x1],_0x144620[0x2]);if(_0xf05e83[0x3])this[_0x2a4c77(0xb2d)](_0x2b3593[0x2]);return!![];}else return!![];}if(DataManager[_0x2a4c77(0x239)](_0x4ebe5b['item']()))return!![];return![];},Window_BattleLog['prototype'][_0x3ffb9d(0x5c7)]=function(_0x5f170b,_0x54d70c,_0x351a62){const _0x4f902d=_0x3ffb9d,_0x866c46=_0x54d70c[_0x4f902d(0x33b)]();this[_0x4f902d(0x42d)](_0x5f170b,_0x54d70c,_0x351a62),this[_0x4f902d(0xa20)](_0x5f170b,_0x54d70c,_0x351a62),this['finishActionSet'](_0x5f170b,_0x54d70c,_0x351a62);},Window_BattleLog['prototype'][_0x3ffb9d(0x941)]=function(_0x51e395,_0x4e4228){const _0x3260e5=_0x3ffb9d,_0x141dca=VisuMZ[_0x3260e5(0x80e)][_0x3260e5(0x901)][_0x3260e5(0x6c4)];_0x141dca[_0x3260e5(0x75a)]&&this[_0x3260e5(0x7dd)](_0x3260e5(0x7dc),'<CENTER>%1'[_0x3260e5(0x4a7)](DataManager[_0x3260e5(0xaec)](_0x4e4228)));if(DataManager[_0x3260e5(0x493)](_0x4e4228)){if('ysEMH'===_0x3260e5(0x7b0)){if(_0x141dca['ActionSkillMsg1'])this[_0x3260e5(0x235)](_0x4e4228['message1'],_0x51e395,_0x4e4228);if(_0x141dca[_0x3260e5(0x89c)])this[_0x3260e5(0x235)](_0x4e4228[_0x3260e5(0x275)],_0x51e395,_0x4e4228);}else _0x430d70=_0x2f002e[_0x3260e5(0x491)]()[_0x3260e5(0xb48)],_0x9c8a21=_0xcb4e00[_0x3260e5(0x491)]()[_0x3260e5(0xb27)];}else{if(_0x141dca[_0x3260e5(0x58e)])this['displayItemMessage'](TextManager[_0x3260e5(0x5bd)],_0x51e395,_0x4e4228);}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x42d)]=function(_0x114714,_0x3326b,_0xa6eca){const _0x45b3da=_0x3ffb9d,_0x1905e4=_0x3326b[_0x45b3da(0x33b)]();this[_0x45b3da(0x941)](_0x114714,_0x1905e4),this[_0x45b3da(0x7dd)](_0x45b3da(0x80f),_0x114714,_0xa6eca,!![]),this[_0x45b3da(0x7dd)](_0x45b3da(0xb4c),_0x114714,_0x3326b),this[_0x45b3da(0x7dd)]('waitForMovement'),this['push'](_0x45b3da(0x680),_0x114714,_0x3326b),this[_0x45b3da(0x7dd)](_0x45b3da(0x785));},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa20)]=function(_0x107006,_0x506d83,_0x474ad9){const _0x3752e2=_0x3ffb9d;if(this[_0x3752e2(0x6ea)](_0x506d83))this[_0x3752e2(0x19d)](_0x107006,_0x506d83,_0x474ad9);else{if(this[_0x3752e2(0x5ea)](_0x506d83))this['autoMeleeMultiTargetActionSet'](_0x107006,_0x506d83,_0x474ad9);else _0x506d83[_0x3752e2(0xa79)]()?'ZvEmu'==='hvGje'?this[_0x3752e2(0x42c)](_0x3752e2(0x880)):this['targetActionSet'](_0x107006,_0x506d83,_0x474ad9):this[_0x3752e2(0xa9a)](_0x107006,_0x506d83,_0x474ad9);}},Window_BattleLog['prototype'][_0x3ffb9d(0x6ea)]=function(_0x13fa65){const _0x268322=_0x3ffb9d;if(!_0x13fa65[_0x268322(0x94e)]())return![];if(!_0x13fa65['isForOne']())return![];if(!_0x13fa65[_0x268322(0x623)]())return![];return VisuMZ['BattleCore']['Settings'][_0x268322(0x1aa)]['AutoMeleeSolo'];},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x19d)]=function(_0x29fb99,_0x5997c2,_0x546b67){const _0x456624=_0x3ffb9d,_0x1751ad=_0x29fb99[_0x456624(0x5df)]()[_0x456624(0x97d)]<0x2,_0x2ffc17=0x14,_0x83632b=0x30;if(_0x1751ad){if(_0x456624(0x238)!=='jUusW')this[_0x456624(0x7dd)](_0x456624(0xbcf),[_0x29fb99],_0x83632b,_0x2ffc17),this[_0x456624(0x7dd)](_0x456624(0x5f9),_0x29fb99,_0x546b67,_0x456624(0x38c),_0x2ffc17,!![],_0x456624(0xb45),!![]),this[_0x456624(0x7dd)]('requestMotion',[_0x29fb99],_0x456624(0x236)),this[_0x456624(0x7dd)](_0x456624(0x361));else{if(_0x4fee8c[_0x456624(0x80e)]['Settings']['ActionSequence']['ReflectPlayback']){const _0x97901=_0x5ad29c[_0x456624(0x33b)]();this['push']('showAnimation',_0x5200a5,[_0x4d73b4],_0x97901[_0x456624(0xacf)]);}}}let _0x56a1d0=_0x5997c2['isAttack']()?this[_0x456624(0x1c9)](_0x29fb99):0x1;for(let _0x1af062=0x0;_0x1af062<_0x56a1d0;_0x1af062++){if(_0x5997c2[_0x456624(0xaf5)]()&&_0x29fb99[_0x456624(0x2bb)]()){if(_0x456624(0xbdc)!==_0x456624(0xbdc)){const _0x1f3bdf=[];for(let _0x2ea213=0x0;_0x2ea213<this[_0x456624(0x1d5)]();_0x2ea213++){_0x1f3bdf[_0x456624(0x7dd)](_0x2a38cf[_0x456624(0xbf1)]());}return _0x1f3bdf;}else this[_0x456624(0x7dd)](_0x456624(0x348),_0x29fb99,_0x1af062);}_0x5997c2[_0x456624(0x33b)]()[_0x456624(0xacf)]<0x0?_0x456624(0x855)!==_0x456624(0x855)?_0x2601a5=_0x19c155:this['targetActionSet'](_0x29fb99,_0x5997c2,_0x546b67):this[_0x456624(0xa9a)](_0x29fb99,_0x5997c2,_0x546b67);}_0x5997c2[_0x456624(0xaf5)]()&&_0x29fb99[_0x456624(0x2bb)]()&&this[_0x456624(0x7dd)](_0x456624(0x5de),_0x29fb99);this['push'](_0x456624(0x80f),_0x29fb99,_0x546b67,![]);if(_0x1751ad){const _0x4b755e=_0x29fb99[_0x456624(0x491)]();this['push']('performJump',[_0x29fb99],_0x83632b,_0x2ffc17),this['push'](_0x456624(0xa43),_0x29fb99,_0x4b755e[_0x456624(0xb48)],_0x4b755e[_0x456624(0xb27)],_0x2ffc17,![],_0x456624(0xb45)),this[_0x456624(0x7dd)]('requestMotion',[_0x29fb99],_0x456624(0x6a2)),this[_0x456624(0x7dd)]('waitForMovement'),this[_0x456624(0x7dd)]('requestMotion',[_0x29fb99],'walk');}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5ea)]=function(_0x5ac83b){const _0x7e22b1=_0x3ffb9d;if(!_0x5ac83b['isPhysical']())return![];if(!_0x5ac83b[_0x7e22b1(0x22a)]())return![];if(!_0x5ac83b[_0x7e22b1(0x623)]())return![];return VisuMZ[_0x7e22b1(0x80e)][_0x7e22b1(0x901)]['ActionSequence'][_0x7e22b1(0x69d)];},Window_BattleLog['prototype'][_0x3ffb9d(0x723)]=function(_0x54faaf,_0x1c913e,_0x208762){const _0x538f67=_0x3ffb9d,_0x461b81=_0x54faaf['getAttackMotion']()[_0x538f67(0x97d)]<0x2,_0x1027c1=0x14,_0x66d71c=0x30;if(_0x461b81){if(_0x538f67(0x5ff)===_0x538f67(0x5ff))this[_0x538f67(0x7dd)](_0x538f67(0xbcf),[_0x54faaf],_0x66d71c,_0x1027c1),this[_0x538f67(0x7dd)](_0x538f67(0x5f9),_0x54faaf,_0x208762,_0x538f67(0x6f1),_0x1027c1,!![],'Linear',!![]),this[_0x538f67(0x7dd)](_0x538f67(0x42c),[_0x54faaf],_0x538f67(0x236)),this[_0x538f67(0x7dd)](_0x538f67(0x361));else{const _0x56cd33=this['_battler']&&this[_0x538f67(0x8fa)][_0x538f67(0x9e5)]();this[_0x538f67(0xbd8)]=(_0x56cd33?-0x1:0x1)*_0x40342f[_0x538f67(0x8f4)](this[_0x538f67(0x530)]['x']);}}let _0x451f4c=_0x1c913e[_0x538f67(0xaf5)]()?this[_0x538f67(0x1c9)](_0x54faaf):0x1;for(let _0x481156=0x0;_0x481156<_0x451f4c;_0x481156++){_0x1c913e[_0x538f67(0xaf5)]()&&_0x54faaf[_0x538f67(0x2bb)]()&&this['push']('setActiveWeaponSet',_0x54faaf,_0x481156),this[_0x538f67(0xa9a)](_0x54faaf,_0x1c913e,_0x208762);}_0x1c913e['isAttack']()&&_0x54faaf[_0x538f67(0x2bb)]()&&this['push'](_0x538f67(0x5de),_0x54faaf);this[_0x538f67(0x7dd)](_0x538f67(0x80f),_0x54faaf,_0x208762,![]);if(_0x461b81){if(_0x538f67(0x5c0)===_0x538f67(0x878)){if(!_0x4cc2df[_0x538f67(0x341)]())return;const _0x2a8f13=_0x5f59c2[_0x538f67(0x492)];_0x2a8f13['clear']();}else{const _0x299470=_0x54faaf[_0x538f67(0x491)]();this[_0x538f67(0x7dd)](_0x538f67(0xbcf),[_0x54faaf],_0x66d71c,_0x1027c1),this['push'](_0x538f67(0xa43),_0x54faaf,_0x299470[_0x538f67(0xb48)],_0x299470[_0x538f67(0xb27)],_0x1027c1,![],'Linear'),this[_0x538f67(0x7dd)](_0x538f67(0x42c),[_0x54faaf],_0x538f67(0x6a2)),this['push']('waitForMovement'),this[_0x538f67(0x7dd)](_0x538f67(0x42c),[_0x54faaf],_0x538f67(0x236));}}},Window_BattleLog['prototype'][_0x3ffb9d(0x5b5)]=function(_0x4f4aed,_0x138283,_0x55f4c8){const _0x4210cb=_0x3ffb9d,_0x3235c4=_0x138283['item']();for(const _0x3d7836 of _0x55f4c8){if(!_0x3d7836)continue;this['push']('performAction',_0x4f4aed,_0x138283),this['push'](_0x4210cb(0x327),Sprite_Battler['_motionSpeed']),this[_0x4210cb(0x7dd)](_0x4210cb(0xb5c),_0x4f4aed,[_0x3d7836],_0x3235c4[_0x4210cb(0xacf)]),this[_0x4210cb(0x7dd)](_0x4210cb(0x327),0x18),this[_0x4210cb(0x7dd)](_0x4210cb(0x3a9),_0x4f4aed,_0x3d7836);}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa9a)]=function(_0xf3415d,_0x30ac48,_0x2c519f){const _0x328fc1=_0x3ffb9d,_0xe5b3c3=_0x30ac48[_0x328fc1(0x33b)]();this['push']('performAction',_0xf3415d,_0x30ac48),this['push'](_0x328fc1(0x327),Sprite_Battler[_0x328fc1(0x1f6)]),this[_0x328fc1(0x7dd)](_0x328fc1(0xb5c),_0xf3415d,_0x2c519f[_0x328fc1(0xb0a)](),_0xe5b3c3[_0x328fc1(0xacf)]),this[_0x328fc1(0x7dd)]('waitForAnimation');for(const _0x8ea0d3 of _0x2c519f){if(_0x328fc1(0xb96)==='Mgrtc'){if(!_0x8ea0d3)continue;this['push'](_0x328fc1(0x3a9),_0xf3415d,_0x8ea0d3);}else{if(!_0x531c1d)return;for(const _0x39aad3 of _0x5c6c36[_0x328fc1(0x728)]){if([0x6c,0x198][_0x328fc1(0x802)](_0x39aad3['code'])){const _0x21ba1c=_0x39aad3[_0x328fc1(0x32d)][0x0];if(_0x21ba1c[_0x328fc1(0x1b7)](/<ONCE PARALLEL WHEN START BATTLE>/i))return!![];}}return![];}}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5fd)]=function(_0x48bf28,_0x389e94,_0x584a63){const _0x4227d7=_0x3ffb9d,_0x15c95a=_0x389e94[_0x4227d7(0x33b)]();this[_0x4227d7(0x7dd)](_0x4227d7(0x80f),_0x48bf28,_0x584a63,![]),this[_0x4227d7(0x7dd)]('waitForNewLine'),this[_0x4227d7(0x7dd)](_0x4227d7(0xb4e)),this[_0x4227d7(0x7dd)](_0x4227d7(0x75e)),this[_0x4227d7(0x7dd)](_0x4227d7(0xb93),_0x48bf28),this[_0x4227d7(0x7dd)](_0x4227d7(0x361));},Window_BattleLog[_0x3ffb9d(0xb66)]['endAction']=function(_0x9a4453){},VisuMZ['BattleCore']['Window_BattleLog_displayCurrentState']=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa40)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa40)]=function(_0xf64257){const _0x4577f1=_0x3ffb9d;if(!VisuMZ[_0x4577f1(0x80e)][_0x4577f1(0x901)][_0x4577f1(0x6c4)][_0x4577f1(0x593)])return;VisuMZ[_0x4577f1(0x80e)][_0x4577f1(0xb20)][_0x4577f1(0x73d)](this,_0xf64257);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2fe)]=function(_0x1ff134){const _0x51b49f=_0x3ffb9d;this[_0x51b49f(0x7dd)](_0x51b49f(0x53d),_0x1ff134);VisuMZ[_0x51b49f(0x80e)][_0x51b49f(0x901)][_0x51b49f(0x1aa)][_0x51b49f(0x36c)]&&('dTelh'!==_0x51b49f(0x1cf)?(_0x5081ce['prototype']['performDamage'][_0x51b49f(0x73d)](this),this['isSpriteVisible']()&&this['hasSvBattler']()&&this[_0x51b49f(0x42c)](_0x51b49f(0xbfc)),_0x380e18[_0x51b49f(0x7be)]()):this[_0x51b49f(0x7dd)](_0x51b49f(0xb5c),_0x1ff134,[BattleManager[_0x51b49f(0xa98)]],-0x1));if(!VisuMZ[_0x51b49f(0x80e)]['Settings'][_0x51b49f(0x6c4)][_0x51b49f(0xb72)])return;this[_0x51b49f(0x7dd)]('addText',TextManager[_0x51b49f(0x282)][_0x51b49f(0x4a7)](_0x1ff134['name']()));},Window_BattleLog[_0x3ffb9d(0xb66)]['displayReflection']=function(_0x189db6){const _0x21a5b8=_0x3ffb9d;this['push'](_0x21a5b8(0x224),_0x189db6);if(!VisuMZ[_0x21a5b8(0x80e)][_0x21a5b8(0x901)][_0x21a5b8(0x6c4)][_0x21a5b8(0x91a)])return;this[_0x21a5b8(0x7dd)]('addText',TextManager[_0x21a5b8(0x7b7)]['format'](_0x189db6[_0x21a5b8(0x453)]()));},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x56d)]=function(_0x30cfec,_0x2b9eec){const _0x1f8dd1=_0x3ffb9d;if(VisuMZ[_0x1f8dd1(0x80e)]['Settings'][_0x1f8dd1(0x1aa)][_0x1f8dd1(0xa00)]){if('yQVyh'!==_0x1f8dd1(0x525))this[_0x1f8dd1(0x913)]()['canGuard']()&&_0x23d017[_0x1f8dd1(0x80e)]['Game_Action_setGuard'][_0x1f8dd1(0x73d)](this);else{const _0xdc77db=_0x2b9eec['item']();this['push']('showAnimation',_0x30cfec,[_0x30cfec],_0xdc77db['animationId']);}}},Window_BattleLog[_0x3ffb9d(0xb66)]['displaySubstitute']=function(_0x107b2e,_0x1fd62c){const _0x183f37=_0x3ffb9d;this[_0x183f37(0x7dd)](_0x183f37(0xa9c),_0x107b2e,_0x1fd62c);if(!VisuMZ['BattleCore'][_0x183f37(0x901)][_0x183f37(0x6c4)][_0x183f37(0xbb3)])return;const _0x3272c6=_0x107b2e[_0x183f37(0x453)](),_0x3eb67d=TextManager[_0x183f37(0xb25)][_0x183f37(0x4a7)](_0x3272c6,_0x1fd62c[_0x183f37(0x453)]());this[_0x183f37(0x7dd)]('addText',_0x3eb67d);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x1d2)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x3b4)],Window_BattleLog[_0x3ffb9d(0xb66)]['displayActionResults']=function(_0x4a8b77,_0x103cbc){const _0x4d4219=_0x3ffb9d;VisuMZ[_0x4d4219(0x80e)][_0x4d4219(0x1d2)][_0x4d4219(0x73d)](this,_0x4a8b77,_0x103cbc);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x83b)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x30c)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x30c)]=function(_0x107aa1){const _0x41e665=_0x3ffb9d;if(!VisuMZ[_0x41e665(0x80e)][_0x41e665(0x901)]['BattleLog'][_0x41e665(0x279)])return;VisuMZ[_0x41e665(0x80e)][_0x41e665(0x83b)][_0x41e665(0x73d)](this,_0x107aa1);},VisuMZ[_0x3ffb9d(0x80e)]['Window_BattleLog_displayCritical']=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x51a)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x51a)]=function(_0x166fc4){const _0x514bdc=_0x3ffb9d;if(!VisuMZ[_0x514bdc(0x80e)][_0x514bdc(0x901)][_0x514bdc(0x6c4)][_0x514bdc(0xb8e)])return;VisuMZ[_0x514bdc(0x80e)]['Window_BattleLog_displayCritical'][_0x514bdc(0x73d)](this,_0x166fc4);},VisuMZ['BattleCore'][_0x3ffb9d(0x84a)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbc4)],Window_BattleLog[_0x3ffb9d(0xb66)]['displayMiss']=function(_0x305088){const _0xfa220a=_0x3ffb9d;!VisuMZ[_0xfa220a(0x80e)][_0xfa220a(0x901)]['BattleLog'][_0xfa220a(0xb2c)]?this[_0xfa220a(0x7dd)]('performMiss',_0x305088):VisuMZ['BattleCore'][_0xfa220a(0x84a)]['call'](this,_0x305088);},VisuMZ['BattleCore'][_0x3ffb9d(0x371)]=Window_BattleLog['prototype']['displayEvasion'],Window_BattleLog[_0x3ffb9d(0xb66)]['displayEvasion']=function(_0x175951){const _0x5e3883=_0x3ffb9d;if(!VisuMZ[_0x5e3883(0x80e)][_0x5e3883(0x901)]['BattleLog'][_0x5e3883(0xb2c)]){if(_0x175951[_0x5e3883(0x436)]()[_0x5e3883(0x99f)])this[_0x5e3883(0x7dd)](_0x5e3883(0x96f),_0x175951);else{if(_0x5e3883(0x1e9)!==_0x5e3883(0x79a))this['push'](_0x5e3883(0x2a2),_0x175951);else{const _0x51547a=_0x2b438f[_0x5e3883(0x76b)](_0x596e83['toUpperCase']()[_0x5e3883(0x33a)]());_0x51547a>=0x0&&_0x51547a<=0x7&&_0x14e0a6['addBuff'](_0x51547a,_0x34dd3f);}}}else VisuMZ[_0x5e3883(0x80e)][_0x5e3883(0x371)]['call'](this,_0x175951);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x759)]=function(_0x5373b7){const _0x56834a=_0x3ffb9d;if(_0x5373b7[_0x56834a(0x436)]()[_0x56834a(0x3e4)]){if('wWdPA'!==_0x56834a(0xb7e))this[_0x56834a(0xa84)]('wait');else{_0x5373b7[_0x56834a(0x436)]()[_0x56834a(0xa10)]>0x0&&!_0x5373b7[_0x56834a(0x436)]()['drain']&&this[_0x56834a(0x7dd)](_0x56834a(0x887),_0x5373b7);_0x5373b7[_0x56834a(0x436)]()[_0x56834a(0xa10)]<0x0&&this[_0x56834a(0x7dd)](_0x56834a(0x2ed),_0x5373b7);if(VisuMZ[_0x56834a(0x80e)][_0x56834a(0x901)]['BattleLog'][_0x56834a(0x255)]){if(_0x56834a(0x6a6)===_0x56834a(0xab3)){const _0x4734a5=_0x2869de(_0x4c9a24['$1'])[_0x56834a(0x33a)](),_0xd7736e=_0x2ae1a1(_0x2cdce8['$2']);_0x7e6fdc[_0x4734a5]=_0xd7736e,_0x3f0cbe+=_0xd7736e;}else this[_0x56834a(0x7dd)](_0x56834a(0x7dc),this['makeHpDamageText'](_0x5373b7));}}}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x3fc)]=Window_BattleLog['prototype'][_0x3ffb9d(0x34f)],Window_BattleLog[_0x3ffb9d(0xb66)]['displayMpDamage']=function(_0x226d3a){const _0x367a71=_0x3ffb9d;if(!VisuMZ[_0x367a71(0x80e)]['Settings'][_0x367a71(0x6c4)][_0x367a71(0xb39)])return;VisuMZ[_0x367a71(0x80e)][_0x367a71(0x3fc)][_0x367a71(0x73d)](this,_0x226d3a);},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x602)]=Window_BattleLog['prototype'][_0x3ffb9d(0x816)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x816)]=function(_0xc3eb5f){const _0x152ff3=_0x3ffb9d;if(!VisuMZ[_0x152ff3(0x80e)][_0x152ff3(0x901)][_0x152ff3(0x6c4)][_0x152ff3(0xbc0)])return;VisuMZ[_0x152ff3(0x80e)][_0x152ff3(0x602)][_0x152ff3(0x73d)](this,_0xc3eb5f);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x21d)]=function(_0x33cab2){const _0x2b7d92=_0x3ffb9d;_0x33cab2[_0x2b7d92(0x436)]()[_0x2b7d92(0x554)]()&&(this[_0x2b7d92(0x7dd)]('pushBaseLine'),this['displayChangedStates'](_0x33cab2),this[_0x2b7d92(0xa18)](_0x33cab2),this[_0x2b7d92(0x7dd)](_0x2b7d92(0x1c4)));},Window_BattleLog[_0x3ffb9d(0xb66)]['displayAddedStates']=function(_0x287a76){const _0x2ed47f=_0x3ffb9d,_0x5184a6=_0x287a76[_0x2ed47f(0x436)](),_0x3ee1fa=_0x5184a6['addedStateObjects']();for(const _0x295892 of _0x3ee1fa){const _0x85f23c=_0x287a76[_0x2ed47f(0x2bb)]()?_0x295892['message1']:_0x295892[_0x2ed47f(0x275)];if(_0x85f23c&&VisuMZ['BattleCore'][_0x2ed47f(0x901)][_0x2ed47f(0x6c4)][_0x2ed47f(0x37b)]){if(_0x2ed47f(0x5d4)!==_0x2ed47f(0x67a))this[_0x2ed47f(0x7dd)](_0x2ed47f(0x305)),this[_0x2ed47f(0x7dd)](_0x2ed47f(0x234)),this[_0x2ed47f(0x7dd)](_0x2ed47f(0x664)),this[_0x2ed47f(0x7dd)](_0x2ed47f(0x7dc),_0x85f23c[_0x2ed47f(0x4a7)](_0x287a76[_0x2ed47f(0x453)]())),this[_0x2ed47f(0x7dd)](_0x2ed47f(0xb2d));else return this['_isBattlerFlipped'];}if(_0x295892['id']===_0x287a76[_0x2ed47f(0x597)]()){if(_0x2ed47f(0x3f3)!=='RveCM'){if(this[_0x2ed47f(0x8fa)]&&this['_battler'][_0x2ed47f(0xaed)]){const _0x4279c9=this[_0x2ed47f(0x8fa)][_0x2ed47f(0xaed)];this[_0x2ed47f(0x83a)]=_0x37a9ef[_0x2ed47f(0x76d)][_0x4279c9[_0x2ed47f(0x748)]],this[_0x2ed47f(0xb5a)]=_0x4279c9['pattern'];const _0x44ef4d=this['_weaponSprite'];_0x44ef4d[_0x2ed47f(0x3e8)](_0x4279c9[_0x2ed47f(0x29b)],_0x4279c9[_0x2ed47f(0x24a)]),this['adjustWeaponSpriteOffset']();}}else this['push'](_0x2ed47f(0x4b3),_0x287a76);}}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x305)]=function(){},Window_BattleLog['prototype'][_0x3ffb9d(0x850)]=function(_0x32b559){const _0x298e0d=_0x3ffb9d;if(!VisuMZ[_0x298e0d(0x80e)]['Settings'][_0x298e0d(0x6c4)][_0x298e0d(0x7fc)])return;const _0x5699d6=_0x32b559[_0x298e0d(0x436)](),_0x4cd836=_0x5699d6[_0x298e0d(0x55d)]();for(const _0x564cb6 of _0x4cd836){_0x564cb6[_0x298e0d(0x757)]&&(_0x298e0d(0x3ca)!==_0x298e0d(0xbee)?(this[_0x298e0d(0x7dd)](_0x298e0d(0x22f)),this[_0x298e0d(0x7dd)](_0x298e0d(0x234)),this['push'](_0x298e0d(0x664)),this[_0x298e0d(0x7dd)]('addText',_0x564cb6[_0x298e0d(0x757)][_0x298e0d(0x4a7)](_0x32b559[_0x298e0d(0x453)]())),this[_0x298e0d(0x7dd)](_0x298e0d(0xb2d))):(this[_0x298e0d(0x4ff)]=this[_0x298e0d(0x678)]['slice'](0x0),this[_0x298e0d(0x7b2)]=0x0,this[_0x298e0d(0x6e0)]=this[_0x298e0d(0x4ff)][0x0]||null,this['_phase']=_0x298e0d(0x589)));}},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x22f)]=function(){},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa18)]=function(_0x258431){const _0x4190fb=_0x3ffb9d,_0x258375=VisuMZ[_0x4190fb(0x80e)]['Settings']['BattleLog'],_0x56d54c=_0x258431['result']();if(_0x258375[_0x4190fb(0x3f5)])this['displayBuffs'](_0x258431,_0x56d54c[_0x4190fb(0xb33)],TextManager[_0x4190fb(0x445)]);if(_0x258375[_0x4190fb(0x45a)])this[_0x4190fb(0xb8a)](_0x258431,_0x56d54c[_0x4190fb(0x3a7)],TextManager['debuffAdd']);if(_0x258375[_0x4190fb(0x2fc)])this[_0x4190fb(0xb8a)](_0x258431,_0x56d54c['removedBuffs'],TextManager['buffRemove']);},Window_BattleLog['prototype']['displayBuffs']=function(_0x2aef23,_0x581647,_0x1adf20){const _0x5624a0=_0x3ffb9d;for(const _0x57f24a of _0x581647){const _0x51dd60=_0x1adf20[_0x5624a0(0x4a7)](_0x2aef23[_0x5624a0(0x453)](),TextManager['param'](_0x57f24a));this[_0x5624a0(0x7dd)]('popBaseLine'),this['push'](_0x5624a0(0x664)),this[_0x5624a0(0x7dd)](_0x5624a0(0x7dc),_0x51dd60),this[_0x5624a0(0x7dd)](_0x5624a0(0xb2d));}},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0xb35)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x75e)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x75e)]=function(){const _0x39e625=_0x3ffb9d;VisuMZ[_0x39e625(0x80e)][_0x39e625(0xb35)][_0x39e625(0x73d)](this),this[_0x39e625(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2ec)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x664)],Window_BattleLog['prototype'][_0x3ffb9d(0x664)]=function(){const _0x13c5e7=_0x3ffb9d;VisuMZ[_0x13c5e7(0x80e)][_0x13c5e7(0x2ec)][_0x13c5e7(0x73d)](this),this[_0x13c5e7(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)]['Window_BattleLog_popBaseLine']=Window_BattleLog['prototype'][_0x3ffb9d(0x234)],Window_BattleLog['prototype'][_0x3ffb9d(0x234)]=function(){const _0x458eac=_0x3ffb9d;VisuMZ['BattleCore'][_0x458eac(0x8cc)]['call'](this),this[_0x458eac(0x719)](),this['callNextMethod']();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x86f)]=Window_BattleLog[_0x3ffb9d(0xb66)]['popupDamage'],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8c4)]=function(_0x2c7a14){const _0x24c637=_0x3ffb9d;VisuMZ['BattleCore']['Window_BattleLog_popupDamage'][_0x24c637(0x73d)](this,_0x2c7a14),this[_0x24c637(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x1c4)]=function(){const _0x6c8901=_0x3ffb9d;let _0x354f03=0x0;this[_0x6c8901(0x4e5)][_0x6c8901(0x205)]>0x0&&(_0x354f03=this[_0x6c8901(0x4e5)][this[_0x6c8901(0x4e5)]['length']-0x1]),this['_lines']['length']>_0x354f03?this[_0x6c8901(0xb2d)]():this['callNextMethod']();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x79b)]=Window_BattleLog[_0x3ffb9d(0xb66)]['performActionStart'],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb4c)]=function(_0xf601b1,_0x217149){const _0x33fd95=_0x3ffb9d;VisuMZ[_0x33fd95(0x80e)][_0x33fd95(0x79b)][_0x33fd95(0x73d)](this,_0xf601b1,_0x217149),this[_0x33fd95(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x253)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x8f9)],Window_BattleLog['prototype']['performAction']=function(_0x59681e,_0x4c53ad){const _0x31e9c3=_0x3ffb9d;VisuMZ[_0x31e9c3(0x80e)][_0x31e9c3(0x253)]['call'](this,_0x59681e,_0x4c53ad),this['callNextMethod']();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x98e)]=Window_BattleLog['prototype'][_0x3ffb9d(0xb93)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xb93)]=function(_0x3e40a7){const _0x4f584e=_0x3ffb9d;VisuMZ['BattleCore'][_0x4f584e(0x98e)][_0x4f584e(0x73d)](this,_0x3e40a7);for(const _0x535396 of BattleManager[_0x4f584e(0xaa7)]()){if('vEPHn'===_0x4f584e(0xa48)){if(!_0x535396)continue;if(_0x535396[_0x4f584e(0xb78)]())continue;_0x535396[_0x4f584e(0x30d)]();}else return _0x2c1c31[_0x4f584e(0xae9)](_0x2c10d3=>_0x2c10d3!==_0x54c9ba&&!_0x37efec[_0x4f584e(0x802)](_0x2c10d3)&&_0x2c10d3['notFocusValid']());}this[_0x4f584e(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x535)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x887)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x887)]=function(_0x358af6){const _0x7c0faf=_0x3ffb9d;VisuMZ['BattleCore'][_0x7c0faf(0x535)][_0x7c0faf(0x73d)](this,_0x358af6),this[_0x7c0faf(0x8d7)]();},VisuMZ['BattleCore']['Window_BattleLog_performMiss']=Window_BattleLog[_0x3ffb9d(0xb66)]['performMiss'],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x580)]=function(_0x553ddb){const _0x2d0172=_0x3ffb9d;VisuMZ[_0x2d0172(0x80e)][_0x2d0172(0x3ec)]['call'](this,_0x553ddb),this[_0x2d0172(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x8c5)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2ed)],Window_BattleLog['prototype'][_0x3ffb9d(0x2ed)]=function(_0x3038a6){const _0x4ec519=_0x3ffb9d;VisuMZ[_0x4ec519(0x80e)][_0x4ec519(0x8c5)][_0x4ec519(0x73d)](this,_0x3038a6),this[_0x4ec519(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x89a)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x96f)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x96f)]=function(_0x32751e){const _0xb2b803=_0x3ffb9d;VisuMZ[_0xb2b803(0x80e)][_0xb2b803(0x89a)][_0xb2b803(0x73d)](this,_0x32751e),this['callNextMethod']();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x6f9)]=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2a2)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x2a2)]=function(_0x446f86){const _0x4c3a5b=_0x3ffb9d;VisuMZ[_0x4c3a5b(0x80e)][_0x4c3a5b(0x6f9)][_0x4c3a5b(0x73d)](this,_0x446f86),this[_0x4c3a5b(0x8d7)]();},VisuMZ['BattleCore']['Window_BattleLog_performCounter']=Window_BattleLog[_0x3ffb9d(0xb66)]['performCounter'],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x53d)]=function(_0xca792a){const _0xa4582a=_0x3ffb9d;VisuMZ[_0xa4582a(0x80e)]['Window_BattleLog_performCounter'][_0xa4582a(0x73d)](this,_0xca792a),this[_0xa4582a(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)][_0x3ffb9d(0x2dc)]=Window_BattleLog['prototype']['performReflection'],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x224)]=function(_0x4a9a22){const _0x308ca6=_0x3ffb9d;VisuMZ[_0x308ca6(0x80e)]['Window_BattleLog_performReflection'][_0x308ca6(0x73d)](this,_0x4a9a22),this[_0x308ca6(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)]['Window_BattleLog_performSubstitute']=Window_BattleLog[_0x3ffb9d(0xb66)]['performSubstitute'],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa9c)]=function(_0x44bda9,_0x3046f5){const _0x92f796=_0x3ffb9d;VisuMZ[_0x92f796(0x80e)][_0x92f796(0x88b)]['call'](this,_0x44bda9,_0x3046f5),this[_0x92f796(0x8d7)]();},VisuMZ[_0x3ffb9d(0x80e)]['Window_BattleLog_performCollapse']=Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4b3)],Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x4b3)]=function(_0x437d05){const _0x3f3139=_0x3ffb9d;VisuMZ[_0x3f3139(0x80e)][_0x3f3139(0xabf)][_0x3f3139(0x73d)](this,_0x437d05),this[_0x3f3139(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)]['performCastAnimation']=function(_0x2601d0,_0x5dc593){const _0x1e01bf=_0x3ffb9d;_0x2601d0[_0x1e01bf(0x680)](_0x5dc593),this[_0x1e01bf(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa09)]=function(_0x90b1d1,_0x44aa0c){const _0x532608=_0x3ffb9d,_0x4196c7=_0x90b1d1['attackAnimationId1']();_0x4196c7<=0x0?_0x532608(0x9c3)==='Rmtai'?_0x529079?this[_0x532608(0x2eb)](_0x53e5f2['list'],0x0):this['terminate']():SoundManager['playEnemyAttack']():this['showNormalAnimation'](_0x44aa0c,_0x4196c7);},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x80f)]=function(_0x27de15,_0x1f397,_0x28ea8a){const _0x5c7122=_0x3ffb9d,_0x188266=[_0x27de15]['concat'](_0x1f397);for(const _0x315afd of _0x188266){if(!_0x315afd)continue;_0x315afd[_0x5c7122(0xafb)](_0x28ea8a);}this[_0x5c7122(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x327)]=function(_0x36936a){this['_waitCount']=_0x36936a;},Window_BattleLog['prototype']['requestMotion']=function(_0x56706d,_0x1bc45b){const _0x2b8eec=_0x3ffb9d;for(const _0x353fa6 of _0x56706d){if(!_0x353fa6)continue;_0x353fa6[_0x2b8eec(0x42c)](_0x1bc45b);}this['callNextMethod']();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xa43)]=function(_0x3dde2b,_0x41b717,_0x45aaf9,_0x571057,_0x13f9d7,_0x4266df){const _0x2b4b75=_0x3ffb9d;_0x3dde2b[_0x2b4b75(0x4d9)](_0x41b717,_0x45aaf9,_0x571057,_0x13f9d7,_0x4266df,-0x1),this[_0x2b4b75(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0x5f9)]=function(_0x4544d3,_0x3bae41,_0x2c3d0d,_0x5fdeb5,_0x301e40,_0x3576a6,_0x4e58c8){const _0x1a294f=_0x3ffb9d,_0x5b8e16=Math['min'](..._0x3bae41[_0x1a294f(0x2e9)](_0xa8a9d4=>_0xa8a9d4['battler']()[_0x1a294f(0x904)]-_0xa8a9d4[_0x1a294f(0x491)]()[_0x1a294f(0xc2d)]()/0x2)),_0x50ad7b=Math[_0x1a294f(0x87e)](..._0x3bae41[_0x1a294f(0x2e9)](_0x5518c1=>_0x5518c1[_0x1a294f(0x491)]()['_baseX']+_0x5518c1[_0x1a294f(0x491)]()[_0x1a294f(0xc2d)]()/0x2)),_0x61d484=Math[_0x1a294f(0x775)](..._0x3bae41[_0x1a294f(0x2e9)](_0x575e1e=>_0x575e1e[_0x1a294f(0x491)]()[_0x1a294f(0x531)]-_0x575e1e[_0x1a294f(0x491)]()[_0x1a294f(0xba4)]())),_0x94418b=Math[_0x1a294f(0x87e)](..._0x3bae41[_0x1a294f(0x2e9)](_0x42d4a5=>_0x42d4a5[_0x1a294f(0x491)]()[_0x1a294f(0x531)])),_0x21b96f=_0x3bae41[_0x1a294f(0xae9)](_0x57f63d=>_0x57f63d['isActor']())['length'],_0x51755d=_0x3bae41[_0x1a294f(0xae9)](_0x1fa8f8=>_0x1fa8f8[_0x1a294f(0x2a7)]())[_0x1a294f(0x205)];let _0x60dab8=0x0,_0x1e115d=0x0;if(_0x2c3d0d[_0x1a294f(0x1b7)](/front/i)){if(_0x1a294f(0x97a)!==_0x1a294f(0x3ba))_0x60dab8=_0x21b96f>=_0x51755d?_0x5b8e16:_0x50ad7b;else{if(!_0x352ac6['BattleCore'][_0x1a294f(0x901)][_0x1a294f(0x6c4)]['ShowMpDmg'])return;_0x2eb87f[_0x1a294f(0x80e)][_0x1a294f(0x3fc)][_0x1a294f(0x73d)](this,_0x58bd71);}}else{if(_0x2c3d0d[_0x1a294f(0x1b7)](/middle/i))_0x60dab8=(_0x5b8e16+_0x50ad7b)/0x2,_0x4e58c8=-0x1;else _0x2c3d0d[_0x1a294f(0x1b7)](/back/i)&&(_0x60dab8=_0x21b96f>=_0x51755d?_0x50ad7b:_0x5b8e16);}if(_0x2c3d0d[_0x1a294f(0x1b7)](/head/i))_0x1e115d=_0x61d484;else{if(_0x2c3d0d[_0x1a294f(0x1b7)](/center/i)){if(_0x1a294f(0x834)!=='jXqXz')return _0x22cab2[_0x1a294f(0x80e)][_0x1a294f(0x901)][_0x1a294f(0xa45)]['OverallFormulaJS'][_0x1a294f(0x73d)](this,_0x66192f,_0x2c4b9c);else _0x1e115d=(_0x61d484+_0x94418b)/0x2;}else{if(_0x2c3d0d[_0x1a294f(0x1b7)](/base/i)){if(_0x1a294f(0x833)===_0x1a294f(0x71c)){let _0x4c318a=_0x2a1b53[_0x1a294f(0xad9)][_0x31b8b5];if(!_0x4c318a)return;let _0x33f9a3=_0x4c318a;const _0x20cebd=this[_0x1a294f(0x4e3)]();if(_0x20cebd===_0x1a294f(0x818))_0x33f9a3=_0x33f9a3[_0x1a294f(0x515)](/\x1I\[(\d+)\]/gi,''),_0x33f9a3=_0x33f9a3[_0x1a294f(0x515)](/\\I\[(\d+)\]/gi,'');else{if(!_0x4c318a['match'](/\\I\[(\d+)\]/i)){const _0xe1ec7a=_0x258bd9[_0x1a294f(0x796)]?_0x365a22['SkillsStatesCore'][_0x1a294f(0x901)][_0x1a294f(0x256)]:_0x3f429c[_0x1a294f(0x80e)][_0x1a294f(0x901)][_0x1a294f(0x606)],_0x43e1d5=_0x8795c0[_0x1a294f(0x20c)][_0x1a294f(0x802)](_0x583888),_0x4a4339=_0x43e1d5?_0xe1ec7a[_0x1a294f(0x528)]:_0xe1ec7a[_0x1a294f(0x1a8)];_0x33f9a3='\x5cI[%1]%2'[_0x1a294f(0x4a7)](_0x4a4339,_0x4c318a);}}this['addCommand'](_0x33f9a3,_0x1a294f(0x8d6),!![],_0x4e7ab6);}else _0x1e115d=_0x94418b;}}}_0x4544d3[_0x1a294f(0x4d9)](_0x60dab8,_0x1e115d,_0x5fdeb5,_0x301e40,_0x3576a6,_0x4e58c8),this[_0x1a294f(0x8d7)]();},Window_BattleLog[_0x3ffb9d(0xb66)][_0x3ffb9d(0xbcf)]=function(_0x5f1a0d,_0x2584a1,_0xa4bad3){const _0x2411dc=_0x3ffb9d;for(const _0x111cfb of _0x5f1a0d){if(!_0x111cfb)continue;_0x111cfb[_0x2411dc(0x5b1)](_0x2584a1,_0xa4bad3);}this['callNextMethod']();};